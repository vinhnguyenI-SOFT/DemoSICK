<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutomatedSolutions.ASComm</name>
    </assembly>
    <members>
        <member name="T:AutomatedSolutions.Win.Comm.SERIAL_PORT_DTR_CONTROL">
            <summary>
            
            </summary>
            <term>DISABLE</term> 
            <term>ENABLED</term> 
            <description>Serial communications port DTR control enabled</description> 
            <term>UDP</term> 
            <description>Serial communications port DTR control handshake</description> 
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SERIAL_PORT_DTR_CONTROL.DISABLE">
            <summary>
            DTR control is disabled
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SERIAL_PORT_DTR_CONTROL.ENABLE">
            <summary>
            DTR control is enabled
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SERIAL_PORT_DTR_CONTROL.HANDSHAKE">
            <summary>
            DTR handshake control is enabled
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SERIAL_PORT_RTS_CONTROL">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SERIAL_PORT_RTS_CONTROL.DISABLE">
            <summary>
            RTS control is disabled
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SERIAL_PORT_RTS_CONTROL.ENABLE">
            <summary>
            RTS control is enabled
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SERIAL_PORT_RTS_CONTROL.HANDSHAKE">
            <summary>
            RTS handshake control is enabled
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SERIAL_PORT_RTS_CONTROL.TOGGLE">
            <summary>
            RTS toggle control is enabled
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ASComm">
            <summary>
            	<para>The ASComm component is the top level component in the ASComm.NET component
                heirarchy. The ASComm component provides the following functionality:</para>
            	<list type="bullet">
            		<item>Channel collection for storing objects of type Channel</item>
            		<item>Device collection for storing objects of type Device</item>
            		<item>Serialization mechanism for Channel and Device collections</item>
            		<item>Visual design capability to manipulate Channel and Device
                    collections</item>
            		<item>Dispose method for deterministic shutdown</item>
            	</list>
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.#ctor">
            <summary>Default constructor for ASComm class.</summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASComm.tag">
            <summary>
            Internal storage for Tag property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASComm.channels">
            <summary>
            Internal storage for Channels property collection 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASComm.channelCollection">
            <summary>
            Internal storage for Channels property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASComm.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.Tag">
            <summary>
            Gets or sets user-defined data associated with the component.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.Channels">
            <summary>
            Gets the ChannelCollection containing channels in this ASComm instance.
            </summary>
            <remarks>
            The Channels property is read only and returns theÂ <see
            cref="T:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection"/> contained by
            this ASComm instance.
            </remarks>
            <example>
            <code lang="C#"><![CDATA[
            Channel channel = new AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel();
            asComm1.Channels.Add(channel);
            ]]></code>
            <code lang="VB"><![CDATA[
            Dim channel As New AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel()
            asComm1.Channels.Add(channel)
            ]]></code>
            <code><![CDATA[
            Channel* pChannel = new AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel();
            asComm1.Channels.Add(pChannel);
            ]]></code>
            </example>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.Version">
            <summary>
            Returns FileVersion
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.GetChannelTypes">
            <summary>
            Returns Channel types supported by this version of ASComm
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection">
            <summary>Implements the IList interface.</summary>
            <remarks>
            	<para>The ChannelCollection class provides type-safe access to the collection that
                stores Channel object instances.</para>
            	<para>Channels added to the ChannelCollection behave as follows:</para>
            	<list type="bullet">
            		<item>Channels are serialized/deserialized when the ASComm object instance is
                    serialized/deserialized.</item>
            		<item>Channels are disposed when the ASComm object instance is disposed.</item>
            	</list>
            </remarks>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.owner">
            <summary>
            
            </summary>		
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.#ctor(AutomatedSolutions.Win.Comm.ASComm)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.Item(System.Int32)">
            <summary>
            The CollectionEditor will determine the type of objects to be created by
            looking at the property type of the following method. CollectionEditor
            internally uses reflection to get the PropertyInfo for the "Item" property. 
            This method must be public.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.InnerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.Add(AutomatedSolutions.Win.Comm.Channel)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.AddRange(AutomatedSolutions.Win.Comm.Channel[])">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.Insert(System.Int32,AutomatedSolutions.Win.Comm.Channel)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.Remove(AutomatedSolutions.Win.Comm.Channel)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.Contains(AutomatedSolutions.Win.Comm.Channel)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.IndexOf(AutomatedSolutions.Win.Comm.Channel)">
            <summary>
            
            </summary>
            <param name="value">Channel to find</param>
            <returns>Index of channel in collection, or -1 if not found</returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.ChannelCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
            <remarks>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly or indirectly by a user's code. 
            Managed and unmanaged resources can be disposed.
            If disposing equals false, the method has been called by the runtime from inside the finalizer 
            and you should not reference other objects. 
            Only unmanaged resources can be disposed.
            </remarks>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASComm.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ASWritableLicense">
            <summary>
            Base class for Driver and Option License Info
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ASWritableLicense.LicenseTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.LicenseTypes.Driver">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.LicenseTypes.Option">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.fileExists">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.licenseType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.driverName">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.fileName">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.password">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.buyNowURL">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.alias1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.alias2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.alias3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ASWritableLicense.licenseFilePath">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASWritableLicense.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,AutomatedSolutions.Win.Comm.ASWritableLicense.LicenseTypes)">
            <summary>
            Use this constructor for system license
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASWritableLicense.#ctor(System.Int32)">
            <summary>
            Use this constructor for transfer license only
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.LicenseFilePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.FileExists">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.DriverName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.LicenseType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.BuyNowURL">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.Alias1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.Alias2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.Alias3">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.IsTrial">
            <summary>
            Returns true if the current license is a trial license
            Tests InstallationID to see if string present.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.IsDeveloperProgram">
            <summary>
            Returns true if the current license is a Developer Program license
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ASWritableLicense.IsValid">
            <summary>Returns true if the license passes alias validation, identifier validation, and time checks</summary>
            <returns>bool</returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ASWritableLicense.ShortErrorDescription">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.MessageType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.MessageType.PCCC_PLC5_TYPED_WRITE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.MessageType.PCCC_SLC_TYPED_WRITE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.MessageType.PCCC_PLC2_UNPROTECTED_WRITE">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Protocol">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Protocol.EIP">
            <summary>
            Port 44818
            </summary>  
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Protocol.CSP">
            <summary>
            Port 2222 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.sessionHandles">
            <summary>
            Session handle generator
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.isOpen">
            <summary>
            Determines whether listen port is open
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.idleTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.encoding">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.activeThreads">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.activeThreadsLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.connections">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.description">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.tag">
            <summary>
            Internal storage for Tag property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.msgProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.listenPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.localAddress">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.connectionsLock">
            <summary>
            Transaction synchronization object
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.listener">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.defaultIPAddress">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.listenThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.#ctor">
            <summary>
            Default constructor
            </summary>
            <exception cref="T:System.ComponentModel.LicenseException">Throws a LicenseException if a license is not found.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.#ctor(AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Protocol)">
            <summary>
            Default constructor
            </summary>
            <exception cref="T:System.ComponentModel.LicenseException">Throws a LicenseException if a license is not found.</exception>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.IsOpen">
            <summary>
            Gets a flag indicating whether the listen port is open
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.IsDisposing">
            <summary>
            Gets a flag indicating whether the UnsolicitedMessage object instance has been disposed
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Description">
            <summary>
            Gets or sets user-defined description associated with the component.
            This property is for information purposes only and does not affect operation.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Tag">
            <summary>
            Gets or sets user-defined data associated with the component.
            This property is for information purposes only and does not affect operation.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.MsgProtocol">
            <summary>
            Gets or sets the message protocol (CSP or EIP) supported by this object instance.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.LocalAddress">
            <summary>
            Gets or sets the NIC address that will be used by this object instance.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Connections">
            <summary>
            Returns the total number of open client connections.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.ListenPort">
            <summary>
            Gets or sets the IP listen port that will be used by this object instance.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Initialise">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.OpenPort">
            <summary>
            Open a TcpListener that listens on all network intefaces on port 44818. 
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">The exception that is thrown when a socket error occurs.</exception>
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread.</exception>
            <exception cref="T:System.InvalidOperationException">This thread was created by using a ThreadStart delegate instead of a ParameterizedThreadStart delegate.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.OpenPort(System.Net.IPAddress)">
            <summary>
            Open a TcpListener that listens on the specified network interface. 
            </summary>
            <param name="localAddress">IP Address of network interface card</param>
            <exception cref="T:System.Net.Sockets.SocketException">The exception that is thrown when a socket error occurs.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments provided to a method is not valid.</exception>
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread.</exception>
            <exception cref="T:System.InvalidOperationException">This thread was created by using a ThreadStart delegate instead of a ParameterizedThreadStart delegate.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.OpenPort(System.Net.IPEndPoint)">
            <summary> 
            Open a TcpListener that listens on the specified network interface and port. 
            </summary>
            <param name="localEndPoint">IP Address of network interface card and port to listen on.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The exception that is thrown when a socket error occurs.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments provided to a method is not valid.</exception>
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread.</exception>
            <exception cref="T:System.InvalidOperationException">This thread was created by using a ThreadStart delegate instead of a ParameterizedThreadStart delegate.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.ClosePort">
            <summary>
            Closes all server connections and terminates threads 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.SignalThreadExit(AutomatedSolutions.Win.Comm.TcpServerConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.InvokeDelegate(System.Delegate,System.Object[])">
            <summary>
            This checks for GUI application
            If GUI application, invoke is used to avoid cross-threaded UI operations
            Else, handler delegate is called directly
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.FireReceived(AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs,System.Boolean)">
            <summary>
            Instructs item to call its Received event
            </summary>
            <param name="evArgs"></param>
            <param name="disposing"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.FireError(AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs,System.Boolean)">
            <summary>
            Instructs item to call its Received event
            </summary>
            <param name="evArgs"></param>
            <param name="disposing"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.CSPListenThread">
            <summary> Thread listens for incoming connections on CSP port </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.ReadStream(System.Net.Sockets.NetworkStream,System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.CSPClientHandlerThread(System.Object)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.EIPListenThread">
            <summary> This handles connections from MicroLogix, SLC500, and PLC5 EIP enabled devices. </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.EIPClientHandlerThread(System.Object)">
            <summary>
            This handles unsolicited messages from MicroLogix, SLC500, and PLC5 EIP enabled devices.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.ProcessCipPcccObject(AutomatedSolutions.Win.Comm.TcpServerConnection,System.Byte,System.Byte[])">
            <summary> Parses PCCC Object from CIP Object </summary>
            <param name="clientConnection"></param>
            <param name="cipServiceCode"></param>
            <param name="pcccData"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.ProcessPCCC(System.Byte[],AutomatedSolutions.Win.Comm.TcpServerConnection)">
            <summary> Decodes PCCC Request and returns PCCC Reply </summary>
            <param name="pcccRequestRaw"></param>
            <param name="clientConnection"></param>
            <returns>ABProto.PCCC.Encode.Reply</returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.ReceivedEventHandler">
            <summary>
            Delegate for Received event
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.receivedEvent">
            <summary>
            Internal storage for event to indicate that a message has been received
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Received">
            <summary>
            Event to indicate that a message has been received
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.ErrorEventHandler">
            <summary>
            Delegate for Error event
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.errorEvent">
            <summary>
            Internal storage for Event to indicate that an error has occurred
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.Error">
            <summary>
            Event to indicate that an error has occurred
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.ipSender">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.ipLocal">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.hwTagName">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.elements">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.hwTagType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.dotNetType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.rawData">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.msgType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.IPSender">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.IPLocal">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.HwTagName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.Elements">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.HWTagType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.DotNetType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.MsgType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.#ctor(System.String,System.String,System.String,System.Int32,AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType,System.Type,System.DateTime,AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessage.MessageType,System.Byte[])">
            <summary>
            
            </summary>
            <param name="ipSender"></param>
            <param name="ipLocal"></param>
            <param name="hwTagName"></param>
            <param name="elements"></param>
            <param name="hwTagType"></param>
            <param name="dotNetType"></param>
            <param name="timestamp"></param>
            <param name="msgType"></param>
            <param name="rawData"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.GetStructuredValues``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.GetValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.ReadOnlyCollection">
            <summary>
            ReadOnlyCollection class for collections of non-generic types.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.ReadOnlyCollection.#ctor(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="sourceList"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageReceivedEventArgs.ReadOnlyCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs.ipSender">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs.ipLocal">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs.timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs.message">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs.IPSender">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs.IPLocal">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs.Message">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.UnsolicitedMessageErrorEventArgs.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="ipSender"></param>
            <param name="ipLocal"></param>
            <param name="timestamp"></param>
            <param name="message"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Driver">
            <summary>
            Driver enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Driver.CSP">
            <summary>
            Use for direct connection into Legacy processor Ethernet port that supports C/S Protocol
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Driver.EIP">
            <summary>
            Use for direct connection into Legacy processor Ethernet port that supports EthernetIP
            Supports connection to Legacy processors via 1761-NET-ENI module (series B or highr)
            but ENIs appear to retain replys from previous sessions, so use ENI driver instead.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Driver.ENI">
            <summary>
            Use for 1761-NET-ENI connection to PLC5, SLC500, and MicroLogix via 1761-NET-ENI module
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Driver.CLG_DH">
            <summary>
            Use for ControlLogix Gateway / DH+ connection to Legacy processors
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel">
            <summary>
            Use this channel for Ethernet connectivity to A-B Legacy families
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WSAEWOULDBLOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WSAETIMEDOUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.defaultPort">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.int2float">
            <summary>
            
            </summary>	
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.lastSlot">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.lastChannel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.cid">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.connectionSN">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.lastMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.forwardOpened">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.tns">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.waitHandles">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.connectDone">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.license">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.client">
            <summary>
            Reusable socket variable
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.CSP_E_SUCCESS">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.sessionHandle">
            <summary>
            Holds session handle from register session
            </summary>		
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.registered">
            <summary>
            Indicates whether session has been registered.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.currentEndPoint">
            <summary>
            Temporary storage for endpoint when connected.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.driver">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.#ctor(AutomatedSolutions.Win.Comm.AB.Legacy.Net.Driver)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="driver">
            Enumerated Driver type to use for this channel.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.Devices">
            <summary>
            Gets the DeviceCollection containing devices in the ASComm instance.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.Driver">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.GetMaxDataBytesRead(AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Gets the maximum number of readable data bytes supported by device model and driver
            </summary>
            <param name="model">
            Value from Model enumeration
            </param>
            <returns>
            Maximum databytes allowed for Read transaction on this device model
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.GetMaxDataBytesWrite(AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Gets the maximum number of writable data bytes supported by device model and driver
            </summary>
            <param name="model">
            Value from Model enumeration
            </param>
            <returns>
            Maximum databytes allowed for Read transaction on this device model
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.CloseSocket">
            <summary>
            Closes socket and performs cleanup
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.RegisterSession(AutomatedSolutions.Win.Comm.AB.Legacy.Device)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.UnRegisterSession">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.ReadBlock(System.String,System.Int32,AutomatedSolutions.Win.Comm.AB.Legacy.Device,System.Byte[])">
            <summary>
            
            </summary>
            <param name="hwTagName"></param>
            <param name="elements"></param>
            <param name="device"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.CSPMessage(AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command)">
            <summary>
            Performs the send and receive messaging for PCCC using CSP
            </summary>
            <returns>
            Protocol.PCCC.Reply
            </returns>
            <param name="device"></param>
            <param name="pcccCommand"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.EIPUnconnectedMessage(AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command)">
            <summary>
            Performs the send and receive messaging for an EIP unconnected message
            </summary>
            <returns>
            EIP_Reply packet for a multi-request service.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when buffer is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when an error occurrs when attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Socket has been closed.
            </exception>
            <param name="device"></param>
            <param name="eipCommand"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.EIPConnectedMessage(AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command,System.UInt16)">
            <summary>
            Performs the send and receive messaging for an EIP connected message
            </summary>
            <returns>
            EIP_Reply packet for a multi-request service.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when buffer is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when an error occurrs when attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Socket has been closed.
            </exception>
            <param name="device"></param>
            <param name="cmd"></param>
            <param name="tns"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WriteBits16(AutomatedSolutions.Win.Comm.AB.Legacy.Item,AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.Result@)">
            <summary>
            Performs bit level writing for one or more 16-bit addresses.
            This routine uses three tasks to optimize bit level writing
            </summary>
            <param name="item"></param>
            <param name="device"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WriteBits32(AutomatedSolutions.Win.Comm.AB.Legacy.Item,AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.Result@)">
            <summary>
            Performs bit level writing for one or more 32-bit addresses.
            This routine uses three tasks to optimize bit level writing
            </summary>
            <param name="item"></param>
            <param name="device"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WriteBits(AutomatedSolutions.Win.Comm.AB.Legacy.Item,AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.Result@)">
            <summary>
            Performs bit level writing for one or more addresses.
            This routine uses three tasks to optimize bit level writing
            </summary>
            <param name="item"></param>
            <param name="device"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WriteElements(AutomatedSolutions.Win.Comm.AB.Legacy.Item,AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.Result@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="device"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.PCCCReadFile(AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File,AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Performs work in several major steps:
            1. Reads all requested data points in file, using multiple transactions if required. 
            2. Stores data from each transaction in large byte[].
            3. After file has been read, iterates through byte[] to transfer data into items.
            </summary>
            <param name="file"></param>
            <param name="device"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.PCCCReadIOFile(AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File,AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="device"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.PCCCReadElement(AutomatedSolutions.Win.Comm.AB.Legacy.Item,AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            For use with strings only because strings cannot be optimized
            For all other types, use PCCCReadFile
            *** This method has only been tested with strings. ***
            This method will handle Items that have multiple string elements
            </summary>
            <param name="item"></param>
            <param name="device"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.Read(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WriteItems(System.Collections.ArrayList,AutomatedSolutions.Win.Comm.AB.Legacy.Device,AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="device"></param>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.Write(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal write method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.DebugOutputPacketBytes(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="message"></param>
            <param name="data"></param>
            <param name="length"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.CIPForwardOpen(AutomatedSolutions.Win.Comm.AB.Legacy.Device)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.CIPForwardClose(AutomatedSolutions.Win.Comm.AB.Legacy.Device)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.DebugOutputPacketBytes(System.String,System.String,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="message"></param>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WaitForMessage(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header@,System.Int32)">
            <summary>
            This overload waits for a header message
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown when buffer is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when an error occurrs when attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Socket has been closed.
            </exception>
            <param name="header"></param>
            <param name="bytesToReceive"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WaitForMessage(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header@,System.Int32,AutomatedSolutions.Win.Comm.AB.Legacy.Device)">
            <summary>
            This overload waits for a header message
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown when buffer is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when an error occurrs when attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Socket has been closed.
            </exception>
            <param name="header"></param>
            <param name="bytesToReceive"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.WaitForMessage(System.Byte[]@,System.Int32,AutomatedSolutions.Win.Comm.AB.Legacy.Device)">
            <summary>
            Success: Returns number of bytes received.
            Failure: Returns -1 for socket error or 0 for timeout
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown when buffer is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when an error occurrs when attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Socket has been closed.
            </exception>
            <param name="buffer"></param>
            <param name="bytesToReceive"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.Channel.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Net.DeviceCollectionEditor">
            <summary>
            Device Collection Editor Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Net.DeviceCollectionEditor.types">
            <summary>
            A Collection Editor for all public classes that inherit from Device
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.DeviceCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.DeviceCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Net.DeviceCollectionEditor.GetTypes">
            <summary>
            method to retrieve device types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Group">
            <summary>
            The Group class is used to logically group items with common characteristics together.
            Characteristic currently include Active status and Update Rate.
            The Group class contains a Items collection which stores the group's Items.
            The Device class supports the ISserializable and IDisposable interfaces.
            </summary>
            <remarks>
            Because this class has a thread that needs to be started by the constructor,
            it was created with the ISerializable interface so the SerializationInfo constructor is called.
            This means that serialization of elements needs to be handled manually.
            The GetObjectData function gathers data from the fields to be serialized prior to disposal
            and then the data is passed back to the serialization constructor when the object is recreated.
            </remarks>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Group.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Group.#ctor(System.Boolean,System.Int32)">
            <summary>
            Assignment constructor
            </summary>
            <param name="active">
            Indicates whether Group is active (scanning data points on hardware device). Default = true.
            </param>
            <param name="updateRate">
            The rate in milliseconds at which data points on hardware device should be scanned. Default = 500 mSec.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is called by the ISerializable Interface
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Group.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Group.Items">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Group.Refresh">
            <summary>
            Performs a synchronous Read on all items in group. 
            To perform a SyncRead on selected items, use the Device.Read method.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Group.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.ItemCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Items property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.ItemCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.ItemCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.ItemCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.TagType">
            <summary>
            User-supplied hardware tag datatypes for A-B Logix family of Devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.TagType.AUTO">
            <summary>
            Indicates that auto-discovery should be used
            Since Legacy device tag names include type information, a transaction with the CPU is not required
            AUTO is supported for simulation mode for Legacy devices
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType">
            <summary>
            Internally-used hardware tag datatypes for A-B Legacy family of Devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.AUTO">
            <summary>
            Indicates that auto-discovery should be used
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.BOOLEAN">
            <summary>
            Boolean type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.INTEGER">
            <summary>
            16-bit integer type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.LONG">
            <summary>
            32-bit long type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.FLOAT">
            <summary>
            32-bit float type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.STRING">
            <summary>
            82 char string type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.ASCII">
            <summary>
            8-bit ascii type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.BCD">
            <summary>
            16-bit bcd type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.TIMER">
            <summary>
            Timer structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.COUNTER">
            <summary>
            Counter structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.CONTROL">
            <summary>
            Control structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.SystemType.DATA_LOGGER">
            <summary>
            Data logger queue
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Item">
            <summary>
            AB.Legacy.Item class
             
            The Item class is used to represent data areas in hardware devices (PLCs, instrumentation, etc.).
            The Item class supports the ISserializable and IDisposable interfaces.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.#ctor(AutomatedSolutions.Win.Comm.AB.Legacy.Item)">
            <summary>
            Copy constructor
            Use this constructor to create a new item and copy the contents from an existing item.
            </summary>
            <param name="item">Item to copy from.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.#ctor(System.String)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent a single tag on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the tag on the hardware device.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.#ctor(System.String,System.Int32)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent an array of contiguous tags on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the starting tag on the hardware device.</param>
            <param name="elements">Number of elements. Enter the number of array elements.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Item.hwTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Item.hwTagType">
            <summary>
            internal storage for HWTagType property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Item.HWTag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Item.HWTagName">
            <summary>
            Gets or sets the hardware tag name property, required. Indicates the hardware tag name to associate with this Item instance. This field should correspond to a valid tag/register in your hardware device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Item.HWTagType">
            <summary>
            Gets the hardware tag type property. Indicates the data type for this item on the hardware device. Use 'Empty' for hardware devices that support datatype auto-discovery.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.PackAsciiData(System.Byte[],AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Packs 'A' file data to its packed transfer format.
            </summary>
            <param name="asciiBytes"></param>
            <param name="model"></param>
            <returns>Packed ASCII data</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.PackAsciiData(System.Char[],AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Packs 'A' file data to its packed transfer format.
            </summary>
            <param name="asciiChars"></param>
            <param name="model"></param>
            <returns>Packed ASCII data</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.PackAsciiData(System.String,AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Packs 'A' file data to its packed transfer format.
            </summary>
            <param name="asciiString"></param>
            <param name="model"></param>
            <returns>Packed ASCII data</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.UnpackAsciiData(System.Object[],AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Unpacks 'A' file data from its packed transfer format.
            </summary>
            <param name="values"></param>
            <param name="model"></param>
            <returns>ASCII String</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.ConfigureValuesArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.GetValueType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.GetSystemType">
            <summary>
            For internal use only. Returns the CLR system type that corresponds to the hardware data type for this item.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.GetStructuredValues(System.Object@)">
            <summary>
            Populates a class reference with structured data from the controller.
            </summary>
            <param name="o">
            Reference to object. 
            NOTE: Pass-by-reference parameters must be the same as the parameter type, so you must assign an instance of your UDT/PDT class to a variable of type Object to pass in as a parameter.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Item.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Model">
            <summary>
            Model enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Model.PLC5">
            <summary>
            PLC5
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Model.SLC500">
            <summary>
            SLC500
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Model.MicroLogix">
            <summary>
            MicroLogix
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Device">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Device.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Device.#ctor(System.String,AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="routePath">
            The communications routing path to a target hardware device. 
            For direct connections to A-B Legacy devices, route path is the IP Address of the target device. 
            For ControlLogix Gateway connections to legacy devices, route path is the IP Address of the ControlLogix ENET/ENBT module and routing information from the module to the target device. 
            For ControlLogix Gateway via DH+, format is: A,B,C,D,E
            A = IP Address of 1756-ENET or 1756-ENBT module.
            B = Backplane Number (always 1).
            C = Slot number of local 1756-DHRIO (decimal).
            D = Channel of local 1756-DHRIO (A or B).
            E = Node address of remote device (octal for DH).
            </param>
            <param name="model">
            Model or family of target device. 
            See Model enumeration in Help for valid values.
            </param>
            <example>
            Device d = new Device("192.168.0.50", Model.SLC500)
            Device d = new Device("192.168.0.55,1,2,A,7", Model.PLC5)
            </example>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Device.#ctor(System.String,AutomatedSolutions.Win.Comm.AB.Legacy.Model,System.Int32,System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="routePath">
            The communications routing path to a target hardware device. 
            For direct connections to A-B Legacy devices, route path is the IP Address of the target device. 
            For ControlLogix Gateway connections to legacy devices, route path is the IP Address of the ControlLogix ENET/ENBT module and routing information from the module to the target device. 
            For ControlLogix Gateway via DH+, format is: A,B,C,D,E
            A = IP Address of 1756-ENET or 1756-ENBT module.
            B = Backplane Number (always 1).
            C = Slot number of local 1756-DHRIO (decimal).
            D = Channel of local 1756-DHRIO (A or B).
            E = Node address of remote device (octal for DH).
            </param>
            <param name="model">
            Model or family of target device. 
            See Model enumeration in Help for valid values.
            </param>
            <param name="timeoutConnect">
            The connection timeout value in milliseconds.
            </param>
            <param name="timeoutTrans">
            The transaction timeout value in milliseconds.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Device.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Device.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Device.model">
            <summary>
            CPU Model
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Device.Groups">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Device.RoutePath">
            <summary>
            Gets or sets the node address or routing path information that must be supplied to address the target device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Device.Model">
            <summary>
            Gets or sets the processor model represented by this device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Device.SimRead(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for read calls
            </summary>
            <param name="items"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Device.SimWrite(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for write calls
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Device.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Device.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.GroupCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Groups property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.GroupCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.GroupCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.GroupCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control">
            <summary>
            Control Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="inBuffer"></param>
            <param name="offset"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.#ctor(System.Byte[],System.Int32,System.Int32,AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="inBuffer"></param>
            <param name="offset"></param>
            <param name="index"></param>
            <param name="model">Only used for constructor compatibility across Timmer, Counter, and Control for unsolicited messages</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte,System.Int16,System.Int16)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="EN">Enable bit</param>
            <param name="EU">Enable Unloading bit</param>
            <param name="DN">Done bit</param>
            <param name="EM">Empty bit</param>
            <param name="ER">Error bit</param>
            <param name="UL">Unload bit</param>
            <param name="IN">Inhibit Comparison bit</param>
            <param name="FD">Found bit</param>
            <param name="ERR">Error value</param>
            <param name="LEN">Length value</param>
            <param name="POS">Position value</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.#ctor(System.String)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="values">
            Accepts string containing Control field values seperated by slashes '/'. 
            Format: EN/EU/DN/EM/ER/UL/IN/FD/ERR/LEN/POS 
            </param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.en">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.eu">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.dn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.em">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.er">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.ul">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.inh">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.fd">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.err">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.len">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.pos">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.EN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.EU">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.DN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.EM">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.ER">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.UL">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.IN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.FD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.ERR">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.LEN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.POS">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.GetBit(System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="bit"></param>
            <param name="subElement"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.ToString">
             <summary>
             Returns string containing Control fields values seperated by slashes ('/'). 
             </summary>
             <returns>
             Returns string containing Control fields values seperated by slashes ('/'). 
             Format: EN/EU/DN/EM/ER/UL/IN/FD/ERR/LEN/POS 
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.Equals(System.Object)">
            <summary>
            Compares two control objects
            </summary>
            <param name="obj">Control object reference</param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter">
            <summary>
            Counter Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="inBuffer"></param>
            <param name="offset"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.#ctor(System.Byte[],System.Int32,System.Int32,AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="inBuffer"></param>
            <param name="offset"></param>
            <param name="index"></param>
            <param name="model">Only used for constructor compatibility across Timmer, Counter, and Control for unsolicited messages</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int16,System.Int16)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="CU">Up Enable bit</param>
            <param name="CD">Down Enable bit</param>
            <param name="DN">Done bit</param>
            <param name="OV">Overflow bit</param>
            <param name="UN">Underflow bit</param>
            <param name="UA">UA bit</param>
            <param name="PRE">Preset value</param>
            <param name="ACC">Accumulated value</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.#ctor(System.String)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="values">
            Accepts string containing Counter field values seperated by slashes '/'. 
            Format: CU/CD/DN/OV/UN/UA/PRE/ACC 
            </param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.cu">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.cd">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.dn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.ov">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.un">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.ua">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.pre">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.acc">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.PRE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.ACC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.CU">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.CD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.DN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.OV">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.UN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.UA">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.GetBit(System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="bit"></param>
            <param name="subElement"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.ToString">
            <summary>
            
            </summary>
            <returns>
            Returns string containing Counter fields values seperated by slashes ('/'). 
            Format: CU/CD/DN/OV/UN/UA/PRE/ACC 
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.Equals(System.Object)">
            <summary>
            Compares two Counter objects
            </summary>
            <param name="obj">Counter object reference</param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer">
            <summary>
            Timer Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.#ctor(System.Byte[],System.Int32,System.Int32,AutomatedSolutions.Win.Comm.AB.Legacy.Model)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="inBuffer"></param>
            <param name="offset"></param>
            <param name="index"></param>
            <param name="model"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int16,System.Int16)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="EN">Enable bit</param>
            <param name="TT">Timing bit</param>
            <param name="DN">Done bit</param>
            <param name="PRE">Prest value</param>
            <param name="ACC">Accumulated value</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.#ctor(System.String)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="values">
            Accepts string containing Timer field values seperated by slashes '/'. 
            Format: EN/TT/DN/PRE/ACC 
            </param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.en">
            <summary>
            word 0, bit 15
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.tt">
            <summary>
            word 0, bit 14
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.dn">
            <summary>
            word 0, bit 13
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.pre">
            <summary>
            word 1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.acc">
            <summary>
            word 2
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.EN">
            <summary>
            word 0, bit 15
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.TT">
            <summary>
            word 0, bit 14
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.DN">
            <summary>
            word 0, bit 13
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.PRE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.ACC">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.GetBit(System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="bit"></param>
            <param name="subElement"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.ToString">
            <summary>
            Returns string containing Timer fields values seperated by slashes ('/'). 
            </summary>
            <returns>
            Returns string containing Timer fields values seperated by slashes ('/'). 
            Format: EN/TT/DN/PRE/ACC 
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.Equals(System.Object)">
            <summary>
            Compares two Timer objects
            </summary>
            <param name="obj">Counter object reference</param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.DataFieldMapping">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.DataFieldMapping.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="srcType"></param>
            <param name="srcByte"></param>
            <param name="srcBit"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.StructEncoding`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.StructEncoding`1.dataMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.StructEncoding`1.computedDataLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.StructEncoding`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.StructEncoding`1.CreateDataMap(System.Object,System.Int32@)">
            <summary>
            Creates initial data map from reflection of class/structure fields
            If myStruct is an array, data map is only created for first element and computedDataLength is length of one element.
            Can be used recursively
            </summary>
            <param name="myStruct"></param>
            <param name="byteOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.StructEncoding`1.ToStruct``1(``0[],System.Byte[])">
            <summary>
            
            </summary>
            <typeparam name="TS"></typeparam>
            <param name="myStruct"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.StructEncoding`1.ToStruct``1(System.Collections.Generic.List{``0},System.Byte[])">
            <summary>
            
            </summary>
            <typeparam name="TS"></typeparam>
            <param name="myStructList"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.StructEncoding`1.ToStruct(System.Object@,System.Int32@,System.Byte[])">
            <summary>
            
            </summary>
            <param name="myStruct"></param>
            <param name="dataMapIndex"></param>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.PDT">
            <summary>
            Abstract PDT base class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PDT.computedDataLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PDT.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.PDT.CreateDataMap(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.AB.Logix.Data.DataFieldMapping}@,System.Object,System.Int32@)">
            <summary>
            Creates initial data map from reflection of class/structure fields
            If myStruct is an array, data map is only created for first element and computedDataLength is length of one element.
            Can be used recursively
            </summary>
            <param name="dataMap"></param>
            <param name="myStruct"></param>
            <param name="byteOffset"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM">
            <summary>
            ALARM pre-defined type (ok)
            Size: 96 bytes
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._enableIn">
            <summary>
            byte 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._in">
            <summary>
            byte 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._hhLimit">
            <summary>
            byte 8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._hLimit">
            <summary>
            byte 12
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._lLimit">
            <summary>
            byte 16
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._llLimit">
            <summary>
            byte 20
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._deadband">
            <summary>
            byte 24
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._rocPosLimit">
            <summary>
            byte 28
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._rocNegLimit">
            <summary>
            byte 32
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._rocPeriod">
            <summary>
            byte 36
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._enableOut">
            <summary>
            byte 40
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._hhAlarm">
            <summary>
            byte 40
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._hAlarm">
            <summary>
            byte 40 bit 2
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._lAlarm">
            <summary>
            byte 40 bit 3
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._llAlarm">
            <summary>
            byte 40 bit 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._rocPosAlarm">
            <summary>
            byte 40 bit 5
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._rocNegAlarm">
            <summary>
            byte 40 bit 6
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._roc">
            <summary>
            byte 44
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._status">
            <summary>
            byte 48
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM._reserved">
            <summary>
            byte 52 - 95
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.HHLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.HLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.LLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.LLLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.Deadband">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.ROCPosLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.ROCNegLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.ROCPeriod">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.HHAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.HAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.LAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.LLAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.ROCPosAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.ROCNegAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.ROC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.InstructFault">
            <summary>
            Status Bit 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.DeadbandInv">
            <summary>
            Status Bit 1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.ROCPosLimitInv">
            <summary>
            Status Bit 2
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.ROCNegLimitInv">
            <summary>
            Status Bit 3
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.ALARM.ROCPeriodInv">
            <summary>
            Status Bit 4
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED">
            <summary>
            AXIS_CONSUMED pre-defined type (ok)
            Size: 248 bytes
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._reserved1">
            <summary>
            bytes 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._axisFault">
            <summary>
            byte 12
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._axisStatus">
            <summary>
            byte 16
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._motionStatus">
            <summary>
            byte 20
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._reserved2">
            <summary>
            byte 24
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._axisEvent">
            <summary>
            byte 64
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._outputCamStatus">
            <summary>
            byte 68
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._outputCamPendingStatus">
            <summary>
            byte 72
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._outputCamLockStatus">
            <summary>
            byte 76
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._outputCamTransitionStatus">
            <summary>
            byte 80
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._actualPosition">
            <summary>
            byte 84
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._strobeActualPosition">
            <summary>
            byte 88
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._startActualPosition">
            <summary>
            byte 92
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._averageVelocity">
            <summary>
            byte 96
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._actualVelocity">
            <summary>
            byte 100
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._actualAcceleration">
            <summary>
            byte 104
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._watchPosition">
            <summary>
            byte 108
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._registration1Position">
            <summary>
            byte 112
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._registration2Position">
            <summary>
            byte 116
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._registration1Time">
            <summary>
            byte 120
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._registration2Time">
            <summary>
            byte 124
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._interpolationTime">
            <summary>
            byte 128
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._interpolatedActualPosition">
            <summary>
            byte 132
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._masterOffset">
            <summary>
            byte 136
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._strobeMasterOffset">
            <summary>
            byte 140
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._startMasterOffset">
            <summary>
            byte 144
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._commandPosition">
            <summary>
            byte 148
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._strobeCommandPosition">
            <summary>
            byte 152
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._startCommandPosition">
            <summary>
            byte 156
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._commandVelocity">
            <summary>
            byte 160
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._commandAcceleration">
            <summary>
            byte 164
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._interpolatedCommandPosition">
            <summary>
            byte 168
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._reserved3">
            <summary>
            byte 172
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED._moduleFaults">
            <summary>
            byte 180
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.AxisFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.PhysicalAxisFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ModuleFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ConfigFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.AxisStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ServoActionStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.DriveEnableStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ShutdownStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ConfigUpdateInProcess">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.MotionStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.AccelStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.DecelStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.MoveStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.JogStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.GearingStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.HomingStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.StoppingStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.AxisHomedStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.PositionCamStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.TimeCamStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.PositionCamPendingStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.TimeCamPendingStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.GearingLockStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.PositionCamLockStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.MasterOffsetMoveStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.CoordinatedMotionStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.AxisEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.WatchEventArmedStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.WatchEventStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.RegEvent1ArmedStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.RegEvent1Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.RegEvent2ArmedStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.RegEvent2Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.HomeEventArmedStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.HomeEventStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.OutputCamStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.OutputCamPendingStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.OutputCamLockStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.OutputCamTransitionStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ActualPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.StrobeActualPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.StartActualPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.AverageVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ActualVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ActualAcceleration">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.WatchPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.Registration1Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.Registration2Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.Registration1Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.Registration2Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.InterpolationTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.InterpolatedActualPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.MasterOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.StrobeMasterOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.StartMasterOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.CommandPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.StrobeCommandPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.StartCommandPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.CommandVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.CommandAcceleration">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.InterpolatedCommandPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ModuleFaults">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.AXIS_CONSUMED.ControlSyncFault">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM">
            <summary>
            CAM pre-defined type (ok)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM._master">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM._slave">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM._segmentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM.Master">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM.Slave">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM.SegmentType">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE">
            <summary>
            CAM_PROFILE pre-defined type (ok, visible fields differ from RSLogix)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE._master">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE._slave">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE._segmentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE._c0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE._c1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE._c2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE._c3">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE.Master">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE.Slave">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE.SegmentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE.C0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE.C1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE.C2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CAM_PROFILE.C3">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_STATE">
            <summary>
            CPU_STATE system type (ok)
            Data Bytes: 5
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_STATE._cpuState">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_STATE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_STATE.OkLED">
            <summary>
            OkLED property
            Bits 4..7 of cpuState[3]
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_STATE.Fault">
            <summary>
            Fault property
            Bits 0..3 of cpuState[4]
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_STATE.Keyswitch">
            <summary>
            Keyswitch property
            Bits 4 and 5 of cpuState[4]
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_STATE.Mode">
            <summary>
            Mode property
            Bits 6 and 7 of cpuState[4]
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_STATE.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEVICE_STATUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEVICE_STATUS._deviceStatus">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEVICE_STATUS.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="deviceStatus"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEVICE_STATUS.Mode">
            <summary>
            Returns readable mode description
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEVICE_STATUS.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO">
            <summary>
            CPU_INFO system type (ok)
            Data Bytes: 100
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO._cpuInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.VendorID">
            <summary>
            VendorID
            Bytes 0,1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.ProductType">
            <summary>
            Product Type
            Bytes 2,3
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.ProductCode">
            <summary>
            Product Code
            Bytes 4,5
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.MajorFirmwareVersion">
            <summary>
            Major Firmware Version
            Byte 6
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.MinorFirmwareVersion">
            <summary>
            Minor Firmware Version
            Byte 7
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.DeviceStatus">
            <summary>
            Device Status
            Bytes 8,9
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.SerialNumberOfProcessor">
            <summary>
            Device Status
            Bytes 10-13
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.ProcessorID">
            <summary>
            Processor ID
            Bytes 10-??
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.CPU_INFO.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL">
            <summary>
            CONTROL pre-defined type (ok)
            RSLogix Bytes: 112
            Data Bytes: 52
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL._ctl">
            <summary>
            Control field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL._len">
            <summary>
            Length field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL._pos">
            <summary>
            Position field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.CTL">
            <summary>
            Control property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.LEN">
            <summary>
            Length property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.POS">
            <summary>
            Position property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.EN">
            <summary>
            Bit 31 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.EU">
            <summary>
            Bit 30 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.DN">
            <summary>
            Bit 29 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.EM">
            <summary>
            Bit 28 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.ER">
            <summary>
            Bit 27 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.UL">
            <summary>
            Bit 26 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.IN">
            <summary>
            Bit 25 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.FD">
            <summary>
            Bit 24 of ctl
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.CONTROL.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER">
            <summary>
            COUNTER pre-defined type (ok)
            RSLogix Bytes: 12
            Data Bytes: 12
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER._ctl">
            <summary>
            Control word
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER._pre">
            <summary>
            Preset value
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER._acc">
            <summary>
            Accumulated value
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.CTL">
            <summary>
            Control property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.PRE">
            <summary>
            PRE property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.ACC">
            <summary>
            ACC property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.CU">
            <summary>
            Bit 31 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.CD">
            <summary>
            Bit 5 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.DN">
            <summary>
            Bit 6 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.OV">
            <summary>
            Bit 7 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.UN">
            <summary>
            Bit 8 of ctl
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.COUNTER.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME">
            <summary>
            DEADTIME pre-defined type (ok)
            RSLogix Bytes: 112
            Data Bytes: 52
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._inFault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._deadtime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._gain">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._bias">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._timingMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._oversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._rTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._rTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._deltaT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME._reserved">
            <summary>
            pad bytes
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.InFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.Deadtime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.Gain">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.Bias">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.InstructFault">
            <summary>
            Status bit 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.InFaulted">
            <summary>
            Status bit 1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.DeadtimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.TimingModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.RTSMissed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.RTSTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.RTSTimeStampInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DEADTIME.DeltaTInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE">
            <summary>
            DERIVATIVE pre-defined type (ok)
            RSLogix Bytes: 88
            Data Bytes: 44
            Pad Bytes: 44
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._byPass">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._gain">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._timingMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._oversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._rTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._rTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._deltaT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.Gain">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.ByPass">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.InstructFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.TimingModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.RTSMissed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.RTSTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.RTSTimeStampInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DERIVATIVE.DeltaTInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE">
            <summary>
            DISCRETE_2STATE class (ok)
            RSLogix Bytes: 40
            Data Bytes: 16
            Pad Bytes: 24
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._progCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._oper0Req">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._oper1Req">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._state0Perm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._state1Perm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._fB0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._fB1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._handFB">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._faultAlarmLatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._faultAlmUnlatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._overrideOnInit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._overrideOnFault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._outReverse">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._overrideState">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._fB0State0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._fB0State1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._fB1State0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._fB1State1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._progProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._progOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._progOverrideReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._progHandReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._operProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._operOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._progValueReset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._faultTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._device0State">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._device1State">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._commandStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._faultAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._modeAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._progOper">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._override">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._hand">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.ProgCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.Oper0Req">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.Oper1Req">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.State0Perm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.State1Perm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FB0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FB1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.HandFB">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FaultTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FaultAlarmLatch">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FaultAlmUnlatch">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.OverrideOnInit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.OverrideOnFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.OutReverse">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.OverrideState">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FB0State0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FB0State1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FB1State0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FB1State1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.ProgProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.ProgOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.ProgOverrideReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.ProgHandReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.OperProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.OperOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.ProgValueReset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.Device0State">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.Device1State">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.CommandStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FaultAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.ModeAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.ProgOper">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.Override">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.Hand">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.FaultTimeInv">
            <summary>
            Status bit field 1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_2STATE.OperReqInv">
            <summary>
            Status bit field 2
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE">
            <summary>
            DISCRETE_3STATE class (ok)
            RSLogix Bytes: 48
            Data Bytes: 24
            Pad Bytes: 24
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._prog0Command">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._prog1Command">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._prog2Command">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._oper0Req">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._oper1Req">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._oper2Req">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._state0Perm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._state1Perm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._state2Perm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._handFB0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._handFB1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._handFB2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._faultAlarmLatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._faultAlmUnlatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._overrideOnInit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._overrideOnFault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out0State0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out0State1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out0State2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out1State0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out1State1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out1State2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out2State0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out2State1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out2State2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB0State0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB0State1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB0State2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB1State0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB1State1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB1State2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB2State0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB2State1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB2State2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB3State0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB3State1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._fB3State2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._progProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._progOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._progOverrideReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._progHandReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._operProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._operOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._progValueReset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._faultTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._overrideState">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._out2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._device0State">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._device1State">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._device2State">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._command0Status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._command1Status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._command2Status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._faultAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._modeAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._progOper">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._override">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._hand">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Prog0Command">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Prog1Command">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Prog2Command">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Oper0Req">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Oper1Req">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Oper2Req">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.State0Perm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.State1Perm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.State2Perm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB3">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.HandFB0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.HandFB1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.HandFB2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FaultTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FaultAlarmLatch">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FaultAlmUnlatch">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.OverrideOnInit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.OverrideOnFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out0State0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out0State1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out0State2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out1State0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out1State1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out1State2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out2State0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out2State1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out2State2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.OverrideState">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB0State0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB0State1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB0State2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB1State0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB1State1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB1State2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB2State0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB2State1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB2State2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB3State0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB3State1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FB3State2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.ProgProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.ProgOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.ProgOverrideReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.ProgHandReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.OperProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.OperOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.ProgValueReset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out0">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Out2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Device0State">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Device1State">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Device2State">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Command0Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Command1Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Command2Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FaultAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.ModeAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.ProgOper">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Override">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Hand">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.FaultTimeInv">
            <summary>
            Status bit field 1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.OverrideStateInv">
            <summary>
            Status bit field 2
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.ProgCommandInv">
            <summary>
            Status bit field 3
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.OperReqInv">
            <summary>
            Status bit field 4
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DISCRETE_3STATE.HandCommandInv">
            <summary>
            Status bit field 5
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET">
            <summary>
            DOMINANT_RESET class (ok)
            RSLogix Bytes: 12
            Data Bytes: 8
            Pad Bytes: 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._set">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._reserved1">
            <summary>
            These are needed to separate three bools starting at byte 0 from three bools starting at byte 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._reserved2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._reserved3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._outNot">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET.Set">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_RESET.OutNot">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET">
            <summary>
            DOMINANT_SET class (wip)
            RSLogix Bytes: 12
            Data Bytes: 8
            Pad Bytes: 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._set">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._reserved1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._reserved2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._reserved3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._outNot">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET.Set">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.DOMINANT_SET.OutNot">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS">
            <summary>
            FILTER_HIGH_PASS class (ok)
            RSLogix Bytes: 156
            Data Bytes: 48
            Pad Bytes: 108
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._initialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._wLead">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._order">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._timingMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._oversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._rtsTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._rtsTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._deltaT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.WLead">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.Order">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.WLeadInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.OrderInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.TimingModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.RTSMissed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.RTSTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.RTSTimeStampInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_HIGH_PASS.DeltaTInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS">
            <summary>
            FILTER_LOW_PASS class (ok)
            RSLogix Bytes: 156
            Data Bytes: 48
            Pad Bytes: 108
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._initialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._wLag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._order">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._timingMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._oversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._rtsTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._rtsTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._deltaT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.WLag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.Order">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.WLeadInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.OrderInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.TimingModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.RTSMissed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.RTSTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.RTSTimeStampInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_LOW_PASS.DeltaTInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH">
            <summary>
            FILTER_NOTCH class (ok)
            RSLogix Bytes: 184
            Data Bytes: 52
            Pad Bytes: 132
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._enableIn">
            <summary>
            0.0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._initialize">
            <summary>
            0.1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._in">
            <summary>
            4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._wNotch">
            <summary>
            8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._qFactor">
            <summary>
            12
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._order">
            <summary>
            16
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._timingMode">
            <summary>
            20
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._oversampleDT">
            <summary>
            24
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._rTSTime">
            <summary>
            28
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._rTSTimeStamp">
            <summary>
            32
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._enableOut">
            <summary>
            36.0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._out">
            <summary>
            40
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._deltaT">
            <summary>
            44
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._status">
            <summary>
            48
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.WNotch">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.QFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.Order">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.WNotchInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.QFactorInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.OrderInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.TimingModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.RTSMissed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.RTSTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.RTSTimeStampInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FILTER_NOTCH.DeltaTInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D">
            <summary>
            FLIP_FLOP_D class (ok)
            RSLogix Bytes: 12
            Data Bytes: 8
            Pad Bytes: 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._d">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._clear">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._clock">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._reserved1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._reserved2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._reserved3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._q">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._qNot">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D.D">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D.Clock">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D.Q">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_D.QNot">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK">
            <summary>
            FLIP_FLOP_JK class (ok)
            RSLogix Bytes: 12
            Data Bytes: 8
            Pad Bytes: 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._reserved1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._clear">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._clock">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._reserved2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._reserved3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._reserved4">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._q">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._qNot">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK.Clock">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK.Q">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FLIP_FLOP_JK.QNot">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR">
            <summary>
            FUNCTION_GENERATOR class (ok)
            RSLogix Bytes: 52
            Data Bytes: 28
            Pad Bytes: 24
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR._enableIn">
            <summary>
            0.0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR._select">
            <summary>
            0.1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR._in">
            <summary>
            4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR._xY1Size">
            <summary>
            8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR._xY2Size">
            <summary>
            12
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR._enableOut">
            <summary>
            16.0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR._out">
            <summary>
            20
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR._status">
            <summary>
            24
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.XY1Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.XY2Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.Select">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.XY1SizeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.XY2SizeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.FUNCTION_GENERATOR.XisOutofOrder">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT">
            <summary>
            HL_LIMIT class (ok)
            RSLogix Bytes: 36
            Data Bytes: 32
            Pad Bytes: 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._highLimit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._lowLimit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._selectLimit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._highAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._lowAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.HighLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.LowLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.SelectLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.HighAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.LowAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.LimitsInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.HL_LIMIT.SelectLimitInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR">
            <summary>
            INTEGRATOR class (ok)
            RSLogix Bytes: 88
            Data Bytes: 56
            Pad Bytes: 32
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._initialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._holdHigh">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._holdLow">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._initialValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._iGain">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._highLimit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._lowLimit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._timingMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._oversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._rTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._rTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._highAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._lowAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._deltaT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.InitialValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.IGain">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.HighLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.LowLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.HoldHigh">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.HoldLow">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.HighAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.LowAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.IGainInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.HighLowLimsInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.TimingModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.RTSMissed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.RTSTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.RTSTimeStampInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.INTEGRATOR.DeltaTInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG">
            <summary>
            LEAD_LAG class (ok)
            RSLogix Bytes: 132
            Data Bytes: 56
            Pad Bytes: 76
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._initialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._lead">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._lag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._gain">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._bias">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._timingMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._oversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._rTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._rTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._deltaT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.Lead">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.Lag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.Gain">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.Bias">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.LeadInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.LagInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.TimingModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.RTSMissed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.RTSTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.RTSTimeStampInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG.DeltaTInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER">
            <summary>
            LEAD_LAG_SEC_ORDER class (ok)
            RSLogix Bytes: 176
            Data Bytes: 60
            Pad Bytes: 116
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._initialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._wLead">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._wLag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._zetaLead">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._zetaLag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._order">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._timingMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._oversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._rTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._rTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._deltaT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.WLead">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.WLag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.ZetaLead">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.ZetaLag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.Order">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.WLeadInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.WLagInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.ZetaLeadInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.ZetaLagInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.OrderInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.WLagRatioInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.TimingModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.RTSMissed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.RTSTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.RTSTimeStampInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.LEAD_LAG_SEC_ORDER.DeltaTInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE">
            <summary>
            MAXIMUM_CAPTURE class (ok)
            RSLogix Bytes: 28
            Data Bytes: 20
            Pad Bytes: 8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE._resetValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE.ResetValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MAXIMUM_CAPTURE.Out">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE">
            <summary>
            MINIMUM_CAPTURE class (OK)
            RSLogix Bytes: 28
            Data Bytes: 20
            Pad Bytes: 8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE._resetValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE.ResetValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MINIMUM_CAPTURE.Out">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION">
            <summary>
            MOTION_INSTRUCTION class (ok)
            All properties set to read only.
            RSLogix Bytes: 16
            Data Bytes: 16
            Pad Bytes: 3
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION._flags">
            <summary>
            0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION._err">
            <summary>
            4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION._status">
            <summary>
            6
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION._state">
            <summary>
            7
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION._segment">
            <summary>
            8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION._exErr">
            <summary>
            12
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION._reserved1">
            <summary>
            13
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION._reserved2">
            <summary>
            14
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION._reserved3">
            <summary>
            15
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.FLAGS">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.EN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.DN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.ER">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.PC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.IP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.AC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.ACCEL">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.DECEL">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.ERR">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.STATUS">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.STATE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.SEGMENT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOTION_INSTRUCTION.EXERR">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE">
            <summary>
            MOVING_AVERAGE class (ok)
            RSLogix Bytes: 52
            Data Bytes: 24
            Pad Bytes: 28
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._inFault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._initialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._sampleEnable">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._useWeights">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._numberOfSamples">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.InFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.SampleEnable">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.NumberOfSamples">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.UseWeights">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.InstructFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.InFaulted">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_AVERAGE.NumberOfSampInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV">
            <summary>
            MOVING_STD_DEV class (ok)
            RSLogix Bytes: 60
            Data Bytes: 28
            Pad Bytes: 32
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._inFault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._initialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._sampleEnable">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._numberOfSamples">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._average">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.InFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.SampleEnable">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.NumberOfSamples">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.Average">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.InstructFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.InFaulted">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MOVING_STD_DEV.NumberOfSampInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER">
            <summary>
            MULTIPLEXER class (ok)
            RSLogix Bytes: 60
            Data Bytes: 52
            Pad Bytes: 8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._in1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._in2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._in3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._in4">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._in5">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._in6">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._in7">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._in8">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._selector">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.In1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.In2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.In3">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.In4">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.In5">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.In6">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.In7">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.In8">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.Selector">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.InstructFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.MULTIPLEXER.SelectorInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM">
            <summary>
            OUTPUT_CAM class (ok)
            RSLogix Bytes: 32
            Data Bytes: 32
            Pad Bytes: 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM._outputBit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM._latchType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM._unlatchType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM._left">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM._right">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM._duration">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM._enableType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM._enableBit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM.OutputBit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM.LatchType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM.UnlatchType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM.Duration">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM.EnableType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.OUTPUT_CAM.EnableBit">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID">
            <summary>
            PID pre-defined type (ok)
            RSLogix Bytes: 184
            Data Bytes: 32
            Pad Bytes: 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._ctl">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._sp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._kp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._ki">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._kd">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._bias">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._maxs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._mins">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._db">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._so">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._maxo">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._mino">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._upd">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._pv">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._err">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._pvh">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._pvl">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._dvp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._dvn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._pvdb">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._dvdb">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._maxi">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._mini">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._tie">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._maxcv">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._mincv">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._mintie">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._maxtie">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID._data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.CTL">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.EN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.CT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.CL">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.PVT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.DOE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.SWM">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.CA">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MO">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.PE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.NDF">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.NOBC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.NOZC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.INI">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.SPOR">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.OLL">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.OLH">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.EWD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.DVNA">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.DVPA">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.PVLA">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.PVHA">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.SP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.KP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.KI">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.KD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.BIAS">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MAXS">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MINS">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.DB">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.SO">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MAXO">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MINO">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.UPD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.PV">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.ERR">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.OUT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.PVH">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.PVL">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.DVP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.DVN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.PVDB">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.DVDB">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MAXI">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MINI">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.TIE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MAXCV">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MINCV">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MINTIE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.MAXTIE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.PID.DATA">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE">
            <summary>
            S_CURVE pre-defined type ()
            RSLogix Bytes: 120
            Data Bytes: 60
            Pad Bytes: 60
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._enableIn">
            <summary>
            Byte 0, Bit 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._initialize">
            <summary>
            Byte 0, Bit 1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._absAlgRamp">
            <summary>
            Byte 0, Bit 2
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._holdMode">
            <summary>
            Byte 0, Bit 3
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._holdEnable">
            <summary>
            Byte 0, Bit 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._in">
            <summary>
            Byte 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._initialValue">
            <summary>
            Byte 8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._accelRate">
            <summary>
            Byte 12
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._decelRate">
            <summary>
            Byte 16
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._jerkRate">
            <summary>
            Byte 20
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._timingMode">
            <summary>
            Byte 24
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._oversampleDT">
            <summary>
            Byte 28
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._rtsTime">
            <summary>
            Byte 32
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._rtsTimeStamp">
            <summary>
            Byte 36
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._enableOut">
            <summary>
            Byte 40, bit 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._s_Mode">
            <summary>
            Byte 40, bit 1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._out">
            <summary>
            Byte 44
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._rate">
            <summary>
            Byte 48
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._deltaT">
            <summary>
            Byte 52
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._status">
            <summary>
            Byte 56
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE._reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.AbsAlgRamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.HoldMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.HoldEnable">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.InitialValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.AccelRate">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.DecelRate">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.JerkRate">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.S_Mode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.Rate">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.AccelRateInv">
            <summary>
            Status bit field 1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.DecelRateInv">
            <summary>
            Status bit field 2
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.JerkRateInv">
            <summary>
            Status bit field 3
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.TimingModeInv">
            <summary>
            Status bit field 27
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.RTSMissed">
            <summary>
            Status bit field 28
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.RTSTimeInv">
            <summary>
            Status bit field 29
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.RTSTimeStampInv">
            <summary>
            Status bit field 30
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.S_CURVE.DeltaTInv">
            <summary>
            Status bit field 31
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE">
            <summary>
            SCALE pre-defined type (OK)
            RSLogix Bytes: 52
            Data Bytes: 36
            Pad Bytes: 16
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._enableIn">
            <summary>
            Byte 0, Bit 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._limiting">
            <summary>
            Byte 0, Bit 1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._in">
            <summary>
            Byte 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._inRawMax">
            <summary>
            Byte 8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._inRawMin">
            <summary>
            Byte 12
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._inEUMax">
            <summary>
            Byte 16
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._inEUMin">
            <summary>
            Byte 20
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._enableOut">
            <summary>
            Byte 24, Bit 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._maxAlarm">
            <summary>
            Byte 24, Bit 1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._minAlarm">
            <summary>
            Byte 24, Bit 2
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._out">
            <summary>
            Byte 28
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._status">
            <summary>
            Byte 32
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE._reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.Limiting">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.InRawMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.InRawMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.InEUMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.InEUMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.MaxAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.MinAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SCALE.InRawRangeInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER">
            <summary>
            SEC_ORDER_CONTROLLER pre-defined type (ok)
            RSLogix Bytes: 176
            Data Bytes: 68
            Pad Bytes: 108
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._enableIn">
            <summary>
            Byte 0, Bit 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._initialize">
            <summary>
            Byte 0, Bit 1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._holdHigh">
            <summary>
            Byte 0, Bit 2
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._holdLow">
            <summary>
            Byte 0, Bit 1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._in">
            <summary>
            Byte 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._initialValue">
            <summary>
            Byte 8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._gain">
            <summary>
            Byte 12
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._wLag">
            <summary>
            Byte 16
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._wLead">
            <summary>
            Byte 20
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._zetaLead">
            <summary>
            Byte 24
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._highLimit">
            <summary>
            Byte 28
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._lowLimit">
            <summary>
            Byte 32
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._timingMode">
            <summary>
            Byte 36
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._oversampleDT">
            <summary>
            Byte 40
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._rtsTime">
            <summary>
            Byte 44
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._rtsTimeStamp">
            <summary>
            Byte 48
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._enableOut">
            <summary>
            Byte 52, bit 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._highAlarm">
            <summary>
            Byte 52, bit 1
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._lowAlarm">
            <summary>
            Byte 52, bit 2
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._out">
            <summary>
            Byte 56
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._deltaT">
            <summary>
            Byte 60
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._status">
            <summary>
            Byte 64
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER._reserved">
            <summary>
            Byte 68-176
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.HoldHigh">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.HoldLow">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.InitialValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.Gain">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.WLag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.WLead">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.ZetaLead">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.HighLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.LowLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.EnableOut">
            <summary>
            Byte 52, bit 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.HighAlarm">
            <summary>
            Byte 52, bit 1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.LowAlarm">
            <summary>
            Byte 52, bit 2
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.InstructFault">
            <summary>
            Status bit field 0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.GainInv">
            <summary>
            Status bit field 1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.WLagInv">
            <summary>
            Status bit field 2
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.WLeadInv">
            <summary>
            Status bit field 3
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.ZetaLeadinv">
            <summary>
            Status bit field 4
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.HighLowLimsInv">
            <summary>
            Status bit field 5
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.TimingModeInv">
            <summary>
            Status bit field 27
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.RTSMissed">
            <summary>
            Status bit field 28
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.RTSTimeInv">
            <summary>
            Status bit field 29
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.RTSTimeStampInv">
            <summary>
            Status bit field 30
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SEC_ORDER_CONTROLLER.DeltaTInv">
            <summary>
            Status bit field 31
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT">
            <summary>
            SELECT pre-defined type (ok)
            RSLogix Bytes: 24
            Data Bytes: 20
            Pad Bytes: 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT._selectorIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT._in1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT._in2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT._reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT.In1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT.In2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT.SelectorIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT.Out">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE">
            <summary>
            SELECTABLE_NEGATE pre-defined type (ok)
            RSLogix Bytes: 20
            Data Bytes: 16
            Pad Bytes: 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE._negateEnable">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE._reserved">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE.NegateEnable">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTABLE_NEGATE.Out">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER">
            <summary>
            SELECTED_SUMMER pre-defined type (ok)
            RSLogix Bytes: 84
            Data Bytes: 80
            Pad Bytes: 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._select1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._select2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._select3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._select4">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._select5">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._select6">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._select7">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._select8">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._in1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._gain1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._in2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._gain2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._in3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._gain3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._in4">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._gain4">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._in5">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._gain5">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._in6">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._gain6">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._in7">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._gain7">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._in8">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._gain8">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._bias">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER._reserved">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Select1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Select2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Select3">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Select4">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Select5">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Select6">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Select7">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Select8">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.In1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Gain1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.In2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Gain2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.In3">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Gain3">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.In4">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Gain4">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.In5">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Gain5">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.In6">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Gain6">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.In7">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Gain7">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.In8">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Gain8">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Bias">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECTED_SUMMER.Out">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED">
            <summary>
            SELECT_ENHANCED pre-defined type (ok)
            RSLogix Bytes: 64
            Data Bytes: 60
            Pad Bytes: 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in1Fault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in2Fault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in3Fault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in4Fault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in5Fault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in6Fault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._progProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._progOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._progOverrideReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._operProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._operOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._progValueReset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in4">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in5">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._in6">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._insUsed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._selectorMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._progSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._operSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._progOper">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._override">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._selectedIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED._reserved">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In1Fault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In2Fault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In3Fault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In4Fault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In5Fault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In6Fault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.ProgProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.ProgOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.ProgOverrideReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.OperProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.OperOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.ProgValueReset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In3">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In4">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In5">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.In6">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.InsUsed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.SelectorMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.ProgSelector">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.OperSelector">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.ProgOper">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.Override">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.SelectedIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.InstructFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.InsFaulted">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.InsUsedInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.SelectorModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.ProgSelectorInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SELECT_ENHANCED.OperSelectorInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL">
            <summary>
            SERIAL_PORT_CONTROL pre-defined type (ok)
            RSLogix Bytes: 16
            Data Bytes: 16
            Pad Bytes: 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL._ctl">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL._len">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL._pos">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL._error">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.LEN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.POS">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.ERROR">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.CTL">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.EN">
            <summary>
            ctl bit 31
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.EU">
            <summary>
            ctl bit 30
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.DN">
            <summary>
            ctl bit 29
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.EM">
            <summary>
            ctl bit 28
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.ER">
            <summary>
            ctl bit 27
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.UL">
            <summary>
            ctl bit 26
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.RN">
            <summary>
            ctl bit 25
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SERIAL_PORT_CONTROL.FD">
            <summary>
            ctl bit 24
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION">
            <summary>
            SFC_ACTION pre-defined type (ok)
            RSLogix Bytes: 16
            Data Bytes: 16
            Pad Bytes: 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION._pre">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION._t">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION._count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION.STATUS">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION.A">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION.Q">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION.PauseTimer">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION.PRE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION.T">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_ACTION.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP">
            <summary>
            SFC_STEP pre-defined type (ok)
            RSLogix Bytes: 28
            Data Bytes: 28
            Pad Bytes: 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP._pre">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP._t">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP._tMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP._count">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP._limitLow">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP._limitHigh">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.X">
            <summary>
            status bit 31
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.FS">
            <summary>
            status bit 30
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.SA">
            <summary>
            status bit 29
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.LS">
            <summary>
            status bit 28
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.DN">
            <summary>
            status bit 27
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.OV">
            <summary>
            status bit 26
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.AlarmEn">
            <summary>
            status bit 25
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.AlarmLow">
            <summary>
            status bit 24
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.AlarmHigh">
            <summary>
            status bit 23
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.Reset">
            <summary>
            status bit 22
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.PauseTimer">
            <summary>
            status bit 21
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.PRE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.T">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.TMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.LimitLow">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STEP.LimitHigh">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STOP">
            <summary>
            SFC_STOP pre-defined type (ok)
            RSLogix Bytes: 20
            Data Bytes: 20
            Pad Bytes: 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STOP._status">
            <summary>
            byte 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STOP._reserved">
            <summary>
            byte 4
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STOP._count">
            <summary>
            byte 16
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STOP.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STOP.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STOP.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STOP.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SFC_STOP.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE">
            <summary>
            SPLIT_RANGE pre-defined type (ok)
            RSLogix Bytes: 108
            Data Bytes: 60
            Pad Bytes: 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._cycleTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._maxHeatIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._minHeatIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._maxCoolIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._minCoolIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._maxHeatTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._minHeatTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._maxCoolTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._minCoolTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._heatOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._coolOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._heatTimePercent">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._coolTimePercent">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE._reserved">
            <summary>
            reserved
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.CycleTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MaxHeatIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MinHeatIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MaxCoolIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MinCoolIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MaxHeatTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MinHeatTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MaxCoolTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MinCoolTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.HeatOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.CoolOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.HeatTimePercent">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.CoolTimePercent">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.InstructFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.CycleTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MaxHeatTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MinHeatTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MaxCoolTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.MinCoolTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.HeatSpanInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.SPLIT_RANGE.CoolSpanInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER">
            <summary>
            TIMER pre-defined type (ok)
            RSLogix Bytes: 12
            Data Bytes: 12
            Pad Bytes: 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER._ctl">
            <summary>
            Control word
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER._pre">
            <summary>
            Preset value
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER._acc">
            <summary>
            Accumulated value
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER.PRE">
            <summary>
            PRE property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER.ACC">
            <summary>
            ACC property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER.CTL">
            <summary>
            Control property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER.EN">
            <summary>
            Bit 31 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER.TT">
            <summary>
            Bit 30 of ctl
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER.DN">
            <summary>
            Bit 29 of ctl
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Data.TIMER.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER">
            <summary>
            TOTALIZER pre-defined type ()
            RSLogix Bytes: 116
            Data Bytes: 72
            Pad Bytes: 44
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._enableIn">
            <summary>
            byte 0
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._inFault">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._progProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._progOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._progStartReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._progStopReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._progResetReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._operProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._operOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._operStartReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._operStopReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._operResetReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._progValueReset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._timeBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._gain">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._resetValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._target">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._targetDev1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._targetDev2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._lowInCutoff">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._timingMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._oversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._rtsTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._rtsTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._progOper">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._runStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._progResetDone">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._targetFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._targetDev1Flag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._targetDev2Flag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._lowInCutoffFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._total">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._oldTotal">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._deltaT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._status">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.InFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.TimeBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.Gain">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.ResetValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.Target">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.TargetDev1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.TargetDev2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.LowInCutoff">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.ProgProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.ProgOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.ProgStartReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.ProgStopReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.ProgResetReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.OperProgReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.OperOperReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.OperStartReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.OperStopReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.OperResetReq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.ProgValueReset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.TimingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.OversampleDT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.RTSTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.RTSTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.Total">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.OldTotal">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.ProgOper">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.RunStop">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.ProgResetDone">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.TargetFlag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.TargetDev1Flag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.TargetDev2Flag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.LowInCutoffFlag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.InstructFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.InFaulted">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.TimeBaseInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.TimingModeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.RTSMissed">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.RTSTimeInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.RTSTimeStampInv">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.TOTALIZER.DeltaTInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM">
            <summary>
            UP_DOWN_ACCUM pre-defined type ()
            RSLogix Bytes: 32
            Data Bytes: 24
            Pad Bytes: 8
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM._enableIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM._initialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM._hold">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM._initialValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM._inPlus">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM._inMinus">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM._enableOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM._out">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM._reserved">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM.CRC">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM.EnableIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM.InitialValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM.InPlus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM.InMinus">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM.Hold">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM.EnableOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Data.UP_DOWN_ACCUM.Out">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.MessageType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.MessageType.CIP_DATA_TABLE_WRITE">
            <summary>
            CIP Data Table Write
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.MessageType.PCCC_PLC2_UNPROTECTED_WRITE">
            <summary>
            PCCC PLC2 Unprotected Write
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.sessionHandles">
            <summary>
            Session handle generator
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.isOpen">
            <summary>
            Determines whether listen port is open
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.idleTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.encoding">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.activeThreads">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.activeThreadsLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.connections">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.description">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.tag">
            <summary>
            Internal storage for Tag property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.listenPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.localAddress">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.connectionsLock">
            <summary>
            Transaction synchronization object
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.listener">
            <summary>
            The one and only TCP Listener
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.defaultIPAddress">
            <summary>
            Default IP Address
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.listenThread">
            <summary>
            The one and only listen thread. Listens for incoming connection requests.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.#ctor">
            <summary>
            Default constructor
            </summary>
            <exception cref="T:System.ComponentModel.LicenseException">Throws a LicenseException if a license is not found.</exception>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.IsOpen">
            <summary>
            Gets a flag indicating whether the listen port is open
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.IsDisposing">
            <summary>
            Gets a flag indicating whether the UnsolicitedMessage object instance has been disposed
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.Description">
            <summary>
            Gets or sets user-defined description associated with the component.
            This property is for information purposes only and does not affect operation.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.Tag">
            <summary>
            Gets or sets user-defined data associated with the component.
            This property is for information purposes only and does not affect operation.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.LocalAddress">
            <summary>
            Gets or sets the NIC address that will be used by this object instance.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.Connections">
            <summary>
            Gets the total number of open client connections
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.ListenPort">
            <summary>
            Allows you to specifiy an alternate port to listen on. 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.Initialise">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.OpenPort">
            <summary> 
            Open a TcpListener that listens on all network intefaces on port 44818. 
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">The exception that is thrown when a socket error occurs.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments provided to a method is not valid.</exception>
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread.</exception>
            <exception cref="T:System.InvalidOperationException">This thread was created by using a ThreadStart delegate instead of a ParameterizedThreadStart delegate.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.OpenPort(System.Net.IPAddress)">
            <summary>
            Open a TcpListener that listens on the specified network interface. 
            </summary>
            <param name="localAddress">IP Address of network interface card</param>
            <exception cref="T:System.Net.Sockets.SocketException">The exception that is thrown when a socket error occurs.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments provided to a method is not valid.</exception>
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread.</exception>
            <exception cref="T:System.InvalidOperationException">This thread was created by using a ThreadStart delegate instead of a ParameterizedThreadStart delegate.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.OpenPort(System.Net.IPEndPoint)">
            <summary> 
            Open a TcpListener that listens on the specified network interface and port. 
            </summary>
            <param name="localEndPoint">IP Address of network interface card and port to listen on.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The exception that is thrown when a socket error occurs.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments provided to a method is not valid.</exception>
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread.</exception>
            <exception cref="T:System.InvalidOperationException">This thread was created by using a ThreadStart delegate instead of a ParameterizedThreadStart delegate.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.ClosePort">
            <summary> 
            Closes all server connections and terminates threads 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.ReadStream(System.Net.Sockets.NetworkStream,System.Byte[]@)">
            <summary> Reads buffer.Length bytes from stream </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.InvokeDelegate(System.Delegate,System.Object[])">
            <summary> Checks for GUI application and uses invoke if necessary 
            If GUI application, invoke is used to avoid cross-threaded UI operations
            Else, handler delegate is called directly
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.FireReceived(AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs,System.Boolean)">
            <summary> Instructs item to call its Received event </summary>
            <param name="evArgs"></param>
            <param name="disposing"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.FireError(AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs,System.Boolean)">
            <summary> Instructs item to call its Error event </summary>
            <param name="evArgs"></param>
            <param name="disposing"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.EIPListenThread">
            <summary> Thread listens for incoming connections on EIP port </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.EIPClientHandlerThread(System.Object)">
            <summary> Thread handles incoming EIP messages on specified client connection</summary>
            <param name="client"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.ProcessPCCC(System.Byte[],AutomatedSolutions.Win.Comm.TcpServerConnection)">
            <summary>
            Processes embedded PCCC messages and fires associated Received or Error event
            </summary>
            <param name="pcccRequestRaw"></param>
            <param name="clientConnection"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.ProcessCipPcccObject(AutomatedSolutions.Win.Comm.TcpServerConnection,System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="clientConnection"></param>
            <param name="cipServiceCode"></param>
            <param name="pcccData"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.ReceivedEventHandler">
            <summary>
            Delegate for Received event
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.receivedEvent">
            <summary>
            Internal storage for event to indicate that a message has been received
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.Received">
            <summary>
            Event to indicate that a message has been received
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.ErrorEventHandler">
            <summary>
            Delegate for Error event
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.errorEvent">
            <summary>
            Internal storage for Event to indicate that an error has occurred
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.Error">
            <summary>
            Event to indicate that an error has occurred
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.ipSender">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.ipLocal">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.hwTagName">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.elements">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.hwTagType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.dotNetType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.structTypeHint">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.rawData">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.msgType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.IPSender">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.IPLocal">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.HwTagName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.Elements">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.HWTagType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.DotNetType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.StructTypeHint">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.MsgType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.#ctor(System.String,System.String,System.String,System.Int32,AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType,System.Type,System.String,System.DateTime,AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessage.MessageType,System.Byte[])">
            <summary>
            
            </summary>
            <param name="ipSender"></param>
            <param name="ipLocal"></param>
            <param name="hwTagName"></param>
            <param name="elements"></param>
            <param name="hwTagType"></param>
            <param name="dotNetType"></param>
            <param name="structTypeHint"></param>
            <param name="timestamp"></param>
            <param name="msgType"></param>
            <param name="rawData"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.GetStructuredValues``1(AutomatedSolutions.Win.Comm.AB.Logix.Data.StructEncoding{``0})">
            <summary>
            Use this overload to retrieve structured values only.
            Do not use this overload for atomic values.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.GetValues">
            <summary>
            Use this overload to retrieve atomic values only.
            Do not use this overload for structured values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.ReadOnlyCollection">
            <summary>
            ReadOnlyCollection class for collections of non-generic types.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.ReadOnlyCollection.#ctor(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="sourceList"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageReceivedEventArgs.ReadOnlyCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs.ipSender">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs.ipLocal">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs.timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs.message">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs.IPSender">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs.IPLocal">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs.Message">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.UnsolicitedMessageErrorEventArgs.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="ipSender"></param>
            <param name="ipLocal"></param>
            <param name="timestamp"></param>
            <param name="message"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel">
            <summary>
            Use this channel for Ethernet connectivity to A-B ControlLogix family 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.WSAEWOULDBLOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.WSAETIMEDOUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.defaultPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIP_CONNECTED_MESSAGE_MAX_SIZE">
            <summary>
            Actual CIP connected message limit is 500 bytes, but need to include CPF Item 2, sequence count field (Int16)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIP_CONNECTED_MESSAGE_MAX_SIZE_LARGE">
            <summary>
            Actual CIP large connected message limit is 4000 bytes, but need to include CPF Item 2, sequence count field (Int16)
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.Int32ToSingle">
            <summary>
            
            </summary>	
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.Int64ToDouble">
            <summary>
            
            </summary>	
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.notifyOnRemoteDisconnect">
            <summary>
            True = Throw exception on remote host disconnect
            False = Do not throw exception on remote host disconnect
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.routePath">
            <summary>
            stores last routepath to successfully execute a CIPForwardOpen
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.sequenceCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.tns">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.connectionID">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.connectionSN">
            <summary>
            Connection Serial Number
            Connection serial numbers must be unique across all application domains
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.waitHandles">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.connectDone">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.forwardOpened">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.lastMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.license">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.client">
            <summary>
            Reusable socket variable
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.sessionHandle">
            <summary>
            Holds session structCRC from register session
            </summary>		
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.registered">
            <summary>
            Indicates whether session has been registered.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.currentEndPoint">
            <summary>
            Temporary storage for endpoint when connected.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.NotifyOnRemoteDisconnect">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.Devices">
            <summary>
            Gets the DeviceCollection for this Channel.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CloseSocket">
            <summary>
            Closes socket and performs cleanup
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.RegisterSession(AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.UnRegisterSession">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.Read(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.Write(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal write method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.Message(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Performs the send and receive messaging for a Multi-Request Service
            </summary>
            <returns>
            EIP_Reply packet for a multi-request service.
            </returns>
            <param name="command"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.DebugOutputPacketBytes(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="message"></param>
            <param name="data"></param>
            <param name="length"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.DebugOutputPacketBytes(System.String,System.String,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="message"></param>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CreateConnectionPath(AutomatedSolutions.Win.Comm.AB.Logix.Device,System.Boolean,System.Byte[]@,System.Byte@)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <param name="messageRouterRequest"></param>
            <param name="connectionPath"></param>
            <param name="connectionPathWords"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPLargeForwardOpen(AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            CIP CM Forward Open Service
            Object: 0x06 (Connection Manager) 
            Service Code: 0x5b (Large Forward Open)
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPForwardOpen(AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            CIP CM Forward Open Service
            Object: 0x06 (Connection Manager) 
            Service Code: 0x54 (Forward Open)
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPForwardClose(AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPReadDataFragmentedService(System.Collections.ArrayList,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            Performs the send and receive messaging for a Read Data Fragmented Service
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPReadMultiRequestService(System.Collections.ArrayList,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.ByteArraysEqual(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPWriteDataFragmentedService(System.Collections.ArrayList,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            Performs the send and receive messaging for a fragmented write transaction
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPWriteMultiRequestService(System.Collections.ArrayList,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            Performs the send and receive messaging for a multi-request write transaction
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPGetTagInfo(AutomatedSolutions.Win.Comm.AB.Logix.Item,AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            For atomic types, returns data type
            For string, returns string handle and size in Item's structCRC and structSize fields.
            String size includes 2 byte handle, 4 byte length, and variable length string data 
            </summary>
            <param name="item"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPGetCPUState(AutomatedSolutions.Win.Comm.AB.Logix.Item,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.CIPGetCPUInfo(AutomatedSolutions.Win.Comm.AB.Logix.Item,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.AB.Logix.Device)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.WaitForMessage(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header@)">
            <summary>
            This overload waits for a header message, length is fixed at 24
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.WaitForMessage(System.Byte[]@,System.Int32)">
            <summary>
            Success: Returns number of bytes received.
            Failure: Returns -1 for socket error or 0 for timeout
            </summary>
            <param name="buffer"></param>
            <param name="bytesToReceive"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.Channel.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Net.DeviceCollectionEditor">
            <summary>
            Device Collection Editor Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Net.DeviceCollectionEditor.types">
            <summary>
            A Collection Editor for all public classes that inherit from Device
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.DeviceCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.DeviceCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Net.DeviceCollectionEditor.GetTypes">
            <summary>
            method to retrieve device types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.TagType">
            <summary>
            User-supplied hardware tag datatypes for A-B Logix family of Devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.AUTO">
            <summary>
            Indicates that auto-discovery should be used
            Since Logix tag names do not include type information, AUTO requires a transaction with the CPU
            AUTO is not supported for simulation mode for Logix devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.BOOL">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.SINT">
            <summary>
            8-bit signed byte
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.INT">
            <summary>
            16-bit integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.DINT">
            <summary>
            32-bit integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.REAL">
            <summary>
            32-bit floating point
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.STRING">
            <summary>
            String (standard 82 byte)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.LINT">
            <summary>
            64-bit integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.USINT">
            <summary>
            8-bit unsinged integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.UINT">
            <summary>
            16-bit unsigned integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.UDINT">
            <summary>
            32-bit unsigned integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.ULINT">
            <summary>
            64-bit unsinged integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.LREAL">
            <summary>
            64-bit floating point
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.TagType.DWORD">
            <summary>
            32-bit array (for BOOL ARRAYS)
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.SystemType">
            <summary>
            Internally-used hardware tag datatypes for A-B EIP/CIP Driver
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.AUTO">
            <summary>
            Indicates that auto-discovery should be used
            Since Logix tag names do not include type information, AUTO requires a transaction with the CPU
            AUTO is not supported for simulation mode for Logix devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.BOOL">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.SINT">
            <summary>
            8-bit signed byte
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.INT">
            <summary>
            16-bit integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.DINT">
            <summary>
            32-bit integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.REAL">
            <summary>
            32-bit floating point
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.STRING_STRUCT">
            <summary>
            String Structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.STRUCT">
            <summary>
            Structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.LINT">
            <summary>
            64-bit integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.USINT">
            <summary>
            8-bit unsinged integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.UINT">
            <summary>
            16-bit unsigned integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.UDINT">
            <summary>
            32-bit unsigned integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.ULINT">
            <summary>
            64-bit unsinged integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.LREAL">
            <summary>
            64-bit floating point
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.DWORD">
            <summary>
            32-bit array (for BOOL ARRAYS)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.SystemType.STRING">
            <summary>
            Native String
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Item">
            <summary>
            AB.Logix.Item class
            
            The Item class is used to represent data areas in hardware devices (PLCs, instrumentation, etc.).
            The Item class supports the ISserializable and IDisposable interfaces.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.#ctor(AutomatedSolutions.Win.Comm.AB.Logix.Item)">
            <summary>
            Copy constructor
            Use this constructor to create a new item and copy the contents from an existing item.
            </summary>
            <param name="item">Item to copy from.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.#ctor(System.String)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent a single tag on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the tag on the hardware device.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.#ctor(System.String,System.Int32)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent an array of contiguous atomic tags on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the starting tag on the hardware device.</param>
            <param name="elements">Number of elements. Enter the number of array elements.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.#ctor(System.String,System.Int32,AutomatedSolutions.Win.Comm.AB.Logix.TagType)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent an array of contiguous non-atomic tags on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the starting tag on the hardware device.</param>
            <param name="elements">Number of elements. Enter the number of array elements.</param>
            <param name="hwTagType">Hardware tag type. For atomic types use TagType.Auto; for string type use TagType.String.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Item._dataMapLock">
            <summary>
            DataMap lock object
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Item.hwTagType">
            <summary>
            internal storage for HWTagType property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Item.structCRC">
            <summary>
            For structs only, holds CRC returned from read operation
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Item.structSize">
            <summary>
            For structs only, holds struct size computed from read operation
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Item.autoDiscoverType">
            <summary>
            internal storage for hardware type property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Item.attribs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Item.dataMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Item.computedDataLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Item.structHash">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Item.HWTagName">
            <summary>
            Gets or sets the hardware tag name property, required. Indicates the hardware tag name to associate with this Item instance. This field should correspond to a valid tag/register in your hardware device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Item.HWTagType">
            <summary>
            Gets or sets the hardware tag type property. 
            HWTagType represents the data type for this item on the hardware device. 
            AUTO is the preferred setting when you are working with an atomic data types (SINT, INT, DINT, REAL, BOOL). 
            AUTO is not valid for STRING, TIMER, COUNTER, and CONTROL types.
            AUTO is not valid is the Device is set to use simulation mode.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Item.AutoDiscoverType">
            <summary>
            Gets or sets internal hardware type. The internal type differs from the HWTagType property in that the internal type represents either the auto-discovered hardware tag type or the user entered hardware tag type.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Item.IsBoolArray">
            <summary>
            Gets the IsBoolArray property, read-only. True means item is bool array type
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.ConfigureValuesArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.GetValueType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.GetSystemType">
            <summary>
            For internal use only. Returns the CLR system type that corresponds to the hardware data type for this item.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.GetStructuredValues(System.Object@)">
            <summary>
            Populates a class reference with structured data from the controller.
            </summary>
            <param name="o">
            Reference to object. 
            NOTE: Pass-by-reference parameters must be the same as the parameter type, so you must assign an instance of your UDT/PDT class to a variable of type Object to pass in as a parameter.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.CreateDataMap(System.Object,System.Int32@,System.Byte)">
            <summary>
            This method is FW Rev 27+ compatible only
            Creates initial data map from reflection of class/structure fields
            If myStruct is an array, data map is only created for first element and computedDataLength is length of one element.
            Can be used recursively
            </summary>
            <param name="myStruct"></param>
            <param name="byteOffset"></param>
            <param name="deviceFirmwareRevision"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.CopyDataToStruct(System.Object@,System.Int32@,System.Byte[])">
            <summary>
            This method is used to decode incoming reply packet data and populate .NET structure.
            Can be called recursively
            </summary>
            <param name="myStruct"></param>
            <param name="dataMapIndex"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.CopyStructToData(System.Object@,System.Int32@,System.Byte[]@)">
            <summary>
            Copies data from class/struct fields into byte[]
            Can be called recursively
            </summary>
            <param name="myStruct"></param>
            <param name="dataMapIndex"></param>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Item.DataFieldMapping">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.DataFieldMapping.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="srcType"></param>
            <param name="srcByte"></param>
            <param name="srcBit"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Item.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Group">
            <summary>
            The Group class is used to logically group items with common characteristics together.
            Characteristic currently include Active status and Update Rate.
            The Group class contains a Items collection which stores the group's Items.
            The Device class supports the ISserializable and IDisposable interfaces.
            </summary>
            <remarks>
            Because this class has a thread that needs to be started by the constructor,
            it was created with the ISerializable interface so the SerializationInfo constructor is called.
            This means that serialization of elements needs to be handled manually.
            The GetObjectData function gathers data from the fields to be serialized prior to disposal
            and then the data is passed back to the serialization constructor when the object is recreated.
            </remarks>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Group.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Group.#ctor(System.Boolean,System.Int32)">
            <summary>
            Assignment constructor
            </summary>
            <param name="active">
            Indicates whether Group is active (scanning data points on hardware device). Default = true.
            </param>
            <param name="updateRate">
            The rate in milliseconds at which data points on hardware device should be scanned. Default = 500 mSec.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            De-serialization Constructor 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Group.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Group.Items">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Group.Refresh">
            <summary>
            Performs a synchronous Read on all items in group. 
            To perform a SyncRead on selected items, use the Device's SyncRead method.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Group.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.ItemCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Items property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.ItemCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="ItemType"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.ItemCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.ItemCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Model">
            <summary>
            Models enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Model.ControlLogix">
            <summary>
            ControlLogix
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Model.Micro800">
            <summary>
            Micro 800 series
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.Device">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.#ctor(System.String)">
            <summary>
            RoutePath assignment constructor
            </summary>
            <param name="routePath">Communications route/path to a target hardware device. See Device.RoutePath in Help for complete details.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.#ctor(System.String,AutomatedSolutions.Win.Comm.AB.Logix.Model)">
            <summary>
            RoutePath and Model assignment constructor
            </summary>
            <param name="routePath">Communications route/path to a target hardware device. See Device.RoutePath in Help for complete details.</param>
            <param name="model">Controller model, refers to entire family</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            RoutePath and Timeout Assignment Constructor
            </summary>
            <param name="routePath">Communications route/path to a target hardware device. See Device.RoutePath in Help for complete details.</param>
            <param name="timeoutConnect">The connection timeout value in milliseconds. </param>
            <param name="timeoutTrans">The transaction timeout value in milliseconds. </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.#ctor(System.String,AutomatedSolutions.Win.Comm.AB.Logix.Model,System.Int32,System.Int32)">
            <summary>
            RoutePath, Model, and Timeout Assignment Constructor
            </summary>
            <param name="routePath">Communications route/path to a target hardware device. See Device.RoutePath in Help for complete details.</param>
            <param name="model">Controller model, refers to entire family</param>
            <param name="timeoutConnect">The connection timeout value in milliseconds. </param>
            <param name="timeoutTrans">The transaction timeout value in milliseconds. </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Device.supportsLargeForwardOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Device.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Logix.Device.model">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Device.RoutePath">
            <summary>
            Gets or sets the node address or routing path information that must be supplied to address the target device.
            <para>Format for Local CPU : [ENET/ENBT IP Address],[Backplane (always 1)],[CPU Slot]</para>
            <para>Format for Remote CPU: [ENET/ENBT IP Address],[Backplane (always 1)],[local CNB(R) or DHRIO slot],[local CNB(R) or DHRIO channel],[remote CNB(R) or DHRIO node (decimal)],[remote backplane (always 1)],[Remote CPU slot]</para>
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Device.Groups">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Device.Model">
            <summary>
            Gets or sets the processor model represented by this device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Device.SupportsLargeForwardOpen">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Logix.Device.MajorFirmwareRevision">
            <summary>
            Major Firmware Revision returned by $CPU_INFO
            0 = unknown and controller should be queried
            Any other value is valid revision
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.SimRead(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for read calls
            </summary>
            <param name="items"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.SimWrite(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for write calls
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.Device.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Logix.GroupCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Groups property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.GroupCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.GroupCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Logix.GroupCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID.ADDRESS_TYPE_NULL">
            <summary>
            Null Address
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID.ADDRESS_TYPE_CONNECTION_BASED">
            <summary>
            Connection-based Address
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID.ADDRESS_TYPE_SEQUENCED">
            <summary>
            	Sequenced Address
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID.ADDRESS_TYPE_0x0085">
            <summary>
            Rockwell specific
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID.DATA_TYPE_CONNECTED_TRANSPORT_PDU">
            <summary>
            Connected Transport Data
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID.DATA_TYPE_UNCONNECTED_MESSAGE">
            <summary>
            Unconnected Message Data
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID.DATA_TYPE_SOCKADDR_INFO_O_T">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID.DATA_TYPE_SOCKADDR_INFO_T_O">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID.DATA_TYPE_0x0091">
            <summary>
            Rockwell specific
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand">
            <summary> EIP encapsulation commands. Commented commands are not implemented. </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand.NOP">
            <summary>
            NOP
            </summary>
            <!--
            Volume 2: EtherNet/IP Adaptation of CIP, Chapter 2: Encapsulation Protocol
            2-4.1 NOP
            Either an originator or a target may send a NOP command. No reply shall be generated by this
            command. The data portion of the command shall be from 0 to 65511 bytes long. The receiver
            shall ignore any data that is contained in the message.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand.LIST_SERVICES">
            <summary>
            ListServices
            </summary>
            <!--
            Volume 2: EtherNet/IP Adaptation of CIP, Chapter 2: Encapsulation Protocol
            2-4.6 ListServices
            2-4.6.1 General
            The ListServices command shall determine which encapsulation service classes the target
            device supports.
            NOTE: Each service class has a unique type code, and an optional ASCII name.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand.REGISTER_SESSION">
            <summary>
            RegisterSession
            </summary>
            <!--
            Volume 2: EtherNet/IP Adaptation of CIP, Chapter 2: Encapsulation Protocol
            2-4.4 RegisterSession
            2-4.4.1 General
            An originator shall send a RegisterSession command to a target to initiate a session.
            NOTE: See section 2-5, for detailed information on establishing and maintaining a session.    
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand.UNREGISTER_SESSION">
            <summary>
            UnRegisterSession
            </summary>
            <!--
            Volume 2: EtherNet/IP Adaptation of CIP, Chapter 2: Encapsulation Protocol
            2-4.5 UnRegisterSession
            Either an originator or a target may send this command to terminate the session. The receiver
            shall initiate a close of the underlying TCP/IP connection when it receives this command. The
            session shall also be terminated when the transport connection between the originator and
            target is terminated. The receiver shall perform any other associated cleanup required on its
            end. There shall be no reply to this command.    
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand.SEND_RR_DATA">
             <summary>
             SendRRData
             </summary>
             <!--
             Volume 2: EtherNet/IP Adaptation of CIP, Chapter 2: Encapsulation Protocol
             2-4.7 SendRRData
             2-4.7.1 General
             A SendRRData command shall transfer an encapsulated request/reply packet between the
             originator and target, where the originator initiates the command. The actual request/reply
             packets shall be encapsulated in the data portion of the message and shall be the responsibility
             of the target and originator.
            
             NOTE: When used to encapsulate the CIP, the SendRRData request and response are used to
             send encapsulated UCMM messages (unconnected messages). See chapter 3 for more detail.    
             -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand.SEND_UNIT_DATA">
            <summary>
            2-4.8 SendUnitData
            </summary>
            <!--
            Volume 2: EtherNet/IP Adaptation of CIP, Chapter 2: Encapsulation Protocol
            2-4.8 SendUnitData
            The SendUnitData command shall send encapsulated connected messages. This command may be used when the encapsulated protocol has its own 
            underlying end-to-end transport mechanism. 
            A reply shall not be returned. The SendUnitData command may be sent by either end of the TCP connection.
            
            NOTE: When used to encapsulate the CIP, the SendUnitData command is used to send CIP connected data in both the O?T and T?O directions.  
            -->
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Status">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header">
            <summary> EIP Header class. *** This class should be moved into proper Encode / Decode namespace in a future version *** </summary>
            <!--
            This class should not be used for new projects!
            Instead, use EIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.#ctor">
            <summary>
            Default Constructor, this is filled in by the reply packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor, this is filled in by the reply packet
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.EIPCommand)">
            <summary>
            Assignment Constructor, used to build a command packet
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.EIPCommand,System.Int32)">
            <summary>
            Assignment Constructor, used to build a command packet
            </summary>
            <param name="command"></param>
            <param name="sessionHandle"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.EIPCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.EIPCommand.REGISTER_SESSION">
            <summary>
            Register Session
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.EIPCommand.UNREGISTER_SESSION">
            <summary>
            Unregister Session
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.EIPCommand.SEND_RR_DATA">
            <summary>
            Send RR Data 
            Use for unconnected messaging
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.EIPCommand.SEND_UNIT_DATA">
            <summary>
            Send Unit Data
            Use for connected messaging
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.Command">
            <summary>
            Command field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.DataLength">
            <summary>
            Length field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.SessionHandle">
            <summary>
            Session Handle Bytes
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.SenderInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld">
            <summary> EIP Command class. *** This class should be moved into proper Encode / Decode namespace in a future version *** </summary>
            <!--
            This class should not be used for new projects!
            Instead, use EIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.MAX_PACKET_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.EIP_SEND_RR_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.EIP_SEND_UNIT_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.cpfItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.cipItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header)">
            <summary>
            Assignment constructor
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.AddCIPCommand(AutomatedSolutions.Win.Comm.Protocol.Command,System.UInt16)">
            <summary>
            
            </summary>
            <param name="Command"></param>
            <param name="SequenceCount"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value and formats according to protocol byte order
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.Finish">
            <summary>
            Fills in the Header length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.StartCPFItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.StartCIPItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.EndCPFItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.EndCIPItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CommandOld.Add(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header)">
            <summary>
            
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command">
            <summary> EIP Command class. *** This class should be moved into proper Encode / Decode namespace in a future version *** </summary>
            <!--
            This class should not be used for new projects!
            Instead, use EIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.EIP_SEND_RR_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.EIP_SEND_UNIT_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.cpfItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.cipItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header)">
            <summary>
            Assignment constructor
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header,AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList,System.Byte[])">
            <summary>
            Assignment constructor for CIP unconnected messaging
            </summary>
            <param name="header"></param>
            <param name="command"></param>
            <param name="unconnectedMessageRoutePath"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header,AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList,System.UInt32,System.UInt16)">
            <summary>
            Assignment constructor for connected messaging
            </summary>
            <param name="header"></param>
            <param name="command"></param>
            <param name="connectionID"></param>
            <param name="sequenceCount"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header,System.UInt32)">
            <summary>
            New Assignment constructor for connected messaging
            This version calulates the maximum number of bytes available for a CIP query...
            based on the current size of the EIP packet. 
            Based on EIP max packet size of 540 bytes.
            </summary>
            <param name="header"></param>
            <param name="connectionID"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.AddCIPCommand(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList,System.UInt16)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="sequenceCount"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.Finish">
            <summary>
            Fills in the Header length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.StartCPFItem">
            <summary>
            StartCPFItem and EndCPFItem are used to compute the length field after all CPF data has been added.
            StartCPFITem records the starting index of the CPF item.
            EndCPFItem fills in length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.EndCPFItem">
            <summary>
            StartCPFItem and EndCPFItem are used to compute the length field after all CPF data has been added.
            StartCPFITem records the starting index of the CPF item.
            EndCPFItem fills in length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.StartCIPItem">
            <summary>
            StartCIPITem and EndCIPItem are used to compute the length field after all CIP data has been added.
            StartCIPITem records the starting index of the CIP item.
            EndCIPItem fills in length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.EndCIPItem">
            <summary>
            StartCIPITem and EndCIPItem are used to compute the length field after all CIP data has been added.
            StartCIPITem records the starting index of the CIP item.
            EndCIPItem fills in length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Command.Add(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header)">
            <summary>
            
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Reply">
            <summary> EIP Reply class. *** This class should be moved into proper Encode / Decode namespace in a future version *** </summary>
            <!--
            This class should not be used for new projects!
            Instead, use EIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Reply.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Reply.hdr">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Reply.cpf">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Reply.HDR">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Reply.CPF">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Reply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header)">
            <summary>
            
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.RegisterSessionReply">
            <summary> EIP Register Session Reply class. *** This class should be moved into proper Encode / Decode namespace in a future version *** </summary>
            <!--
            This class should not be used for new projects!
            Instead, use EIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.RegisterSessionReply.protocolVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.RegisterSessionReply.optionsFlags">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.RegisterSessionReply.ProtocolVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.RegisterSessionReply.OptionsFlags">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.RegisterSessionReply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header,System.Byte[])">
            <summary>
            
            </summary>
            <param name="header"></param>
            <param name="reply"></param>	
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendRRDataReply">
            <summary> EIP SendRRData Reply encoder class. *** This class should be moved into proper Encode / Decode namespace in a future version *** </summary>
            <!--
            This class should not be used for new projects!
            Instead, use EIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendRRDataReply.interfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendRRDataReply.timeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendRRDataReply.InterfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendRRDataReply.Timeout">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendRRDataReply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header,System.Byte[])">
            <summary>
            
            </summary>
            <param name="header"></param>
            <param name="reply"></param>	
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendUnitDataReply">
            <summary> EIP SendRRData Reply encoder class. *** This class should be moved into proper Encode / Decode namespace in a future version *** </summary>
            <!--
            This class should not be used for new projects!
            Instead, use EIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendUnitDataReply.interfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendUnitDataReply.timeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendUnitDataReply.InterfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendUnitDataReply.Timeout">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.SendUnitDataReply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Header,System.Byte[])">
            <summary>
            
            </summary>
            <param name="header"></param>
            <param name="reply"></param>	
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header">
            <summary> EIP Header decoder class. </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.#ctor">
            <summary>
            Default Constructor, this is filled in by the reply packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor, this is filled in by the reply packet
            </summary>
            <param name="header"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.Command">
            <summary>
            Command field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.DataLength">
            <summary>
            Length field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.SessionHandle">
            <summary>
            Session Handle Bytes
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.SenderContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Header.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest">
            <summary> EIP Send RR Data Request decoder class. </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.MAX_DATA_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.data">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.interfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.timeout">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.cpfItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.cpfItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="eipData"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.InterfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.Timeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendRRDataRequest.CPFItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest">
            <summary> EIP Send Unit Data Request decoder class. </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.MAX_DATA_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.data">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.interfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.timeout">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.cpfItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.cpfItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="eipData"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.InterfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.Timeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.CPFItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.SendUnitDataRequest.GetCPFItem(System.Int16)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem">
            <summary> CPF Item decoder class. </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem.typeID">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem.length">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem.#ctor(System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="typeID"></param>
            <param name="length"></param>
            <param name="cpfData"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem.TypeID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFConnectedAddressItem">
            <summary> CPF Connected Address Item decoder class, </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFConnectedAddressItem.cpfItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFConnectedAddressItem.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem)">
            <summary>
            
            </summary>
            <param name="cpfItem"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFConnectedAddressItem.ConnectionID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFConnectedAddressItem.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFConnectedDataItem">
            <summary> CPF Connected Data Item decoder class, </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFConnectedDataItem.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem)">
            <summary>
            
            </summary>
            <param name="cpfItem"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFConnectedDataItem.SequenceCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFConnectedDataItem.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFUnconnectedDataItem">
            <summary> CPF Unconnected Data Item decoder class, </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFUnconnectedDataItem.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFItem)">
            <summary>
            
            </summary>
            <param name="cpfItem"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.CPFUnconnectedDataItem.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply">
            <summary> CPF Reply decoder class. This class is used to decode raw data into CPF fields </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply.rawData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply.RawData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply.ItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply.AddressItemType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply.AddressItemLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply.DataItemType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply.DataItemLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Status">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPF">
            <summary> Common Packet Format Command Class. Use for encoding CPF commands </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPF.itemCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPF.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPF.AddItem(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem)">
            <summary>
            
            </summary>
            <param name="cpfItem"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPF.Finish">
            <summary>
            Finish method
            Finish does nothing for this class, included because Finish is a Command abstract method
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem">
            <summary> Common Packet Format Item Class. Use for encoding CPF items </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.CPFItemID)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="typeID"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Finish">
            <summary>
            Finish method
            Finish does nothing for this class, included because Finish is a Command abstract method
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Add(System.Byte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Add(System.SByte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Add(System.Byte[],System.Int32)">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Add(System.Byte[])">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Add(System.Int16)">
            <summary>
            This overload accepts a short value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Add(System.Int32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Add(System.UInt32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.CPFItem.Add(System.String)">
            <summary>
            This overload accepts a string value
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray">
            <summary> EIP Encapsulation Packet base class. DEPRECATED: Do not use for new classes. Replaced by LittleEndianPacketList</summary>
            <!--
            Same packet format used for commands and responses
             
            Volume 2: EtherNet/IP Adaptation of CIP
            Chapter 2: Encapsulation Protocol
            
            All encapsulation messages, sent via TCP or sent to UDP port 0xAF12, shall be composed of 
            a fixed-length header of 24 bytes followed by an optional data portion. 
            The total encapsulation message length (including header) shall be limited to 65535 bytes.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.MAX_PACKET_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.buffer">
            <summary>
            Internal storage for Data property, length is determined by value passed into constructor.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.count">
            <summary>
            Internal storage for Count property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.#ctor(System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Count">
            <summary>
            Contains the number of bytes in the command 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Clear">
            <summary>
            Clears the command buffer and resets count
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.SetAt(System.Int32,System.Byte)">
            <summary>
            Sets the array element at the specified index
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Data">
            <summary>
            Read-only property
            Returns a reference to the internal buffer.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Finish">
            <summary>
            Finish performs any end of packet updates to data, 
            such as updating a count in the middle of the packet based on total packet size,
            or, it might do nothing at all.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.Byte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.SByte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.Byte[],System.Int32)">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.Byte[])">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.Int16)">
            <summary>
            This overload accepts a short value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.Int32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.UInt32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.Int64)">
            <summary>
            This overload accepts a Int64 value
            For little-endian only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.UInt64)">
            <summary>
            This overload accepts a UInt64 value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray.Add(System.String)">
            <summary>
            This overload adds a string to buffer without manipulating byte order
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList">
            <summary> EIP Encapsulation Packet base class. </summary>
            <!--
            Same packet format used for commands and responses
             
            Volume 2: EtherNet/IP Adaptation of CIP
            Chapter 2: Encapsulation Protocol
            
            All encapsulation messages, sent via TCP or sent to UDP port 0xAF12, shall be composed of 
            a fixed-length header of 24 bytes followed by an optional data portion. 
            The total encapsulation message length (including header) shall be limited to 65535 bytes.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.buffer">
            <summary>
            Internal storage for Data property, length is determined by value passed into constructor.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.#ctor">
            <summary>
            Assignment Constructor
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Count">
            <summary>
            Contains the number of bytes in the command 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.GetBytes">
            <summary>
            Read-only property
            Returns a reference to the internal buffer.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Clear">
            <summary>
            Clears the command buffer and resets count
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.SetAt(System.Int32,System.Byte)">
            <summary>
            Sets the array element at the specified index
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Finish">
            <summary>
            Finish performs any end of packet updates to data, 
            such as updating a count in the middle of the packet based on total packet size,
            or, it might do nothing at all.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.Byte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.SByte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.Byte[],System.Int32)">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.Byte[])">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.Int16)">
            <summary>
            This overload accepts a short value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.Int32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.UInt32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.Int64)">
            <summary>
            This overload accepts a Int64 value
            For little-endian only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.UInt64)">
            <summary>
            This overload accepts a UInt64 value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketList.Add(System.String)">
            <summary>
            This overload adds a string to buffer without manipulating byte order
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header">
            <summary> Ethernet/IP Header Class </summary>
            <!--
            Although the header contains no explicit information to distinguish between a request and a reply, this information shall be determined in either of two ways:
            
            â¢ implicitly, by the command and the context in which the message is generated. (For example, in the case of the RegisterSession command, 
            the request is generated by an originator and the target generates the reply);
            
            â¢ explicitly, by the contents of an encapsulated protocol packet in the data part of the message.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand,System.UInt32)">
            <summary>
            Assignment Constructor, used to build a command packet
            </summary>
            <param name="command"></param>
            <param name="sessionHandle"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand)">
            <summary>
            Assignment Constructor, used to build a command packet
            </summary>
            <param name="command"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.Command">
            <summary>
            Command field
            </summary>
            <!--
            A device shall accept commands that it does not support without breaking the session or underlying TCP connection. 
            A status code indicating that an unsupported command was received shall be returned to the sender of the message.
            NOTE: The establishment of a session is defined in section 2-6. In short, a session makes a TCP/IP connection between originator and target 
            over which encapsulated commands may be sent. Since TCP/IP connections are modeled as a stream of bytes, 
            the encapsulation header is prepended to each encapsulated packet so that the receiving device can know where packets begin and end.    
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.Length">
            <summary>
            Length field
            </summary>
            <!--
            2-4.3 Length field
            The length field in the header shall specify the size in bytes of the data portion of the message.
            The field shall contain zero for messages that contain no data. The total length of a message shall be the sum of the number contained in the length field plus the 24-byte size of the encapsulation header.
            The entire encapsulation message shall be read from the TCP/IP connection even if the length is invalid for a particular command or exceeds the target's internal buffers.
            NOTE: Failure to read the entire message can result in losing track of the message boundaries in the TCP byte stream.
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.SessionHandle">
            <summary>
            Session Handle field
            </summary>
            <!--
            2-4.4 Session handle
            The Session Handle shall be generated by the target and returned to the originator in response to a RegisterSession request. 
            The originator shall insert it in all subsequent encapsulated packets (sent using the commands listed in Table 2-4.2) to that particular target. 
            In the case where the target initiates and sends a command to the originator, the target shall include this field in the request that it sends to the originator.
            NOTE: Some commands (i.e., NOP) do not require a session handle even if a session has been established. 
            Whether or not a particular command requires a session is noted in the description of that command.
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.Status">
            <summary>
            Status Field
            </summary>
            <!--
            /// 2-4.5 Status field
            The value in the Status field shall indicate whether or not the receiver was able to execute the requested encapsulation command. 
            A value of zero in a reply shall indicate successful execution of the command. 
            In all requests issued by the sender, the Status field shall contain zero. 
            If the receiver receives a request with a non-zero Status field, the request shall be ignored and no reply shall be generated
            NOTE: This field does not reflect errors that are generated by an encapsulated protocol packet contained within the data portion of the message. 
            For example, an error encountered during an end node's processing of a Set Attributes service would be returned via the CIP specified error mechanism 
            (see chapter 3 of the CIP Common specification).
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.SenderContext">
            <summary>
            SenderContext field
            </summary>
            <!--
            2-4.6 Sender context field 
            The sender of the command shall assign the value in the Sender Context field of the header. 
            The receiver shall return this value without modification in its reply. Commands with no expected reply may ignore this field.
            NOTE: The sender of a command may place any value in this field. It could be used to match requests with their associated replies.
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header.Options">
            <summary>
            
            </summary>
            <!--
            2-4.7 Options field
            The sender of an encapsulated packet shall set the options field to zero. 
            The receiver of an encapsulated packet shall verify that the option field is zero. 
            The receiver shall discard encapsulated packets with a non-zero option field.
            NOTE: The intent of this field is to provide bits that modify the meaning of the various encapsulation commands. 
            No particular use for this field has not yet been specified.
            -->
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request">
            <summary> Ethernet/IP Request Class. Use for encoding an Ethernet/IP request </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.EIP_SEND_RR_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.EIP_SEND_UNIT_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.cpfItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.cipItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header)">
            <summary>
            Assignment constructor
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header,AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray,System.Byte)">
            <summary>
            Assignment constructor for unconnected messaging
            </summary>
            <param name="header"></param>
            <param name="command"></param>
            <param name="processorSlot"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header,AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray,System.UInt32,System.UInt16)">
            <summary>
            Assignment constructor for connected messaging
            </summary>
            <param name="Header"></param>
            <param name="Command"></param>
            <param name="ConnectionID"></param>
            <param name="SequenceCount"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header,System.UInt32)">
            <summary>
            New Assignment constructor for connected messaging
            This version calulates the maximum number of bytes available for a CIP query...
            based on the current size of the EIP packet. 
            Based on EIP max packet size of 540 bytes.
            </summary>
            <param name="Header"></param>
            <param name="ConnectionID"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.AddCIPCommand(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray,System.UInt16)">
            <summary>
            
            </summary>
            <param name="Command"></param>
            <param name="SequenceCount"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value and formats according to protocol byte order
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.Finish">
            <summary>
            Fills in the Header length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.StartCPFItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.StartCIPItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.EndCPFItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.EndCIPItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Request.Add(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header)">
            <summary>
            
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Reply">
            <summary> Ethernet/IP Reply Class. Use for encoding an Ethernet/IP reply </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Reply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.EncapsulationCommand,System.Byte[])">
            <summary>
            
            </summary>
            <param name="encapsulationCommand"></param>
            <param name="senderContext"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Reply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header)">
            <summary>
            Assignment constructor
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply">
            <summary> EIP SendRRData Reply Encoder Class. Use for encoding an EIP SendRRData reply </summary>
            <!--
            2-4.7.3 Reply
            The SendRRData reply, as shown below, shall contain data in response to the SendRRData request. 
            The reply to the original encapsulated protocol request shall be contained in the data portion of the SendRRData reply
            Table 2-4.14 SendRRData Reply
            Structure      Field Name            Data Type       Field Value
            ============= ===================== =============== =====================
            Encapsulation header
                          Command               UINT            SendRRData (0x6F)
                          Length                UINT            length of data structure
                          Session handle        UDINT           handle returned by RegisterSession
                          Status                UDINT           0
                          Sender Context        ARRAY of octet  Preserved from the corresponding SendRRData request. Length of 8.
                          Options               UDINT           0
            Command specific data
                          Interface handle      UDINT           shall be 0 for CIP
                          Timeout               UINT            operation timeout (not used)
                          Encapsulated packet   ARRAY of octet  see Common Packet Format specification in section 2-6
                          
            The format of the data portion of the reply message shall be the same as that of the SendRRData request message.
            NOTE: Since the request and reply share a common format, the reply message contains a timeout field; however, it is not used.  
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.cpfItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.cipItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.#ctor(System.UInt32,System.Byte[],AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray)">
            <summary>
            SendRRData Success Reply
            </summary>
            <param name="sessionHandle"></param>
            <param name="senderContext"></param>
            <param name="cipReply"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value and formats according to protocol byte order
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.Finish">
            <summary>
            Fills in the Header length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.StartCPFItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.StartCIPItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.EndCPFItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.EndCIPItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendRRDataReply.Add(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header)">
            <summary>
            
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand">
            <summary> EIP SendUnitData Command Encoder Class. Use for encoding an EIP SendUnitData command </summary>
            <!--
            2-4.8 SendUnitData
            The SendUnitData command shall send encapsulated connected messages. This command may be used when the encapsulated protocol has its own underlying end-to-end transport mechanism. 
            A reply shall not be returned. The SendUnitData command may be sent by either end of the TCP connection.
            NOTE: When used to encapsulate the CIP, the SendUnitData command is used to send CIP connected data in both the O?T and T?O directions.  
            Table 2-4.15 SendUnitData Command
            Structure     Field Name            Data Type       Field Value
            ============= ===================== =============== =====================
            Encapsulation header
                          Command               UINT            SendUnitData (0x70)
                          Length                UINT            length of data structure
                          Session handle        UDINT           handle returned by RegisterSession
                          Status                UDINT           0
                          Sender Context        ARRAY of octet  Preserved from the corresponding SendRRData request. Length of 8.
                          Options               UDINT           0
            Command specific data
                          Interface handle      UDINT           shall be 0 for CIP
                          Timeout               UINT            shall be 0 (not used)
                          Encapsulated packet   ARRAY of octet  see Common Packet Format specification in section 2-6
                          
            Interface handle and Timeout shall be set to zero. The timeout field is not used since no reply is generated upon receipt of a SendUnitData command.
            NOTE: 
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.cpfItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.cipItemStartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.#ctor(System.UInt32,System.Byte[],System.UInt32,System.UInt16,AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.LittleEndianPacketArray)">
            <summary>
            SendRRData Success Command
            </summary>
            <param name="sessionHandle"></param>
            <param name="senderContext"></param>
            <param name="connectionID"></param>
            <param name="sequenceCount"></param>
            <param name="cipReply"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value and formats according to protocol byte order
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.Finish">
            <summary>
            Fills in the Header length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.StartCPFItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.StartCIPItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.EndCPFItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.EndCIPItem">
            <summary>
            Exclusive to CIP/EIP
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.SendUnitDataCommand.Add(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.Header)">
            <summary>
            
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.ListServicesReply">
            <summary> EIP List Services Reply decoder class. </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.ListServicesReply.#ctor(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.ListServicesReply.Finish">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.RegisterSessionReply">
            <summary> EIP Register Session Reply decoder class. </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.RegisterSessionReply.#ctor(System.Byte[],System.UInt32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode.RegisterSessionReply.Finish">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Command">
            <summary> Common Packet Format Command Class </summary>
            <!--
            This class should not be used for new projects!
            Instead, use CPF classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Command.itemCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Command.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Command.AddItem(AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item)">
            <summary>
            
            </summary>
            <param name="cpfItem"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Command.Finish">
            <summary>
            Finish method
            Finish does nothing for this class, included because Finish is a Command abstract method
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply">
            <summary> Common Packet Format Reply Class. This class is used to decode raw data into CPF fields </summary>
            <!--
            This class should not be used for new projects!
            Instead, use CPF classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply.rawData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply.RawData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply.ItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply.AddressItemType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply.AddressItemLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply.DataItemType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply.DataItemLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item">
            <summary> Common Packet Format Item Class </summary>
            <!--
            This class should not be used for new projects!
            Instead, use CPF classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Encode 
            -->
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID.ADDRESS_TYPE_NULL">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID.ADDRESS_TYPE_CONNECTION_BASED">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID.ADDRESS_TYPE_SEQUENCED">
            <summary>
            	
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID.ADDRESS_TYPE_0x0085">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID.DATA_TYPE_CONNECTED_TRANSPORT_PDU">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID.DATA_TYPE_UNCONNECTED_MESSAGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID.DATA_TYPE_SOCKADDR_INFO_O_T">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID.DATA_TYPE_SOCKADDR_INFO_T_O">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID.DATA_TYPE_0x0091">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.TypeID)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="typeID"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Finish">
            <summary>
            Finish method
            Finish does nothing for this class, included because Finish is a Command abstract method
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Add(System.Byte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Add(System.SByte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Add(System.Byte[],System.Int32)">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Add(System.Byte[])">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Add(System.Int16)">
            <summary>
            This overload accepts a short value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Add(System.Int32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Add(System.UInt32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Item.Add(System.String)">
            <summary>
            This overload accepts a string value
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionType.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionType.Multicast">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionType.PointToPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionType.Reserved">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Priority.LowPriority">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Priority.HighPriority">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Priority.Scheduled">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Priority.Urgent">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionSizeType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionSizeType.Fixed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionSizeType.Variable">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Packet">
            <summary>
            CIP Packet class just defines message maximum sizes
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType">
            <summary> CIP data type class contains data type conversion methods </summary>
            <!--
            Volume 1: Common Industrial Protocol (CIPâ¢) Specification
            Appendix C: Data Management
            C-6.1 Elementary Data Type Reporting
            SINT C2 Signed 8âbit integer value
            INT C3 Signed 16âbit integer value
            DINT C4 Signed 32âbit integer value
            LINT C5 Signed 64âbit integer value
            USINT C6 Unsigned 8âbit integer value
            UINT C7 Unsigned 16âbit integer value
            UDINT C8 Unsigned 32âbit integer value
            ULINT C9 Unsigned 64âbit integer value
            REAL CA 32âbit floating point value
            LREAL CB 64âbit floating point value
            STIME CC Synchronous time information
            DATE CD Date information
            TIME_OF_DAY CE Time of day
            DATE_AND_TIME CF Date and time of day
            STRING D0 character string (1 byte per character)
            BYTE D1 bit string - 8-bits
            WORD D2 bit string - 16-bits
            DWORD D3 bit string - 32-bits
            LWORD D4 bit string - 64-bits
            STRING2 D5 character string (2 bytes per character)
            FTIME D6 Duration (high resolution)
            LTIME D7 Duration (long)
            ITIME D8 Duration (short)
            STRINGN D9 character string (N bytes per character)
            SHORT_STRING DA character sting (1 byte per character, 1 byte length indicator)
            TIME DB Duration (milliseconds)
            EPATH DC CIP path segments
            ENGUNIT DD Engineering Units
            STRINGI DE International Character String
            -->
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType">
            <summary>
            User-supplied hardware tag datatypes for A-B Logix family of Devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.UNKNOWN">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.BOOL">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.SINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.INT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.DINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.LINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.USINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.UINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.UDINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.ULINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.REAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.LREAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.STRING">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.BYTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.WORD">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.DWORD">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.LWORD">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.TagType.STRUCTURE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.CipDataTypeCodeToDotNetType(System.UInt16)">
            <summary>
            Converts CIP data type code to CLR type.
            </summary>
            <param name="cipDataTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.CipDataTypeCodeToCipType(System.UInt16)">
            <summary>
            Converts CIP data type code to CIP type.
            </summary>
            <param name="cipDataTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.DataType.GetAtomicByteSize(System.UInt16)">
            <summary>
            Returns data size for a given CIP atomic data type code.
            </summary>
            <param name="cipDataTypeCode"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand">
            <summary> This class is used to create CIP Service Commands </summary>
            <!--
            This class should not be used for new projects!
            Instead, use CIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.item">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.#ctor(System.Int32)">
            <summary>
            Assignment Constructor
            Use this overload for $CPU_STATE and other Logix system CIP commands.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.#ctor(System.Int32,AutomatedSolutions.Win.Comm.AB.Logix.Item)">
            <summary>
            Assignment Constructor
            Use this overload for multi-request service commands
            </summary>
            <param name="cipMessageMaxSize"></param>
            <param name="item"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateCPUInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateCPUState">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateWriteDataFragmentedService(System.Int32@)">
            <summary>
            Use this overload for data types that can fit in a single service (command + ioi + data LTE MAX_COMMAND_SIZE)
            Use other overload for data types that need to fragment data within an element (big strings)
            </summary>
            
            <param name="elementOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateWriteDataFragmentedService(System.Byte[],System.Int32@)">
            <summary>
            Use this overload for data types that need to fragment data within an element (big strings)
            Use other overload for data types that can fit in a single service (command + ioi + data LTE MAX_COMMAND_SIZE)
            </summary>
            
            <param name="data"></param>
            <param name="byteOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateWriteDataService(System.Int32@)">
            <summary>
            
            </summary>
            
            <param name="offset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateWriteBitDataService(System.Int32@)">
            <summary>
            
            </summary>
            <param name="elementOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateReadDataFragmentedService(System.Int32)">
            <summary>
            This overload will handle most cases. 
            Use the other overload to handle single items that exceed maximum packet size
            </summary>
            
            <param name="offset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateReadDataFragmentedService(System.Int32,System.Int16)">
            <summary>
            This overload is intended to be used for GetStringInfo with elements parameter set to 1
            </summary>
            
            <param name="byteOffset"></param>
            <param name="elements"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateReadDataService">
            <summary>
            
            </summary>
            
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.CreateReadDataService(System.Int32@)">
            <summary>
            
            </summary>
            
            <param name="elementOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.Add(AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI)">
            <summary>
            Build a message by adding an array of bytes
            </summary>
            <param name="ioi"></param>		
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.Add(System.Object,System.Int32,System.Int32)">
            <summary>
            Adds the data from the values2write object
            </summary>
            <param name="vals"></param>
            <param name="elements"></param>
            <param name="offset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.Add(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Build a message by adding an array of bytes
            This method is used for strings only
            </summary>
            <param name="vals"></param>
            <param name="stringStructSize"></param>
            <param name="elements"></param>
            <param name="offset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.Finish">
            <summary>
            Finish method
            Finish does nothing for this class, included because Finish is a Command abstract method
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.GetWriteCommandSize(AutomatedSolutions.Win.Comm.AB.Logix.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.GetWriteFragmentedCommandSize(AutomatedSolutions.Win.Comm.AB.Logix.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.GetReadCommandSize(AutomatedSolutions.Win.Comm.AB.Logix.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.GetReplySize(AutomatedSolutions.Win.Comm.AB.Logix.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand.GetValuesSize(AutomatedSolutions.Win.Comm.AB.Logix.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand">
            <summary>
            This class creates a multi-request service packet and populates it with ServiceCommands
            </summary>
            <!--
            This class should not be used for new projects!
            Instead, use CIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.serviceBytes">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.services">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.#ctor(System.Int32)">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.GetMaxEmbeddedCommandSize(System.Int32)">
            <summary>
            
            </summary>
            <param name="cipMessageMaxSize"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.GetMaxEmbeddedReplySize(System.Int32)">
            <summary>
            
            </summary>
            <param name="cipMessageMaxSize"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.Add(AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ServiceCommand)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.Finish">
            <summary>
            Finish method, computes and stores service offsets and lengths
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.Clear">
            <summary>
            Clears the command buffer and resets count
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.ServiceCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.CipMessageMaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.CipEmbeddedCommandMaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.MultiRequestServiceCommand.CipEmbeddedReplyMaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply">
            <summary>
            Class represents CIP Reply
            </summary>
            <!--
            This class should not be used for new projects!
            Instead, use CIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="cpf"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.rawData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.RawData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.ServiceCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.Framing">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.ExtendedStatus">
            <summary>
            Returns extended status (if present)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.ServiceCount">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.AbbreviatedType">
            <summary>
            For single request
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.StructCRC">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.GetEmbeddedServiceOffset(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.GetEmbeddedServiceStatus(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.GetEmbeddedServiceExtendedStatus(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.GetEmbeddedServiceCode(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply.GetEmbeddedServiceAbbreviatedType(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser">
            <summary>
            Parses a CIP tag name to obtain dimension and array information
            </summary>
            <!--
            This class should not be used for new projects!
            Instead, use CIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.#ctor">
            <summary>
            Assignment Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.#ctor(System.String)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="hwTagName"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.Parse(System.String)">
            <summary>
            Parse method does all the work
            </summary>
            <param name="hwTagName"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser._systemTag">
            <summary>
            Indicates whether tag starts with '$'
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser._dims">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser._dim1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser._dim2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser._dim3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser._bit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser._isBitLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser._tagName">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.Found(System.Int32)">
            <summary>
            
            </summary>
            <param name="findResult"></param>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.IsSystemTag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.Dim3">
            <summary>
            returns dimensional information 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.Dim2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.Dim1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.Dims">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.Bit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.TagName">
            <summary>
            returns the hardware tag name only, no array subscripts 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.TagParser.IsBitLevel">
            <summary>
            Returns true if hw tag name is specified to bit level.
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI">
            <summary>
            IOI Class
            </summary>
            <!--
            This class should not be used for new projects!
            Instead, use CIP classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropraite namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI.ioi">
            <summary>
            Size defaults to 512 bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI.#ctor(AutomatedSolutions.Win.Comm.AB.Logix.Item)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI.#ctor(AutomatedSolutions.Win.Comm.AB.Logix.Item,System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI.Add(System.Byte)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI.Add(System.Char)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI.Build(AutomatedSolutions.Win.Comm.AB.Logix.Item,System.Int32)">
            <summary>
            Parses the item's hardware tag name and builds corresponding IOI
            Includes Request Path Size and Request path
            Does not include Data Type Reporting Value or anything after
            </summary>
            <param name="item">
            Item to construct IOI for
            </param>
            <param name="offset">
            Only applied to the last IOI segment
            </param>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI.Count">
            <summary>
            Count propertry
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.IOI.Item(System.Int32)">
            <summary>
            Indexer for accessing individual ioi bytes.
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentType">
            <summary>
            CIP segment types
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentType.Port">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentType.Logical">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentType.Network">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentType.Symbolic">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentType.Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentType.DataTypeConstructed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentType.DataTypeElementary">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentType.Reserved">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentLogicalType">
            <summary>
            CIP logical segment types
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.SegmentLogicalFormat">
            <summary>
            CIP logical segment formats
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Segment">
            <summary>
            CIP segment decoder base class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Segment.requestPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Segment.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="requestPath"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.PortSegment">
            <summary>
            CIP port Segment Decoder
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogicalSegment">
            <summary>
            CIP logical Segment Decoder
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogicalSegment.segments">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogicalSegment.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="requestPath"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogicalSegment.GetClassID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogicalSegment.GetInstanceID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogicalSegment.GetAttributeID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogicalSegment.GetMemberID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.DataSegmentSubType">
            <summary>
            CIP data segment sub-types
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.DataSegment">
            <summary>
            CIP data Segment Decoder
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.DataSegment.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="requestPath"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.DataSegment.GetSubType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.DataSegment.GetANSIExtendedSymbol">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.EPATH">
            <summary>
            CIP EPATH Decoder
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.EPATH.requestPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.EPATH.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="requestPath"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.EPATH.#ctor(System.Byte[],System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="requestPath"></param>
            <param name="offset"></param>
            <param name="pathSizeInWords"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.EPATH.Length">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.EPATH.GetSegmentType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.EPATH.GetSegment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Request">
            <summary>
            Contains static methods for decoding CIP request
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Request.ServiceCode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="cipRequest"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Request.GetEPATH(System.Byte[])">
            <summary>
            
            </summary>
            <param name="cipRequest"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Request.GetPcccRequest(System.Byte[])">
            <summary>
            
            </summary>
            <param name="cipRequest"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Request.GetCipRequest(System.Byte[])">
            <summary>
            
            </summary>
            <param name="cipRequest"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.PCCC_ExecutePCCCRequest">
            <summary>
            Contains static methods for decoding Execute PCCC Request
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.PCCC_ExecutePCCCRequest.GetLength(System.Byte[])">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.PCCC_ExecutePCCCRequest.GetVendor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest">
            <summary>
            Contains static methods for decoding Execute PCCC Request
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest.requestService">
            <summary>
            Forward Close Request fields
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor
            </summary>
            <param name="messageRequest"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest.RequestService">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest.RequestPathSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest.RequestPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest.TagTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest.TotalElementsToWrite">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest.StartAtThisOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagFramentedServiceRequest.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest">
            <summary>
            CIP Logix Write Tag Request decoder
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.requestService">
            <summary>
            Write Tag Request Service 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.requestPathSize">
            <summary>
            Request Path Size
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.requestPath">
            <summary>
            Request Path
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.tagTypeCode">
            <summary>
            Tag Type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.elementsToWrite">
            <summary>
            Number of Elements to Write
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.data">
            <summary>
            Data
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.structureHandle">
            <summary>
            Valid only when TagTypeCode == 0xA002 indicating structured data.
            Contains structure handle for structured data.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor
            </summary>
            <param name="messageRequest"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.RequestService">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.RequestPathSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.RequestPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.TagTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.TotalElementsToWrite">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.LogixWriteTagServiceRequest.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardOpenRequest">
            <summary>
            This class is used to decode a CIP Connection Manager Forward Open Request
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardOpenRequest.service">
            <summary>
            Forward Open Request fields
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardOpenRequest.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor
            </summary>
            <param name="cipRequest"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardOpenRequest.T2O_NetworkConnectionID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardOpenRequest.ConnectionSerialNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardOpenRequest.OriginatorVendorID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardOpenRequest.OriginatorSerialNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardOpenRequest.O2T_RPI">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardOpenRequest.T2O_RPI">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardCloseRequest">
            <summary>
            This class is used to decode a CIP Connection Manager Forward Open Request
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardCloseRequest.service">
            <summary>
            Forward Close Request fields
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardCloseRequest.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor
            </summary>
            <param name="cipRequest"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardCloseRequest.ConnectionSerialNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardCloseRequest.OriginatorVendorID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMForwardCloseRequest.OriginatorSerialNumber">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest">
            <summary>
            This class is used to decode a CIP Connection Manager Forward Open Request
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor
            </summary>
            <param name="cipRequest"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.MessageRequestService">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.MessageRequestPathSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.MessageRequestPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.MessageRequestData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.MessageRequestOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.MessageRequestDataOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.MessageRequestDataSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.RoutePathSizeInBytes">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.CMUnconnectedSendRequest.MessageRequest">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply">
            <summary>
            This class is used to decode a CIP reply
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.EIP.Decode.Reply)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="cpf"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.rawData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.RawData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.ServiceCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.Framing">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.ExtendedStatus">
            <summary>
            Returns extended status (if present)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.ServiceCount">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.AbbreviatedType">
            <summary>
            For single request
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.StructCRC">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.GetEmbeddedServiceOffset(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.GetEmbeddedServiceStatus(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.GetEmbeddedServiceExtendedStatus(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.GetEmbeddedServiceCode(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Decode.Reply.GetEmbeddedServiceAbbreviatedType(System.Int32)">
            <summary>
            For Multi-request service only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.Helper.CreateForwardOpenNetworkConnectionParams(System.Boolean,AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionType,AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Priority,AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionSizeType,System.UInt16)">
            <summary>
            Creates network connection parameters 16-bit word for CIP Forward Open
            This method hard codes max packet size of 504 bytes and fixed/variable = variable
            </summary>
            <param name="redundentOwner">For A-B Logix: false</param>
            <param name="connType">For A-B Logix: ConnectionType.PointToPoint</param>
            <param name="prior">For A-B Logix: Priority.LowPriority</param>
            <param name="connSizeType">For A-B Logix: ConnectionSizeType.Variable</param>
            <param name="connSize">For A-B Logix: max value 500</param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.Helper.CreateLargeForwardOpenNetworkConnectionParams(System.Boolean,AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionType,AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Priority,AutomatedSolutions.Win.Comm.AB.Protocol.CIP.ConnectionSizeType,System.UInt32)">
            <summary>
            Creates network connection parameters 32-bit word for CIP Large Forward Open
            This method accepts max packet size of 504 bytes and fixed/variable = variable
            </summary>
            <param name="redundentOwner">For A-B Logix: false</param>
            <param name="connType">For A-B Logix: ConnectionType.PointToPoint</param>
            <param name="prior">For A-B Logix: Priority.LowPriority</param>
            <param name="connSizeType">For A-B Logix: ConnectionSizeType.Variable</param>
            <param name="connSize">For A-B Logix: valid values 500 ~ 4000</param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponseConnectionParameters">
            <summary>
            Connection Parameters for Forward Open requests
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponseConnectionParameters.o2t_NetworkConnectionID">
            <summary>
            Network connection ID to be used for the local link, originator to target.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponseConnectionParameters.t2o_NetworkConnectionID">
            <summary>
            Network connection ID to be used for the local link, target to originator.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponseConnectionParameters.connectionSerialNumber">
            <summary>
            Unique 16-bit value selected by the connection manager at the originator
            of the connection.
            </summary>
            <remarks>
            The originator shall make sure that the 16-bit value is unique for the device. There
            shall be no other significance placed on the number by any other node in the connection
            path. The connection serial numbers shall be unique but do not have to be sequential.
            For example, an operator interface may have a large number of connections open at the
            same time, each with a unique number. The same values could be repeated at other
            operator interface stations. A possible implementation woudl be to have a connection
            list which points to the descriptor for each connection, and the connection serial
            number could be the index into the table.
            </remarks>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponseConnectionParameters.originatorVendorID">
            <summary>
            The vendor number shall be a unique number assigned to the various vendors of products.
            This is obtained from the ODVA.org website.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponseConnectionParameters.originatorSerialNumber">
            <summary>
            A 32 bit value that is assigned to the device at the time of manufacture.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponseConnectionParameters.o2t_API">
            <summary>
            Originator to target actual packet interval, in microseconds
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponseConnectionParameters.t2o_API">
            <summary>
            Target to originator actual packet interval, in microseconds
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponse.#ctor(System.Byte,System.Byte,System.UInt16[],AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponseConnectionParameters)">
            <summary>
            Connection Manager Forward Open Success Response
            Uses Message Router Response format
            Use for success responses
            </summary>
            <param name="cipStatus"></param>
            <param name="additionalStatusWords"></param>
            <param name="extendedStatus"></param>
            <param name="connectionParams"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponse.#ctor(System.Byte,System.Byte,System.UInt16[])">
            <summary>
            Connection Manager Forward Open Error Response
            Uses Message Router Response format
            Use for Error responses
            </summary>
            <param name="cipStatus"></param>
            <param name="additionalStatusWords"></param>
            <param name="extendedStatus"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardOpenResponse.Finish">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardCloseResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardCloseResponse.#ctor(System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            Connection Manager Forward Close Success Response
            Uses Message Router Response format
            Use for success responses only
            </summary>
            <param name="connectionSerialNumber"></param>
            <param name="originatorVendorID"></param>
            <param name="originatorSerialNumber"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.CMForwardCloseResponse.Finish">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.Response">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.Response.#ctor(System.Byte,System.Byte,System.Byte,System.UInt16[])">
            <summary>
            Generic CIP Response
            </summary>
            <param name="requestService"></param>
            <param name="cipStatus"></param>
            <param name="additionalStatusWords"></param>
            <param name="extendedStatus"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.Response.Finish">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser">
            <summary>
            Parses a CIP tag name to obtain dimension and array information
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.#ctor">
            <summary>
            Assignment Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.#ctor(System.String)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="hwTagName"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.Parse(System.String)">
            <summary>
            Parse method does all the work
            </summary>
            <param name="hwTagName"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.systemTag">
            <summary>
            Indicates whether tag starts with '$'
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.dims">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.dim1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.dim2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.dim3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.bit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.isBitLevel">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.Found(System.Int32)">
            <summary>
            
            </summary>
            <param name="findResult"></param>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.IsSystemTag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.Dim3">
            <summary>
            returns dimensional information 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.Dim2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.Dim1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.Dims">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.Bit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Encode.TagParser.IsBitLevel">
            <summary>
            Returns true if hw tag name is specified to bit level.
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.EncapsulationCommand">
            <summary>
            CSP commands
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.EncapsulationCommand.NOP">
            <summary>
            NOP
            </summary>
            <!--
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.EncapsulationCommand.REGISTER_SESSION">
            <summary>
            RegisterSession
            </summary>
            <!--
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.EncapsulationCommand.UNREGISTER_SESSION">
            <summary>
            UnRegisterSession
            </summary>
            <!--
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.EncapsulationCommand.SEND_PACKET">
            <summary>
            SEND_PACKET
            </summary>
            <!--
            -->
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketMode">
            <summary>
            CSP packet modes
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketMode.NOP">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketMode.Request">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketMode.Response">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketSubMode">
            <summary>
            CSP packet sub-modes
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketSubMode.NOP">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketSubMode.RegisterSession">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketSubMode.SendPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketSubMode.UnregisterSession">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header">
            <summary>
            A-B CSP Header Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.Commands">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.#ctor">
            <summary>
            Default Constructor, this is filled in by the reply packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.Commands)">
            <summary>
            Assignment Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.Commands,System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.Command">
            <summary>
            Command field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.DataLength">
            <summary>
            Length field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.SessionHandle">
            <summary>
            Session Handle Bytes
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.SenderInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Command">
            <summary>
            A-B CSP Command Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Command.MAX_PACKET_SIZE">
            <summary>
            Internal variables
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Command.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header)">
            <summary>
            Assignment constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Command.Finish">
            <summary>
            Fills in the Header length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Command.Add(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header)">
            <summary>
            
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Command.Add(AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command)">
            <summary>
            
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply">
            <summary>
            A-B CSP Reply Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Header,System.Byte[])">
            <summary>
            
            </summary>
            <param name="header"></param>
            <param name="reply"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.rawData">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.hdr">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.interfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.unknown1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.unknown2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.HDR">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.InterfaceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply.RawData">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header">
            <summary>
            CSP Header Decoder Class 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor, this is filled in by the reply packet
            </summary>
            <param name="header"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.Mode">
            <summary>
            Mode field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.SubMode">
            <summary>
            Mode field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.DataLength">
            <summary>
            Length field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.SessionHandle">
            <summary>
            Session Handle Bytes
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.SenderContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Decode.Header.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header">
            <summary>
            CSPv4 Header Class
            
            Although the header contains no explicit information to distinguish between a request and a reply, this information shall be determined in either of two ways:
            
            â¢ implicitly, by the command and the context in which the message is generated. (For example, in the case of the RegisterSession command, 
            the request is generated by an originator and the target generates the reply);
            
            â¢ explicitly, by the contents of an encapsulated protocol packet in the data part of the message.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketMode,AutomatedSolutions.Win.Comm.AB.Protocol.CSP.PacketSubMode,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="subMode"></param>
            <param name="sessionHandle"></param>
            <param name="status"></param>
            <param name="context"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.Mode">
            <summary>
            Mode field
            </summary>
            <!--
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.SubMode">
            <summary>
            SubMode field
            </summary>
            <!--
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.Length">
            <summary>
            Length field
            </summary>
            <!--
            2-4.3 Length field
            The length field in the header shall specify the size in bytes of the data portion of the message.
            The field shall contain zero for messages that contain no data. The total length of a message shall be the sum of the number contained in the length field plus the 24-byte size of the encapsulation header.
            The entire encapsulation message shall be read from the TCP/IP connection even if the length is invalid for a particular command or exceeds the target's internal buffers.
            NOTE: Failure to read the entire message can result in losing track of the message boundaries in the TCP byte stream.
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.SessionHandle">
            <summary>
            Session Handle field
            </summary>
            <!--
            2-4.4 Session handle
            The Session Handle shall be generated by the target and returned to the originator in response to a RegisterSession request. 
            The originator shall insert it in all subsequent encapsulated packets (sent using the commands listed in Table 2-4.2) to that particular target. 
            In the case where the target initiates and sends a command to the originator, the target shall include this field in the request that it sends to the originator.
            NOTE: Some commands (i.e., NOP) do not require a session handle even if a session has been established. 
            Whether or not a particular command requires a session is noted in the description of that command.
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.Status">
            <summary>
            Status Field
            </summary>
            <!--
            /// 2-4.5 Status field
            The value in the Status field shall indicate whether or not the receiver was able to execute the requested encapsulation command. 
            A value of zero in a reply shall indicate successful execution of the command. 
            In all requests issued by the sender, the Status field shall contain zero. 
            If the receiver receives a request with a non-zero Status field, the request shall be ignored and no reply shall be generated
            NOTE: This field does not reflect errors that are generated by an encapsulated protocol packet contained within the data portion of the message. 
            For example, an error encountered during an end node's processing of a Set Attributes service would be returned via the CIP specified error mechanism 
            (see chapter 3 of the CIP Common specification).
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.SenderContext">
            <summary>
            SenderContext field
            </summary>
            <!--
            2-4.6 Sender context field 
            The sender of the command shall assign the value in the Sender Context field of the header. 
            The receiver shall return this value without modification in its reply. Commands with no expected reply may ignore this field.
            NOTE: The sender of a command may place any value in this field. It could be used to match requests with their associated replies.
            -->
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.Header.Options">
            <summary>
            
            </summary>
            <!--
            2-4.7 Options field
            The sender of an encapsulated packet shall set the options field to zero. 
            The receiver of an encapsulated packet shall verify that the option field is zero. 
            The receiver shall discard encapsulated packets with a non-zero option field.
            NOTE: The intent of this field is to provide bits that modify the meaning of the various encapsulation commands. 
            No particular use for this field has not yet been specified.
            -->
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket">
            <summary>
            EIP Encapsulation Packet base class
            Same packet format used for commands and responses
             
            Volume 2: EtherNet/IP Adaptation of CIP
            Chapter 2: Encapsulation Protocol
            
            All encapsulation messages, sent via TCP or sent to UDP port 0xAF12, shall be composed of 
            a fixed-length header of 24 bytes followed by an optional data portion. 
            The total encapsulation message length (including header) shall be limited to 65535 bytes.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.MAX_PACKET_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.buffer">
            <summary>
            Internal storage for Data property, length is determined by value passed into constructor.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.count">
            <summary>
            Internal storage for Count property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.#ctor(System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Count">
            <summary>
            Contains the number of bytes in the command 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Clear">
            <summary>
            Clears the command buffer and resets count
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.SetAt(System.Int32,System.Byte)">
            <summary>
            Sets the array element at the specified index
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Data">
            <summary>
            Read-only property
            Returns a reference to the internal buffer.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Finish">
            <summary>
            Finish performs any end of packet updates to data, 
            such as updating a count in the middle of the packet based on total packet size,
            or, it might do nothing at all.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.Byte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.SByte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.Byte[],System.Int32)">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.Byte[])">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.Int16)">
            <summary>
            This overload accepts a short value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.Int32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.UInt32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.Int64)">
            <summary>
            This overload accepts a uint value
            For little-endian only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.UInt64)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.LittleEndianPacket.Add(System.String)">
            <summary>
            This overload adds a string to buffer without manipulating byte order
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.RegisterSessionReply">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.RegisterSessionReply.#ctor(System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.RegisterSessionReply.Finish">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.SendPacketReply">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.SendPacketReply.#ctor(System.UInt32,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Encode.SendPacketReply.Finish">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper.SLC500ElementSize(System.Byte)">
            <summary>
            
            </summary>
            <param name="fileTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper.SLC500FileTypeCodeToDotNetType(System.Byte)">
            <summary>
            Converts SLC500/MicroLogix file type code to CLR type.
            </summary>
            <param name="fileTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper.SLC500FileTypeCodeToPCCCFileType(System.Byte)">
            <summary>
            Converts SLC500 file type code to PCCC file type.
            </summary>
            <param name="fileTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper.SLC500ThreeAddressFields(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Converts three address fields to logical ASCII address
            </summary>
            <param name="fileNumber"></param>
            <param name="fileType"></param>
            <param name="elementNumber"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper.PLC5TypeIdToFileType(System.UInt16)">
            <summary>
            
            </summary>
            <param name="typeID"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper.PLC5TypeIdToPCCCFileType(System.UInt16)">
            <summary>
            Converts PLC Type ID from Type/Data parameter to PCCC file type.
            </summary>
            <param name="typeID"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper.PLC5DefaultFileNumberToFileType(System.UInt16)">
            <summary>
            Converts default file numbers to file type
            </summary>
            <param name="fileNumber"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper.FileTypeToDotNetType(System.String)">
            <summary>
            Converts A-B file type to CLR type.
            </summary>
            <param name="fileType"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Helper.PLC5FileTypeCodeToFileDescription(System.UInt16)">
            <summary>
            Converts A-B file type to CLR type.
            </summary>
            <param name="fileTypeCode"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command">
            <summary>
            PCCC Command Class
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.maxDataBytes">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.#ctor(System.Int32,AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.CommandType)">
            <summary>
            
            </summary>
            <param name="maxDataBytes"></param>
            <param name="commandType"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value and formats according to protocol byte order
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer)">
            <summary>
            
            </summary>
            <param name="timer"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter)">
            <summary>
            
            </summary>
            <param name="counter"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control)">
            <summary>
            
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.Add(System.Object,AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag,System.Int32,System.Int32)">
            <summary>
            Adds the data from the values2write object
            </summary>
            <param name="vals"></param>
            <param name="attribs"></param>
            <param name="elements"></param>
            <param name="offset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.Finish">
            <summary>
            Finish method
            Finish does nothing for this class, included because Finish is a Command abstract method
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.CreateProtectedTypedLogicalWriteBit(AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag,System.Int32,System.Int32,System.Boolean[],System.UInt16,System.Int32)">
            <summary>
            
            </summary>
            <param name="tp"></param>
            <param name="startBit"></param>
            <param name="bits"></param>
            <param name="values"></param>
            <param name="tns"></param>
            <param name="subElementOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.CreateProtectedTypedLogicalWrite(AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag,System.Object,System.UInt16,System.Int32@)">
            <summary>
            CreateProtectedTypedLogicalWrite
            </summary>
            <param name="tp"></param>
            <param name="values">
            Values array - First array value must correspond to starting element to write</param>
            <param name="tns">
            Transaction identifier</param>
            <param name="elementsWritten">
            This field allows for segmentation of larger requests into allowable packet sizes.
            An item can represent any combinaton of hardware tag name and quantity,
            however, the actual number of elements that can be written may be smaller than the requested amount.
            elementOffset value is used to indicate how many elements have been previously written...
            and is subtracted from Item.Elements to determine remaining number of element to write.
            If the transaction is successful, elementsWritten is updated to reflect number written</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.CreateProtectedTypedLogicalRead(System.String,System.Int32,System.UInt16)">
            <summary>
            
            </summary>
            <param name="hwTagName"></param>
            <param name="elements"></param>
            <param name="tns"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.CreatePLC5WriteBit(AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag,System.Int32,System.Int32,System.Boolean[],System.UInt16)">
            <summary>
            Writes up to 16 bits on a bit write operation.
            For greater than 15 bits, this method is used in combination with CreateTypedWrite
            This method should only be called when 
            </summary>
            <param name="tp"></param>
            <param name="startBit"></param>
            <param name="bitsToWrite"></param>
            <param name="values"></param>
            <param name="tns">Transaction ID</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.CreateTypedRead(System.String,System.Int32,System.UInt16)">
            <summary>
            
            </summary>
            <param name="hwTagName"></param>
            <param name="elements"></param>
            <param name="tns"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Command.CreateTypedWrite(AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag,System.Object,System.UInt16,System.Int32@)">
            <summary>
            
            </summary>
            <param name="hwTag"></param>
            <param name="values"></param>
            <param name="tns"></param>
            <param name="elementsWritten"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedCommand">
            <summary>
            
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedCommand.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer)">
            <summary>
            This overload is required because PLC5 stuffs some extra bytes in the timer data packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedCommand.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter)">
            <summary>
            This overload is required because PLC5 stuffs some extra bytes in the counter data packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedCommand.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control)">
            <summary>
            This overload is required because PLC5 stuffs some extra bytes in the control data packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedCommand.Add(System.String)">
            <summary>
            This overload accepts a string value
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalCommand">
            <summary>
            
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalCommand.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Data.Timer)">
            <summary>
            This overload is required because PLC5 stuffs some extra bytes in the timer data packet
            </summary>
            <param name="timer"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalCommand.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Data.Counter)">
            <summary>
            This overload is required because PLC5 stuffs some extra bytes in the counter data packet
            </summary>
            <param name="counter"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalCommand.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Data.Control)">
            <summary>
            This overload is required because PLC5 stuffs some extra bytes in the control data packet
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalCommand.Add(System.String)">
            <summary>
            This overload accepts a string value
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply">
            <summary>
            Class for decoding a basic reply packet
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply)">
            <summary>
            
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply)">
            <summary>
            
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply)">
            <summary>
            
            </summary>
            <param name="reply"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.rawData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.CMD">
            <summary>
            Read-only access to PCCC Command Field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.STS">
            <summary>
            Read-only access to PCCC Status field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.TNS">
            <summary>
            Read-only access to PCCC Transaction field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.EXTSTS">
            <summary>
            Read-only access to PCCC Extended Status, only available if STS = 0xf0
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.RawData">
            <summary>
            Read-only access to raw data
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Reply.GetData(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedReply">
            <summary>
            Typed Read reply decoder
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedReply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply)">
            <summary>
            
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedReply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply)">
            <summary>
            
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedReply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply)">
            <summary>
            
            </summary>
            <param name="reply"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedReply.dataStart">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.TypedReply.GetData(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData">
            <summary>
            Reply data decoder
            Abstract base class
            Accepts byte[] and returns typed data
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.#ctor(AutomatedSolutions.Win.Comm.AB.Legacy.Model,System.Byte[])">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="data"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.data">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.model">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetBool(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetByte(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetInt16(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetInt32(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetUInt16(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetUInt32(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetSingle(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetString(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetDatalogRecord">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetTimer(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetCounter(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ReplyData.GetControl(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalReply">
            <summary>
            Protected Typed Logical Read reply decoder
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalReply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CSP.Reply)">
            <summary>
            
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalReply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CIP.Reply)">
            <summary>
            
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalReply.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.CPF.Reply)">
            <summary>
            
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ProtectedTypedLogicalReply.GetData(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File">
            <summary>
            The File class implements a sorted list to store Items within a file
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File.file">
            <summary>
            File consists of file type ('N', 'ST', etc.) and file number
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File.Processed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File.items">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File.sorted">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File.io">
            <summary>
            Indicates whether file is Input or Output
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File.IO">
            <summary>
            Indicates whether file is Input or Output
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File.Items">
            <summary>
            Items property - gets items collection
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.File.Add(AutomatedSolutions.Win.Comm.AB.Legacy.Item)">
            <summary>
            Adds the item to the sorted list
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.ItemComparer">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.FileOptimizer">
            <summary>
            Accepts a list ot Items and optimizes for least number of transactions.
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.FileOptimizer.#ctor(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.FileOptimizer.#ctor(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.AB.Legacy.Item})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag">
             <summary>
             Storage for a PCCC hardware tag's component information.
             Parses a PCCC tag down to it's individual components and also reports element size.
             Has methods for manipulating Elements property
            
             Supports fully qualified PCCC tag name in one of the following formats:
            		SLC style IO Address: {O or I}:{Slot}.{int}/{Bit}
            		PLC5 style IO Address (octal): {O or I}:{Rack Number}{IO Group Number}/{Bit}
            		All Legacy: {File Type}{File Number}:{Element}.{SubElement}
            		All Legacy: {File Type}{File Number}:{Element}/{Bit}
            		All Legacy: {File Type}{File Number}:{Element}
            		All Legacy: {File Type}{File Number}
             </summary>
             <!--
             Starting at v3.6, this class should not be used for new projects!
             Instead, use PCCC classes in the following namespaces:
             * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
             * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
             If the equivalent class does not exist, this class...
             should be moved into the appropriate namespace.
             -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.#ctor(System.String)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="tagName"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.#ctor(AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag)">
            <summary>
            Copy Constructor
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.name">
            <summary>
            Unmodified tag name
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.file">
            <summary>
            File consists of file type ('N', 'ST', etc.) and file number
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.element">
            <summary>
            Element indicates starting element
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.subElement">
            <summary>
            Sub-element indicates sub-element of structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.bit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.elementLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.subElementLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.bitLevel">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.enumStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.Parse(System.String)">
            <summary>
            Performs majority of device independent parsing. 
            Parsing specific to devices is handled in other methods from this class.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.IncrementElement">
            <summary>
            Do not use for Item.Attribs.
            Can be used to manipulate a temporary TagParser. 
            Just increments elements field/property.
            Does not alter Name property, which represents original tag name.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.OffsetElement(System.Int16)">
            <summary>
            Do not use for Item.Attribs.
            Can be used to manipulate a temporary TagParser. 
            Adds val to elements field/property.
            Does not alter Name property, which represents original tag name.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.IncrementSubElement">
            <summary>
            Do not use for Item.Attribs.
            Can be used to manipulate a temporary TagParser. 
            Just increments elements field/property.
            Does not alter Name property, which represents original tag name.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.OffsetSubElement(System.Int16)">
            <summary>
            Do not use for Item.Attribs.
            Can be used to manipulate a temporary TagParser. 
            Adds val to elements field/property.
            Does not alter Name property, which represents original tag name.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.IsElementLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.IsSubElementLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.IsBitLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.File">
            <summary>
            File consists of file type ('N', 'ST', etc.) and file number
            File is used as key in transaction optimization hashtable.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.FileNumber">
            <summary>
            File Number
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.Element">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.SubElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.Bit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.FileType">
            <summary>
            Returns file type
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.SLCFileType">
            <summary>
            Returns SLC500 file type for use with Protected Typed Logical Read and Write functions.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.HWTagType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag.ByteSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.PLC5LogicalBinaryAddress">
            <summary>
            Converts PLC5 ascii address and element offset to PLC5 logical binary address 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.PLC5LogicalBinaryAddress.Convert(AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.HWTag,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="tp"></param>
            <param name="elementOffset"></param>
            <param name="writing"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.PLC5LogicalBinaryAddress.Convert(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="asciiAddress"></param>
            <param name="elementOffset"></param>
            <param name="writing"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.PLC5LogicalBinaryAddress.Convert(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="asciiAddress"></param>
            <param name="writing"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Address">
            <summary>
            
            </summary>
            <!--
            Starting at v3.6, this class should not be used for new projects!
            Instead, use PCCC classes in the following namespaces:
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode
            * AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode 
            If the equivalent class does not exist, this class...
            should be moved into the appropriate namespace.
            -->
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Address.Create(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a HWTagName string from component parts
            </summary>
            <param name="fileType"></param>
            <param name="fileNumber"></param>
            <param name="element"></param>
            <param name="subElement"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType">
            <summary>
            PCCC data type class contains data type conversion methods
            </summary>
            <!--
            -->
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType">
            <summary>
            File types for A-B legacy devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.UNKNOWN">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.STATUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.TIMER">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.COUNTER">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.CONTROL">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.INTEGER">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.FLOAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.STRING">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.ASCII">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.BCD">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.DataType.FileType.LONG">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode.Reply.reply">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode.Reply.#ctor(System.Byte,System.Byte,System.UInt16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="cmd"></param>
            <param name="sts"></param>
            <param name="tns"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Encode.Reply.GetPacket">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress">
            <summary>
            Decoder for PLC5 Logical Binary Address
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.fileNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.fileNumberSpecified">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.elementNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.elementNumberSpecified">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.subElementNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.subElementNumberSpecified">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.index">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="lba"></param>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.FileNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.ElementNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.SubElementNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.FileNumberSpecified">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.ElementNumberSpecified">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5LogicalBinaryAddress.SubElementNumberSpecified">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5TypeDataParameter">
            <summary>
            Decoder for PLC5 Type/Data Parameter
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5TypeDataParameter.typeID">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5TypeDataParameter.dataSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5TypeDataParameter.index">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5TypeDataParameter.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="tdpData"></param>
            <param name="offset"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5TypeDataParameter.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5TypeDataParameter.TypeID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.PLC5TypeDataParameter.DataSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.Command">
            <summary>
            PCCC command decoder 
            This class only implements static methods to parse fixed PCCC command fields
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.Command.GetCMD(System.Byte[])">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.Command.GetSTS(System.Byte[])">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.Command.GetTNS(System.Byte[])">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.Command.GetFNC(System.Byte[])">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.UnprotectedWriteCommand">
            <summary>
            PCCC Unprotected Write command decoder
            CMD 0x08
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.UnprotectedWriteCommand.pcccCommand">
            <summary>
            Temporary storage for PCCC Unprotected Write command
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.UnprotectedWriteCommand.addr">
            <summary>
            PCCC Unprotected Write command address field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.UnprotectedWriteCommand.data">
            <summary>
            PCCC Unprotected Write command data field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.UnprotectedWriteCommand.#ctor(System.Byte[])">
            <summary>
            Assignment constructor
            </summary>
            <param name="pcccCommand"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.UnprotectedWriteCommand.Addr">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.UnprotectedWriteCommand.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand">
            <summary>
            PCCC Protected Typed Logical Write Command decoder
            CMD 0x0f, FNC 0xaa
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.pcccCommand">
            <summary>
            Temporary storage for PCCC Unprotected Write command
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.byteSize">
            <summary>
            Byte Size field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.fileNumber">
            <summary>
            File Number field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.fileType">
            <summary>
            File Type field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.element">
            <summary>
            Element field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.subElement">
            <summary>
            Sub-element field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.data">
            <summary>
            Data field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.#ctor(System.Byte[])">
            <summary>
            Assignment constructor
            </summary>
            <param name="pcccCommand"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.ByteSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.FileNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.FileType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.Element">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.SubElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.ProtectedTypedLogicalWriteCommand.GetAddress">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand">
            <summary>
            PCCC Typed Write Command decoder
            CMD 0x0f, FNC 0x67
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand.pcccCommand">
            <summary>
            Temporary storage for PCCC command
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand.packetOffset">
            <summary>
            Packet Offset field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand.totalTrans">
            <summary>
            Total Trans field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand.data">
            <summary>
            Data field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand.#ctor(System.Byte[])">
            <summary>
            Assignment constructor
            </summary>
            <param name="pcccCommand"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand.PacketOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand.TotalTrans">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.AB.Protocol.PCCC.Decode.TypedWriteCommand.GetAddress">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel">
            <summary>
            Use this channel type for Siemens S7 Ethernet connectivity 
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.int2float">
            <summary>
            
            </summary>	
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.sequenceCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.license">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.client">
            <summary>
            Reusable socket variable
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.channelLock">
            <summary>
            Prevent simultaneous channel transactions
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.Devices">
            <summary>
            Gets the DeviceCollection containing devices for this Channel.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.ReadOptimized(AutomatedSolutions.Win.Comm.Device,System.Collections.IList,System.String,System.Int32,AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Reads a block of data
            1. Read starts at startRegister
            2. Quantity is based on number of elements requested. 
            3. Raw data is parsed, formatted, and then saved in Item.Values arrays
            </summary>
            <param name="device">Device to read from</param>
            <param name="items">IList of Items</param>
            <param name="startRegister">Starting register</param>
            <param name="bytesToRead">Number of bytes to read</param>
            <param name="results">Results array, one result for each item</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.ReadSingle(AutomatedSolutions.Win.Comm.Device,AutomatedSolutions.Win.Comm.SI.S7.Item,AutomatedSolutions.Win.Comm.Result@)">
            <summary>
            Reads a block of data
            1. Read starts at startRegister
            2. Quantity is based on number of elements requested. 
            3. Raw data is parsed, formatted, and then saved in Item.Values arrays
            </summary>
            <param name="device">Device to read from</param>
            <param name="item">Item to read</param>
            <param name="result">Transaction result</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.ParseRoutePath(System.String,System.String@,System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="ipAddress"></param>
            <param name="srcTSAP"></param>
            <param name="dstTSAP"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.Read(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.WriteItem(AutomatedSolutions.Win.Comm.SI.S7.Device,AutomatedSolutions.Win.Comm.SI.S7.Item,AutomatedSolutions.Win.Comm.Result@)">
            <summary>
            Writes a block of data
            </summary>
            <param name="device">Device reference</param>
            <param name="item">Item to write</param>
            <param name="result">Result of write operation</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.Write(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal write method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.Channel.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Net.DeviceCollectionEditor">
            <summary>
            Siemens S7 Device Collection Editor Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Net.DeviceCollectionEditor.types">
            <summary>
            A Collection Editor for all public classes that inherit from Device
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.DeviceCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.DeviceCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Net.DeviceCollectionEditor.GetTypes">
            <summary>
            method to retrieve device types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.DataFieldMapping">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.DataFieldMapping.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="srcType"></param>
            <param name="srcByte"></param>
            <param name="srcBit"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.PDT">
            <summary>
            Abstract base class for pre-defined types (PDT)
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.PDT.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME">
            <summary>
            The contents of an operand of the data type TIME is interpreted as milliseconds.
            The representation contains information for days (d), hours (h), minutes (m), seconds (s) and milliseconds (ms).
            Range: T#-24d20h31m23s648ms to T#+24d20h31m23s647ms
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME._mSec">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME.TimeString">
            <summary>
            Gets or sets time in format d.h:m:s.ms
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME.GetTimeString(System.Int32)">
            <summary>
            
            </summary>
            <param name="mSec"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME.GetMilliseconds(System.String)">
            <summary>
            
            </summary>
            <param name="iecTimeString"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME_OF_DAY">
            <summary>
            The data type TOD (TIME_OF_DAY) occupies a double word and saves the number of 
            milliseconds since the beginning of the day (midnight) as an unsigned 32-bit integer.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME_OF_DAY._mSec">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME_OF_DAY.TimeString">
            <summary>
            Gets or sets time in format d.h:m:s.ms
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME_OF_DAY.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME_OF_DAY.GetTimeString(System.UInt32)">
            <summary>
            
            </summary>
            <param name="mSec"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.TIME_OF_DAY.GetMilliseconds(System.String)">
            <summary>
            Gets milliseconds since midnight
            </summary>
            <param name="iecTimeString"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.DATE">
            <summary>
            The DATE data type saves the date as an unsigned integer. 
            The representation contains the year, the month, and the day.
            The contents of an operand of DATE data type corresponds in hexadecimal format to the number of day since 01-01-1990 (16#0000).
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DATE._days">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DATE.DateString">
            <summary>
            Gets or sets the number of days since 1990-01-01 in 'yyyy-MM-dd' format.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.DATE.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.DATE.GetDateString(System.UInt16)">
            <summary>
            Converts number of days since 1990-1-1 into a date string in format 'yyyy-MM-dd'
            </summary>
            <param name="days">Number of days since 1990-01-01. Valid range is 0 to 65378.</param>
            <returns>
            Date string in format "yyyy-MM-dd"
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.DATE.GetDays(System.String)">
            <summary>
            Converts a date string in format 'yyyy-MM-dd' into number of days since 1990-1-1
            </summary>
            <param name="dateString">Date string in format 'yyyy-MM-dd'. Valid range is 1990-01-01 to 2168-12-31</param>
            <returns>Number of days since 1990-1-1</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.DATE.ToString">
            <summary>
            Returns date string in format "yyyy-MM-dd"
            </summary>
            <returns>
            Date string in format "yyyy-MM-dd"
            </returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL">
            <summary>
            DTL structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL._year">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL._month">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL._day">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL._weekday">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL._hour">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL._minute">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL._second">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL._nanosecond">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL.Year">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL.Month">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL.Day">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL.Weekday">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL.Second">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL.Nanosecond">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.DTL.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.DT">
            <summary>
            DATE_AND_TIME structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DT._year">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DT._month">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DT._day">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DT._hour">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DT._minute">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DT._second">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DT._millisecondHi">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.DT._millisecondLoPlusDOW">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DT.Year">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DT.Month">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DT.Day">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DT.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DT.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DT.Second">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DT.Millisecond">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.DT.DayOfWeek">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.DT.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT">
            <summary>
            ERROR_STRUCT structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._error_id">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._flags">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._reaction">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._block_type">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._pad_0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._code_block_number">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._address">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._mode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._pad_1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._operand_number">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._pointer_number_location">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._slot_number_scope">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._area">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._pad_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._db_number">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT._offset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.ERROR_ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.FLAGS">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.REACTION">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.BLOCK_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.CODE_BLOCK_NUMBER">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.ADDRESS">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.MODE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.OPERAND_NUMBER">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.POINTER_NUMBER_LOCATION">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.SLOT_NUMBER_SCOPE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.AREA">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.DB_NUMBER">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.OFFSET">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.ERROR_STRUCT.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.TIMER">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.TIMER._bit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.TIMER._current">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.TIMER.Bit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.TIMER.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.TIMER.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.COUNTER">
            <summary>
            SIMATIC_COUNTER
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.COUNTER._bit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.COUNTER._current">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.COUNTER.Bit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.COUNTER.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.COUNTER.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER">
            <summary>
            IEC_TIMER structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER._start">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER._preset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER._elapsed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER._running">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER._in">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER._q">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER.START">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER.PRESET">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER.ELAPSED">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER.RUNNING">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER.IN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER.Q">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_TIMER.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER">
            <summary>
            IEC_SCOUNTER structure, the count of which is the SINT data type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER._count_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER._count_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER._load">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER._q_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER._q_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER._preset_value">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER._count_value">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER.COUNT_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER.COUNT_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER.RESET">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER.LOAD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER.Q_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER.Q_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER.PRESET_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER.COUNT_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_SCOUNTER.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER">
            <summary>
            IEC_USCOUNTER structure, the count of which is the USINT data type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER._count_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER._count_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER._load">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER._q_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER._q_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER._preset_value">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER._count_value">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER.COUNT_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER.COUNT_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER.RESET">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER.LOAD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER.Q_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER.Q_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER.PRESET_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER.COUNT_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_USCOUNTER.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER">
            <summary>
            IEC_COUNTER structure, the count of which is the INT data type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER._count_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER._count_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER._load">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER._q_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER._q_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER._preset_value">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER._count_value">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER.COUNT_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER.COUNT_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER.RESET">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER.LOAD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER.Q_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER.Q_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER.PRESET_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER.COUNT_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_COUNTER.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER">
            <summary>
            IEC_UCOUNTER structure, the count of which is the UINT data type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER._count_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER._count_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER._load">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER._q_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER._q_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER._preset_value">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER._count_value">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER.COUNT_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER.COUNT_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER.RESET">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER.LOAD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER.Q_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER.Q_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER.PRESET_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER.COUNT_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UCOUNTER.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER">
            <summary>
            IEC_DCOUNTER structure, the count of which is the DINT data type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER._count_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER._count_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER._load">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER._q_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER._q_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER._preset_value">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER._count_value">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER.COUNT_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER.COUNT_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER.RESET">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER.LOAD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER.Q_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER.Q_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER.PRESET_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER.COUNT_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_DCOUNTER.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER">
            <summary>
            IEC_UDCOUNTER structure, the count of which is the UDINT data type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER._count_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER._count_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER._reset">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER._load">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER._q_up">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER._q_down">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER._preset_value">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER._count_value">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER.COUNT_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER.COUNT_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER.RESET">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER.LOAD">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER.Q_UP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER.Q_DOWN">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER.PRESET_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER.COUNT_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.IEC_UDCOUNTER.GetStructureLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Data.UDT">
            <summary>
            Abstract base class for user-defined types (UDT)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Data.UDT.computedDataLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.UDT.GetStructureLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Data.UDT.ComputeStructureSize(System.Object,System.Int32@)">
            <summary>
            Creates initial data map from reflection of class/structure fields
            If myStruct is an array, data map is only created for first element and computedDataLength is length of one element.
            Can be used recursively
            </summary>
            <param name="myStruct"></param>
            <param name="byteOffset"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Model">
            <summary>
            Models enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Model.S7_200">
            <summary>
            S7_200
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Model.S7_300">
            <summary>
            S7_300
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Model.S7_400">
            <summary>
            S7_400
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Model.S7_1200">
            <summary>
            S7_1200
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Model.S7_1500">
            <summary>
            S7_1500
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Device">
            <summary>
            SI.S7.Device class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Device.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Device.#ctor(System.String,AutomatedSolutions.Win.Comm.SI.S7.Model)">
            <summary>
            RoutePath assignment constructor
            </summary>
            <param name="routePath">
            Gets or sets the communications route/path to a target GE device.
            The RoutePath property describes the routing from the PC to the GE device.
            For SI.S7 devices, the RoutePath property consists of one field: IP Address or host name of target device. 
            </param>
            <param name="model"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Device.#ctor(System.String,AutomatedSolutions.Win.Comm.SI.S7.Model,System.Int32,System.Int32)">
            <summary>
            RoutePath and Timeout Assignment Constructor
            </summary>
            <param name="routePath">
            Gets or sets the communications route/path to a target GE device.
            The RoutePath property describes the routing from the PC to the GE device.
            For SI.S7 devices, the RoutePath property consists of one field: IP Address or host name of target device. 
            </param>
            <param name="timeoutConnect">The connection timeout value in milliseconds.</param>
            <param name="timeoutTrans">The transaction timeout value in milliseconds. </param>
            <param name="model"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Device.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Device.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Device.model">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Device.link">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Device.Model">
            <summary>
            Gets or sets the processor model represented by this device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Device.RoutePath">
            <summary>
            Gets or sets the node address or routing path information that must be supplied to address the target device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Device.Link">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Device.Groups">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Device.SimRead(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for read calls
            </summary>
            <param name="items"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Device.SimWrite(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for write calls
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Device.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Device.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.GroupCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Groups property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.GroupCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.GroupCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.GroupCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.S7ExceptionCategory">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.S7Exception.errorCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.S7Exception.category">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.S7Exception.#ctor(AutomatedSolutions.Win.Comm.SI.S7.S7ExceptionCategory,System.Int32)">
            <summary>
            
            </summary>
            <param name="category"></param>
            <param name="errorCode"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.S7Exception.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.S7Exception.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.S7Exception.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Group">
            <summary>
            SI.S7 Group Class
            
            The Group class is used to logically group items with common characteristics together.
            Characteristic currently include Active status and Update Rate.
            The Group class contains a Items collection which stores the group's Items.
            The Device class supports the ISserializable and IDisposable interfaces.
            </summary>
            <remarks>
            Because this class has a thread that needs to be started by the constructor,
            it was created with the ISerializable interface so the SerializationInfo constructor is called.
            This means that serialization of elements needs to be handled manually.
            The GetObjectData function gathers data from the fields to be serialized prior to disposal
            and then the data is passed back to the serialization constructor when the object is recreated.
            </remarks>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Group.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Group.#ctor(System.Boolean,System.Int32)">
            <summary>
            Assignment constructor
            </summary>
            <param name="active">
            Indicates whether Group is active (scanning data points on hardware device). Default = true.
            </param>
            <param name="updateRate">
            The rate in milliseconds at which data points on hardware device should be scanned. Default = 500 mSec.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            De-serialization Constructor 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Group.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Group.Items">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Group.Refresh">
            <summary>
            Performs a synchronous Read on all items in group. 
            To perform a SyncRead on selected items, use the Device's SyncRead method.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Group.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.ItemCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Items property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.ItemCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.ItemCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.ItemCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.ItemCollator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.ItemCollator.itemRecDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.ItemCollator.model">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.ItemCollator.ItemRecs">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.ItemCollator.Add(AutomatedSolutions.Win.Comm.SI.S7.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.ItemCollator.Add(AutomatedSolutions.Win.Comm.Item[])">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.ItemCollator.Add(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.SI.S7.Item}@)">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.ItemRec">
            <summary>
            Contains a list of items, their starting register and number of elements required to read them in a single transaction.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.ItemRec.items">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.ItemRec.startByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.ItemRec.endByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.ItemRec.startRegister">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.ItemRec.StartByte">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.ItemRec.StartRegister">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.ItemRec.ByteCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.ItemRec.Items">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.ItemRec.Add(AutomatedSolutions.Win.Comm.SI.S7.Model,AutomatedSolutions.Win.Comm.SI.S7.Item)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="item"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.DataType">
            <summary>
            Supported register data types 
            Only applies to registers, does not apply to discrete and other types.
            Since Siemens S7 tag names do not include type information, AUTO is not supported.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.Byte">
            <summary>
            8-bit Byte
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.SByte">
            <summary>
            8-bit Unsigned Byte
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.BCD8">
            <summary>
            8-bit BCD
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.Int16">
            <summary>
            16-bit Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.UInt16">
            <summary>
            16-bit Unsigned Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.BCD16">
            <summary>
            16-bit BCD
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.Int32">
            <summary>
            32-bit Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.UInt32">
            <summary>
            32-bit Unsigned Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.BCD32">
            <summary>
            32-bit BCD
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.Single">
            <summary>
            32-Bit Float
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.Structure">
            <summary>
            Structure
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.DataType.WString">
            <summary>
            WString
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Item">
            <summary>
            Siemens S7 Item class
            
            The Item class is used to represent data areas in hardware devices (PLCs, instrumentation, etc.).
            The Item class supports the ISserializable and IDisposable interfaces.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.#ctor(AutomatedSolutions.Win.Comm.SI.S7.Item)">
            <summary>
            Copy constructor
            Use this constructor to create a new item and copy the contents from an existing item.
            </summary>
            <param name="item">Item to copy from.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.#ctor(System.String)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent a single bit register on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">
            Hardware tag name. Enter the name of the tag on the hardware device.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.#ctor(System.String,System.Int32)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent an array of contiguous tags on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">
            Hardware tag name. Enter the name of the starting tag on the hardware device.
            </param>
            <param name="elements">
            Number of elements. Enter the number of array elements.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.#ctor(System.String,AutomatedSolutions.Win.Comm.SI.S7.DataType)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent a single analog register on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">
            Hardware tag name. Enter the name of the starting tag on the hardware device.
            </param>
            <param name="hwDataType">
            Hardware data type. Register data format on hardware device. Does not apply to discrete types.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.#ctor(System.String,System.Int32,AutomatedSolutions.Win.Comm.SI.S7.DataType)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent an array of contiguous tags on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">
            Hardware tag name. Enter the name of the starting tag on the hardware device.
            </param>
            <param name="elements">
            Number of elements. Enter the number of array elements.
            </param>
            <param name="hwDataType">
            Hardware data type. Register data format on hardware device. Does not apply to discrete types.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item._dataMapLock">
            <summary>
            DataMap lock object
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.optimizeReads">
            <summary>
            Storage for OptimizeReads property.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.attribs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.hwDataType">
            <summary>
            internal storage for HWDataType property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.stringLength">
            <summary>
            Internal storage for StringLength property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.structureLength">
            <summary>
            Internal storage for StringLength property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.dataWidthNeedsUpdating">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.dataWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.structCRC">
            <summary>
            For structs only, holds CRC returned from read operation
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.structSize">
            <summary>
            For structs only, holds struct size computed from read operation
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.dataMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.computedDataLength">
            <summary>
            For structs only, computed data length
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Item.structHash">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.ComputedDataLength">
            <summary>
            For structs only, computed data length
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.StringLength">
            <summary>
            Gets or sets the string capacity for string items.
            </summary>
            <remarks>
            <para>StringLength property specifies the string capacity, not length of current string value.</para>
            <para>For ASCII strings (STRING type),Â valid StringLength property values are between 1 and 254. </para>
            <para>For Unicode strings (WSTRING type),Â valid StringLength property values are between 1 and 16382. </para>
            </remarks>
            <value>
            <para>Valid range is 1 to 16382. Default is 254.</para>
            </value>
            <example>
            <code lang="C#"><![CDATA[// Custom string with length = 20
            myItem.StringLength = 20; ]]></code>
            <code lang="VB"><![CDATA['' Custom string with length = 20
            myItem.StringLength = 20]]></code>
            </example>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.StructureLength">
            <summary>
            Gets or sets the structure length for datablock structures.
            </summary>
            <remarks>
            </remarks>
            <value>
            </value>
            <example>
            <code lang="C#"><![CDATA[// Structure consisting of 20 bytes
            myItem.StructureLength = 20; ]]></code>
            <code lang="VB"><![CDATA['' Structure consisting of 20 bytes
            myItem.StructureLength = 20]]></code>
            </example>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.HWDataType">
            <summary>
            Gets or sets the hardware datatype property. 
            HWDataType represents the data type for this item on the hardware device. 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.HWTagName">
            <summary>
            Gets or sets the hardware tag name property, required. 
            Indicates the hardware tag name to associate with this Item instance. 
            This field should correspond to a valid tag/register in your hardware device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.Attribs">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.OptimizeReads">
            <summary>
            Gets or sets flag indicating whether this item should be optimized along with other items to minimize number of read transactions.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.IsValidDataType">
            <summary>
            For register types only. Checks HWDataType property against data width specifier in tag name.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.DataWidthNeedsUpdating">
            <summary>
            For register types only. Checks HWDataType property against data width specifier in tag name.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Item.DataWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.ConfigureValuesArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.GetValueType">
            <summary>
            Returns the CLR system type that corresponds to the type represented in the Item's Values property.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.GetSystemType">
            <summary>
            For internal use only. Returns the CLR system type that corresponds to the hardware data type for this item.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.GetStructuredValues(System.Object@)">
            <summary>
            Populates a class reference with structured data from the controller.
            </summary>
            <param name="o">
            Reference to object. 
            NOTE: Pass-by-reference parameters must be the same as the parameter type, so you must assign an instance of your UDT/PDT class to a variable of type Object to pass in as a parameter.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.CreateDataMap(System.Object,System.Int32@)">
            <summary>
            Creates initial data map from reflection of class/structure fields
            If myStruct is an array, data map is only created for first element and computedDataLength is length of one element.
            Can be used recursively
            </summary>
            <param name="myStruct"></param>
            <param name="byteOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.CopyDataToStruct(System.Object@,System.Int32@,System.Byte[])">
            <summary>
            Copies data from reply packet into class/struct fields
            Can be called recursively
            </summary>
            <param name="myStruct"></param>
            <param name="dataMapIndex"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.CopyStructToData(System.Object@,System.Int32@,System.Byte[]@)">
            <summary>
            Copies data from class/struct fields into byte[]
            Can be called recursively
            </summary>
            <param name="myStruct"></param>
            <param name="dataMapIndex"></param>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Item.DataFieldMapping">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.DataFieldMapping.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="srcType"></param>
            <param name="srcByte"></param>
            <param name="srcBit"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Item.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.memType">
            <summary>
            Memory type string
            This is the tagname without the numeric portion (Memory Area + Data Width)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.dataBlockNoHi">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.org">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.dataClass">
            <summary>
            0x02 = Bit, Byte, Word, DWord
            0x04 = Analog Inputs and outputs
            0x20 = H Register
            0x1e = Counter (200)
            0x1f = Timer (200)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.bytesPerElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.offsetSize">
            <summary>
            Bits for bit memory, bytes for others
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.width">
            <summary>
            Data width: bit, bit8, bit16, bit32
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.#ctor(System.String,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,AutomatedSolutions.Win.Comm.SI.S7.Protocol.DataWidth)">
            <summary>
            
            </summary>
            <param name="memType">Memory type field parsed from tag name</param>
            <param name="dataBlockNo">Datablock number</param>
            <param name="org"></param>
            <param name="dataClass"></param>
            <param name="bytesPerElement"></param>
            <param name="offsetSize"></param>
            <param name="width"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.MemType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.DataBlockNoHi">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.DataBlockNoLo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.Org">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.DataClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.BytesPerElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.OffsetSize">
            <summary>
            Bits for bit memory, bytes for others
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct.Width">
            <summary>
            Data width: bit, bit8, bit16, bit32
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.TryGetCommandInfo(AutomatedSolutions.Win.Comm.SI.S7.Model,AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser,AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct@)">
            <summary>
            Gets the commandInfo for a given controller model and memory area
            </summary>
            <param name="controllerModel"></param>
            <param name="tagAttribs"></param>
            <param name="commandInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.tagName">
            <summary>
            Complete tag name, includes tagType + element
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.tagType">
            <summary>
            Tag type, parsed from tag name
            Examples: M, MB, MW, MD, DB1.DB, DB1.DBB
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.byteAddress">
            <summary>
            Starting element, parsed from tag name
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.bit">
            <summary>
            Starting bit number, parsed from tag name
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.isBitLevel">
            <summary>
            Set if register is specified at bit level
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.isDataBlock">
            <summary>
            Set if DataBlock
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.dataBlockNoHi">
            <summary>
            Datablock Number Hi
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.dataBlockNoLo">
            <summary>
            Datablock Number Lo
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.tagKey">
            <summary>
            This is the key used in the optimizer's ItemDictionary 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="tagName"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.TagKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.TagName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.TagType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.ByteAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.Bit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.DataBlockNo">
            <summary>
            Datablock Number
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.DataBlockNoHi">
            <summary>
            Datablock Number Hi
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.DataBlockNoLo">
            <summary>
            Datablock Number Lo
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.IsBitLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.IsDataBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.AddElementOffset(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns>string containing original register with offset added to element</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TPKTCommand">
            <summary>
            The well known TCP port for TPKT traffic is 102.
            ------------------------------
            WHAT IS A TPKT PROTOCOL?
            TPKT provides a method to carry OSI data over TCP/IP networks.
            TPKT is officially defined as "ISO Transport Service on top of the TCP." 
            "TCP" and "ISO" relate to two rival suites of networking protocols. TPKT enables translation between these two groups. 
            ------------------------------
            BACKGROUND
            The International Standards Organization, or ISO, sponsored the definition of a suite of protocols for networking: the "Open Systems Interconnection (OSI) model. 
            A rival suite of protocols is called "TCP/IP": "Transmission Control Protocol/Internet Protocol." 
            Both layer groups of protocols in a "stack." In TCP/IP, "TCP" is at the "Transport Layer" and the Internet Protocol (IP) is at the "Internet Layer." 
            TCP/IP is more widely implemented than OSI. TPKT provides a method to carry OSI data over TCP/IP networks.
            ------------------------------
            FUNCTION
            TPKT is an "encapsulation" protocol. It carries the OSI packet in its own packet's data payload and then passes the resulting structure to TCP, 
            from then on, the packet is processed as a TCP/IP packet. 
            The OSI programs passing data to TPKT are unaware that their data will be carried over TCP/IP 
            because TPKT emulates the OSI protocol Transport Service Access Point (TSAP).
            ------------------------------
            FEATURES
            Like most networking protocols, TPKT also works in reverse. 
            When a TPKT packet arrives, TPKT strips off its packet structure and passes the carried packet up the protocol stack. 
            The OSI protocols receiving the data are unaware that TCP/IP was involved in data transmission.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TPKTCommand.data">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TPKTCommand.version">
            <summary>
            TPKT version field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TPKTCommand.reserved">
            <summary>
            TPKT reserved field
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TPKTCommand.length">
            <summary>
            TPKT length field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TPKTCommand.#ctor(System.Byte)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TPKTCommand.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.TPKTCommand.Add(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.COTP">
            <summary>
            
            Connection Oriented Transport Protocol (COTP, ISO 8073)
            This is the connection transport protocol of the IsoProtocolFamily.
            ------------------------------
            Packet-based vs. stream-based: 
            COTP transports packets of data from one user to the other, so the receiver will get exactly the same data boundaries as the sender transmitted. 
            TCP transports a continuous stream of data to the receiver, so the protocol on top of TCP often has to add such boundaries itself (see the TPKT protocol for such a protocol). 
            ------------------------------
            TSAP's vs. ports: 
            To multiplex several conversations between two hosts, COTP uses TSAP's which are variable length binary blobs (often a meaningful string is used). 
            These TSAP's are matched at connection establishing phase, and replaced by the 2 byte (destination/source) references at data transfer. 
            TCP uses ports for this. One notable difference is that TSAP's are singletons - if a TSAP is used for a connection it cannot be used by another. 
            XXX - Needs clarification. A single TSAP (Transport Service Access Point) may be used by multiple connections. 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.COTP.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.COTP.CRConnectRequest(System.UInt16,System.UInt16,System.Byte)">
            <summary>
            
            </summary>
            <param name="sourceTsap"></param>
            <param name="destTsap"></param>
            <param name="tpduSize">
            Base 2 exponent.
             9 = 2^9  =  512 bytes
            10 = 2^10 = 1024 bytes
            </param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.COTP.DTData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.ReadCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.ReadCommand.pdu">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.ReadCommand.length">
            <summary>
            Header length
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.ReadCommand.commandLength">
            <summary>
            Length of command data + two bytes indicating command type and number of commands.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.ReadCommand.commands">
            <summary>
            Keeps track of number of commands
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.ReadCommand.#ctor(System.UInt16)">
             <summary>
            
             </summary>
             <param name="sequence"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.ReadCommand.AddCommand(AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct,System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="commandInfo">Command fields for a particular memory type</param>
            <param name="startRegisterElement">Starting register</param>
            <param name="bytesToRead">In native units</param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.ReadCommand.PDU">
            <summary>
            Gets buffer data
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.WriteCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.WriteCommand.headerLength">
            <summary>
            Header length
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.WriteCommand.commandLength">
            <summary>
            Command length + two bytes indicating command type and number of commands.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.Protocol.WriteCommand.dataLength">
            <summary>
            Data length.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.WriteCommand.#ctor(System.UInt16)">
             <summary>
            
             </summary>
             <param name="sequence"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.SI.S7.Protocol.WriteCommand.PDU">
            <summary>
            Gets buffer data
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.WriteCommand.AddCommand(AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct,System.Int32,System.Byte,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="commandInfo"></param>
            <param name="startRegisterElement"></param>
            <param name="bytesToWrite"></param>
            <param name="dataToWrite"></param>
            <param name="byteOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.WriteCommand.AddWriteBitCommand(AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct,System.Int32,System.Int32,System.Byte,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="commandInfo"></param>
            <param name="startByte"></param>
            <param name="startBit"></param>
            <param name="bitValue"></param>
            <param name="offset"></param>
            <param name="fillByteRequired"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.Decode.TPKT">
            <summary>
            Describes a TPKT Packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.Protocol.Decode.TPKT.#ctor(System.Byte[])">
            <summary>
            Reads a TPKT from the socket
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.Decode.COTP">
            <summary>
            COTP Protocol functions and types
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.Protocol.Decode.COTP.TPDU">
            <summary>
            Describes a COTP TPDU (Transport protocol data unit)
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SI.S7.LinkType">
            <summary>
            LinkType enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.LinkType.PC">
            <summary>
            Use for PC
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.LinkType.PG">
            <summary>
            Use for PG
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.LinkType.OP">
            <summary>
            Use for OP
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.seq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.srcTSAP">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.dstTSAP">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.controllerModel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.defaultPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.S7SetupCommunication">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.IsNewTSAP(System.UInt16,System.UInt16)">
            <summary>
            Test to see if TSAP has changed
            </summary>
            <param name="srcTSAP">Always 0x0100</param>
            <param name="dstTSAP">Contains  link type, rack, and slot</param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.Connect(AutomatedSolutions.Win.Comm.SI.S7.Model,System.String,System.String,System.String,System.Int32)">
            <summary>
            Use this overload for S7-200
            Connect performs the following functions:
            1. TCP/IP connection
            2. COTP connection
            3. Opens S7 connection
            </summary>
            <param name="controllerModel"></param>
            <param name="ipAddress"></param>
            <param name="localTSAP">Corresponds to Micro/WIN Remote TSAP</param>
            <param name="remoteTSAP">Corresponds to Micro/WIN Local TSAP</param>
            <param name="timeoutConnect"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.Connect(AutomatedSolutions.Win.Comm.SI.S7.Model,System.String,System.UInt16,System.UInt16,AutomatedSolutions.Win.Comm.SI.S7.LinkType,System.Int32)">
            <summary>
            Use this overload for S7-300, S7-400, S7-1200, S7-1500
            Connect performs the following functions:
            1. TCP/IP connection
            2. COTP connection
            3. Opens S7 connection
            </summary>
            <param name="controllerModel"></param>
            <param name="ipAddress"></param>
            <param name="rack"></param>
            <param name="cpuSlot"></param>
            <param name="link"></param>
            <param name="timeoutConnect"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.DoConnect(AutomatedSolutions.Win.Comm.SI.S7.Model,System.String,System.UInt16,System.UInt16,System.Int32)">
            <summary>
            
            </summary>
            <param name="controllerModel"></param>
            <param name="ipAddress"></param>
            <param name="srcTSAP">
            TSAPs consist of two bytes. 
            1. The first byte specifies the connection.
            The following ranges apply for the first byte:
            Local TSAP value range: 0x02, 0x10 - 0xfe
            Remote TSAP value range: 0x02, 0x03, 0x10 - 0xfe
            2. The second byte is composed of the rack number and the slot of the communications module
            The structure of the second byte is not checked for S7-200 (CP 243-1)
            </param>
            <param name="dstTSAP">
            </param>
            <param name="timeoutConnect"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.Read(System.String,System.Int32,System.Byte[]@)">
            <summary>
            Read - reads from data table
            Use this overload for reading atomic types and strings.
            </summary>
            <param name="startRegister">Starting register </param>
            <param name="bytes">Number of bytes </param>
            <param name="data">Data returned in byte array </param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Thrown when ... 
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when invalid parameter is specified
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a null reference is passed to a method that does not accept it as a valid argument.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when a socket exception occurs.
            </exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.Read(System.String,System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Read - reads from data table
            Use this overload for reading structures.
            </summary>
            <param name="startRegister">Starting register </param>
            <param name="elements">Number of elements (native units) </param>
            <param name="structureLength">Structure size in bytes </param>
            <param name="data">Data returned in byte array </param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Thrown when ... 
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when invalid parameter is specified
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a null reference is passed to a method that does not accept it as a valid argument.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when a socket exception occurs.
            </exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.WriteBytes(AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser,AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct,System.Int32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="startRegisterAttribs"></param>
            <param name="commandInfo"></param>
            <param name="elements"></param>
            <param name="data"></param>
            <param name="byteOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.DoWriteBits(AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes bits within a byte without affecting other bits.
            Can be used to write 1 to 7 bits.
            </summary>
            <param name="commandInfo"></param>
            <param name="startByte"></param>
            <param name="startBit"></param>
            <param name="bits"></param>
            <param name="data"></param>
            <param name="dataOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SI.S7.TcpSocket.WriteBits(AutomatedSolutions.Win.Comm.SI.S7.Protocol.TagParser,AutomatedSolutions.Win.Comm.SI.S7.Protocol.MemoryArea.CommandInfoStruct,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="startRegisterAttribs"></param>
            <param name="commandInfo"></param>
            <param name="elements"></param>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Channel">
            <summary>Implements the base functionality for all derived classes.</summary>
            <remarks>
            	<para>
            	A Channel describes a physical connection and protocol between the PC and the 
              hardware device. Three channel categories are currently defined:
              </para>
            	<para>
            	1. Net - network classes implement drivers that are based on internetworking protocols. 
            	Two common types are Ethernet/IP and Modbus/TCP which are both based on TCP/IP.
            	</para>
            	<para>
            	2. Serial - serial classes implement drivers that are based on serial communications protocols. 
            	Two common types are A-B DF1 and Modbus, which are based on RS232 or RS485.
            	</para>
            	<para>
            	3. Adapter - adapter classes implement drivers that are based on proprietary protocols
            	</para>
            	<para>
            	All channel classes are derived from the Channel class.
            	</para>
            </remarks>
            <requirements>
            	<para><strong>Namespace:</strong> AutomatedSolutions.Win.Comm</para>
            	<para><b class="le">Platforms:</b> Windows 98, Windows NT 4.0, Windows Millennium
                Edition, Windows 2000, Windows XP Home Edition, Windows XP Professional, Windows
                Server 2003 family</para>
            	<para><strong>Assembly:</strong> AutomatedSolutions.ASComm.dll</para>
            </requirements>
            
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.#ctor">
            <summary>
            Default constructor
            This constructor fires before derived class constructors.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.thisLock">
            <summary>
            Transaction synchronization object
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.parent">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.devices">
            <summary>
            Internal storage for Devices property collection 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.deviceCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.tag">
            <summary>
            Internal storage for Tag property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.label">
            <summary>	
            Internal storage for Label property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.description">
            <summary>
            Internal storage for Description property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.transactions">
            <summary>
            Internal storage for Transactions property 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.errors">
            <summary>
            Internal storage for Errors property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.counter">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.IsDisposing">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.Parent">
            <summary>
            Gets parent object
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.Devices">
            <summary>
            Gets the DeviceCollection containing devices in the ASComm instance.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.Label">
            <summary>Gets or sets the label that is used to identify the control at runtime. This property cannot be blank and must be unique.</summary>
            <value>String</value>
            <remarks>
            In order to uniquely identify a dynamically created object at runtime, and then
            refer to it using the property collection editor, you must set the label property to a
            unique value among channels.
            </remarks>
            <example>
            	<para>To create a label for MyChannel:</para>
            	<para>MyChannel.Label = "MyChannelLabel"</para>
            </example>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.Description">
            <summary>Gets or sets the description for this channel. This property is optional.</summary>
            <remarks>
            The Description property can be used to store descriptive information about a
            channel.
            </remarks>
            <value>String</value>
            <example>
            	<para>To create an informational description for MyChannel:</para>
            	<para>MyChannel.Description = "This channel is..."</para>
            </example>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.Transactions">
            <summary>Gets the transaction counter value.</summary>
            <remarks>
            The Transactions property reports the total number of channel communications
            transactions since the channel was created.
            </remarks>
            <value>Long</value>
            <example>
            	<para>To set a text box equal to the value of the Transactions property:</para>
            	<para>TextBox1.Text = MyChannel.Transactions.ToString();</para>
            </example>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.Tag">
            <summary>
            Gets or sets user-defined data associated with the component.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.Errors">
            <summary>
            Gets error counter value
            </summary>
            <remarks>
            The Errors property reports the total number of channel communications errors
            since the channel was created.
            </remarks>
            <value>Long</value>
            <example>
            	<para>To set a text box equal to the value of the Errors property:</para>
            	<para>TextBox1.Text = MyChannel.Errors.ToString();</para>
            </example>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.Read(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.Write(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.ClearCounters">
            <summary>
            Clears transaction and error counters
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.InvokeDelegate(System.Delegate,System.Object[])">
            <summary>
            This checks for GUI application
            If GUI application, invoke is used to avoid cross-threaded UI operations
            Else, handler delegate is called directly
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.FireError(AutomatedSolutions.Win.Comm.ChannelEventArgs)">
            <summary>
            Use this overload to fire events for Channel exceptions
            </summary>
            <param name="evArgs"></param>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.Channel.errorEvent">
            <summary>
            Internal storage for Event to indicate that an error has occurred
            *** Do not change name. Original name was error, but clashed with Error in VB. ***
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.Channel.Error">
            <summary>
            Event to indicate that a channel error has occurred.
            </summary>
            <remarks>
            The Error event fires when a channel error occurs
            </remarks>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Channel.ErrorEventHandler">
            <summary>
            Delegate for error event
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Channel.DeviceCollection">
            <summary>Implements the IList interface.</summary>
            <remarks>
            	<para>The DeviceCollection class provides type-safe access to the collection that
                stores Device object instances.</para>
            	<para>Devices added to the DeviceCollection behave as follows:</para>
            	<list type="bullet">
            		<item>Devices are serialized/deserialized when the ASComm object instance is
                    serialized/deserialized.</item>
            		<item>Devices are disposed when the ASComm object instance is disposed.</item>
            	</list>
            </remarks>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.owner">
            <summary>
            
            </summary>		
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.#ctor(AutomatedSolutions.Win.Comm.Channel)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.Item(System.Int32)">
            <summary>
            The CollectionEditor will determine the type of objects to be created by
            looking at the property type of the following method. CollectionEditor
            internally uses reflection to get the PropertyInfo for the "Item" property. 
            This method must be public.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.InnerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.Add(AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.AddRange(AutomatedSolutions.Win.Comm.Device[])">
            <summary>
            
            </summary>
            <param name="devices"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.Insert(System.Int32,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.Remove(AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.Contains(AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.Clear">
            <summary>
            
            </summary>			
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.IndexOf(AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Channel.DeviceCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ChannelEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ChannelEventArgs.#ctor(System.Net.Sockets.SocketException)">
            <summary>
            This constructor is used for socket errors
            </summary>
            <param name="se"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ChannelEventArgs.#ctor(AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes)">
            <summary>
            This constructor is used for General errors
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ChannelEventArgs.#ctor(System.String)">
            <summary>
            This constructor is used for system exceptions
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ChannelEventArgs.Categories">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.Categories.SYSTEM">
            <summary>
            System exception, message only, no corresponding error code
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.Categories.GENERAL">
            <summary>
            General exception, ASComm error code and message 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.Categories.SOCKET">
            <summary> 
            Socket exception, socket error code and message 
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes">
            <summary>Defines constants that correspond to channel errors.</summary>
            <remarks>
            	<para>Channel errors are errors that are returned while performing channel
                operations.</para>
            	<para>For Net channel types, errors are typically related to establishing
                communications with a remote device (bad IP address, bad route/path specified to
                remote device, etc.) or socket errors that occur during initialization or
                communications (reading and writing errors, framing, etc.).</para>
            	<para>For Serial channel types, errors are typically related to establishing
                communications (opening a serial port, setting comm parameters, etc.) or IO errors
                that occur during initialization or communications (parity error, error writing
                comm port, etc.).</para>
            	<para>For Adapter channel types, errors are typically related to establishing
                communications (device driver problems, missing or wrong binary files, etc.) or IO
                errors that occur during initialization or communications (adapter is busy, adapter
                reports that node is not present, etc.).</para>
            	<para>Channel errors are reported via events. When you create a channel, you should
                also create an Error event handler that can be called by the channel to report
                problems.</para>
            </remarks>
            <requirements>
            	<para><strong>Namespace:</strong> AutomatedSolutions.Win.Comm</para>
            	<para><b class="le">Platforms:</b> Windows 98, Windows NT 4.0, Windows Millennium
                Edition, Windows 2000, Windows XP Home Edition, Windows XP Professional, Windows
                Server 2003 family</para>
            	<para><strong>Assembly:</strong> AutomatedSolutions.ASComm.dll</para>
            </requirements>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.DATATYPE_NOT_SUPPORTED">
            <summary>The specified datatype is not supported by this channel's protocol.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.TRANSACTION_TIMEOUT">
            <summary>The transaction did not complete within the time specified by the device's TimeoutTransaction property </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.REGISTERING_SESSION">
            <summary>Error registering with remote host.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_SOCKET_SEND">
            <summary>This error indicates that the sent byte count did not match the requested byte count.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_SOCKET_RECV">
            <summary>This error indicates that the received byte count did not match the expected byte count.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_PACKET_FRAMING">
            <summary>Received packet did not contain expected framing characters, packet discarded.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_INVALID_ROUTEPATH">
            <summary>Device.RoutePath property value is not valid for this device type. Refer to Device.RoutePath property in Help system for device specifc requirements.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_REPLY_EXCEEDS_BUFFER">
            <summary>The reply packet exceeded the allocated buffer space</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_DUPLICATE_LABEL">
            <summary>Label property must be unique</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_MB_PROTOCOL_ID">
            <summary>Reply Protocol ID not equal to 0</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_TRANSACTION_ID">
            <summary>Reply Transaction ID did not match Command Transaction ID</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.CIP_FORWARD_OPEN">
            <summary>CIP Forward Open failed. Did not receive reply. Check Device.RoutePath property.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_REPLY_PACKET_LENGTH">
            <summary>Reply packet size was not expected length</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.CHECKSUM_ERROR">
            <summary>Checksum error detected on reply packet</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.PACKET_FRAMING_ERROR">
            <summary>Framing error detected on reply packet</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.INVALID_COMM_SETTINGS">
            <summary>Invalid comm port settings</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.RECEIVED_PARTIAL_REPLY">
            <summary>Recevied partial reply</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_OPENING_PORT">
            <summary>Error opening comm port. This usually occurs when the comm port is in use by another application.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_READING_PORT">
            <summary>Error reading from comm port.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ERROR_WRITING_PORT">
            <summary>Error writing to comm port.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.SEQUENCE_ERROR">
            <summary>Sequence error, occurs when reply packet is valid packet but does not match command.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.ISO_CONNECT_ERROR">
            <summary>Unable to connect to target device, destination TSAP is not available. Check destination TSAP to ensure it is accurate and not already in use.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.GE_SRTP_SESSION_RESPONSE_TIMEOUT">
            <summary>SRTP Session Request timed out. Increase Device.TimeoutTransaction property and try again. If problem persists, this is generally an indicator that the CPU Slot field is not set correctly in Device.RoutePath property. Ensure CPU slot matched hardware configuration.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.INFO_SOCKET_CLOSED_BY_REMOTE_HOST">
            <summary>Connection reset by peer and driver is attempting to reconnect. An existing connection was forcibly closed by the remote host. This normally results if the peer application on the remote host is suddenly stopped, the host is rebooted, the host or remote network interface is disabled, or the remote host uses a hard close.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCodes.S7COMM_PROTOCOL_ID_NOT_SUPPORTED">
            <summary>S7 Protocol reported in response packet is not currently supported by the driver.</summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.category">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.errorCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.message">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelEventArgs.timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ChannelEventArgs.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ChannelEventArgs.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ChannelEventArgs.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ChannelEventArgs.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ChannelCollectionEditor">
            <summary>
            Channel Collection Editor Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ChannelCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="channelType"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ChannelCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ChannelCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.SRTP.Channel">
            <summary>
            Use this channel for Ethernet connectivity to GE SRTP device families
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.DataTableArrayList">
            <summary>
            Used to iterate through an array of Items to determine Segment, Reference, and Size 
            which are passed to Read and Write methods 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.DataTableArrayList.Segment">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.DataTableArrayList.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.DataTableArrayList.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.DataTableArrayList.Discrete">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.DataTableArrayList.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.WSAEWOULDBLOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.WSAETIMEDOUT">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.int2float">
            <summary>
            
            </summary>	
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.license">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.client">
            <summary>
            Reusable socket variable
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.Devices">
            <summary>
            Gets the DeviceCollection containing devices in the ASComm instance.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.DebugOutputPacketBytes(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="message"></param>
            <param name="data"></param>
            <param name="length"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.DebugOutputPacketBytes(System.String,System.String,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="message"></param>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.ReadReference(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.GE.Item},AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.ReadSymbolic(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.GE.Item},AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.ReadControllerInfo(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.GE.Item},AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.ReadCpuStatus(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.GE.Item},AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.ReadTimeOfDay(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.GE.Item},AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.Read(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.WriteReference(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.GE.Item},System.Object[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.WriteSymbolic(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.GE.Item},System.Object[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.Write(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal write method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.Channel.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
            <remarks>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly or indirectly by a user's code. 
            Managed and unmanaged resources can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </remarks>		
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.SRTP.DeviceCollectionEditor">
            <summary>
            Device Collection Editor Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.DeviceCollectionEditor.types">
            <summary>
            A Collection Editor for all public classes that inherit from Device
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.DeviceCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.DeviceCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.DeviceCollectionEditor.GetTypes">
            <summary>
            method to retrieve device types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket">
            <summary>
            GE SRTP Socket Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.defaultPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.SysReadReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.ShortWriteReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.LongWriteReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.TODReadReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.ReadCntrlInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.ShortStatusReq">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.cpusts">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.seq_num">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.invokeID">
            <summary>
            SRTP Invoke ID field
            Unique value for each SRTP transaction. 
            Used to match requests with responses.
            If unused, value should always be zero.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.SizeCalc(System.Byte,System.UInt32,System.Int32)">
            <summary>
            SizeCalc - compute number of bytes from Seg sel and native Size of xfer
            </summary>
            <param name="segment">
            Data table code
            </param>
            <param name="reference">
            Starting element, 1-based
            </param>
            <param name="size">
            For Register types, indicates size in words
            For Discrete types, indicates size in bits
            </param>
            <returns>
            Returns number of bytes from Seg, Ref, and native Size
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.OffsetCalc(System.Byte,System.UInt32)">
            <summary>
            OffsetCalc - compute offset into memory based on  Seg sel and reference
            </summary>
            <param name="segment"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.ReadAddressVariable2(System.Byte,System.UInt32,System.Int32,System.Byte,System.Byte,System.Int32,System.Collections.Generic.List{System.Byte}@)">
            <summary>
            SRP READ_ADDR_VAR (Format 2)
            Use this overload for PACSystems reference memory only.
            </summary>
            <param name="segment"></param>
            <param name="reference"></param>
            <param name="elements"></param>
            <param name="rack"></param>
            <param name="slot"></param>
            <param name="transactionTimeout"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.ReadAddressVariable2(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes},System.Byte,System.Byte,System.Int32,System.Byte[]@)">
            <summary>
            SRP READ_ADDR_VAR (Format 2)
            </summary>
            <param name="tagAttributesList"></param>
            <param name="rack"></param>
            <param name="slot"></param>
            <param name="transactionTimeout"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.WriteAddressVariable2(System.Byte,System.UInt32,System.Int32,System.Byte,System.Byte,System.Int32,System.Collections.Generic.List{System.Byte})">
            <summary>
            SRP WRITE_ADDR_VAR (Format 2)
            Use this overload for PACSystems reference memory only.
            </summary>
            <param name="segment"></param>
            <param name="reference"></param>
            <param name="elements"></param>
            <param name="rack"></param>
            <param name="slot"></param>
            <param name="transactionTimeout"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.WriteAddressVariable2(AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes,System.Byte,System.Byte,System.Int32,System.Byte[])">
            <summary>
            SRP WRITE_ADDR_VAR (Format 2)
            </summary>
            <param name="symTagAttribs"></param>
            <param name="rack"></param>
            <param name="slot"></param>
            <param name="transactionTimeout"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.GetNextInvokeID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.SymbolLookup(AutomatedSolutions.Win.Comm.GE.Device,System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <param name="items"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.GetControllerProgram(AutomatedSolutions.Win.Comm.GE.Device)">
            <summary>
            GetControllerProgram retrieves controller's program name and stores result in Device.ProgramName property.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.SRTPConnectAndEstablishSession(AutomatedSolutions.Win.Comm.GE.Device)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.Connect(AutomatedSolutions.Win.Comm.GE.Device)">
            <summary>
            Connect - Performs a TCP/IP connect and an SRTP connect. 
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.ReadSystemMemory(AutomatedSolutions.Win.Comm.GE.Device,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Read System Memory (READ_SMEM)
            
            The Read System Memory request is used to read a single contiguous block of data from any PLC System Memory type.
            
            Request Mail-Buffer:
            
              MB_Type: 0xc0
              
              Request Code: 0x04 (READ_SMEM)
              
              Parameters:
              
                Seg_Selector: 
                  Length: BYTE
                  Specifies memory type to be addressed
                  Byte offset 19 in mail buffer
                Seg_Offset    
                  Length: WORD  
                  Specified offset inot memory area. Units is dependable on Seg_Selector
                  Byte offsets 20-21 in mail buffer
                Read_Length   
                  Length: WORD  
                  Byte offsets 20-21 in mail buffer
                Seg_Offset    
                  Length: WORD  
                  Byte offsets 20-21 in mail buffer
                  
            </summary>
            <param name="device">GE device reference</param>
            <param name="segment">Code for data table</param>
            <param name="reference">Starting element</param>
            <param name="size">In native units (words for DataWidth=WORD, bytes for DataWidth=BYTE, bits for DataWidth=BIT)</param>
            <param name="data">Length must be 20000 bytes</param>
            <returns>
            Returns raw data to caller in caller's supplied buffer 
            </returns>
            <exception cref="T:System.Exception">
            Thrown when ... 
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when invalid parameter is specified
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a null reference is passed to a method that does not accept it as a valid argument.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when a socket exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.ChannelException">
            Thrown when a channel exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.DeviceException">
            Thrown when a Device exception occurs.
            </exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.WriteSystemMemory(AutomatedSolutions.Win.Comm.GE.Device,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Write System Memory
             
            The Write System Memory request is used to write a single contiguous block of data from any PLC System Memory type.
            
            Request Mail-Buffer:
            
              MB_Type:  0xc0 if less than or equal to 8 bytes of data to be written (Short Write)
                        0x80 if greater than 8 bytes of data to be written (Long Write)
                      
              Request Code: 0x07 (WRITE_SMEM)
            
              Parameters:
                
                Seg_Selector
                  Length: BYTE
                  Specifies memory type to be addressed
                  Byte offset 19 in mail buffer if Short Write
                  Byte offset 27 in mail buffer if Long Write
                Seg_Offset    
                  Length: WORD  
                  Specified offset inot memory area. Units is dependable on Seg_Selector
                  Byte offsets 20-21 in mail buffer if Short Write
                  Byte offsets 28-29 in mail buffer if Long Write
                Read_Length   
                  Length: WORD  
                  Byte offsets 22-23 in mail buffer if Short Write
                  Byte offsets 30-31 in mail buffer if Long Write
                Seg_Offset    
                  Length: WORD  
                  Byte offsets 24-31 in mail buffer if Short Write
                  For Long Writes, the data to be written starts at offset 0 in the text buffer.
                  Multiple text buffers may be used.
                  
            </summary>
            <param name="device">GE Device reference</param>
            <param name="segment">Code for data table</param>
            <param name="reference">Starting element</param>
            <param name="size">In native units (words for DataWidth=WORD, bytes for DataWidth=BYTE, bits for DataWidth=BIT)</param>
            <param name="data">Length must be 20000 bytes</param>
            <returns>
            Returns raw data to caller in caller's supplied buffer 
            </returns>
            <exception cref="T:System.Exception">
            Thrown when ... 
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when invalid parameter is specified
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a null reference is passed to a method that does not accept it as a valid argument.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when a socket exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.ChannelException">
            Thrown when a channel exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.DeviceException">
            Thrown when a Device exception occurs.
            </exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.GetControllerInfo(AutomatedSolutions.Win.Comm.GE.Device,System.Byte[])">
            <summary>
            GetControllerInfo - gets controller information
            </summary>
            <param name="device"></param>
            <param name="data"></param>
            <returns>
            Returns raw data to caller in caller's supplied buffer 
            </returns>
            <exception cref="T:System.Exception">
            Thrown when ... 
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when invalid parameter is specified
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a null reference is passed to a method that does not accept it as a valid argument.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when a socket exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.ChannelException">
            Thrown when a channel exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.DeviceException">
            Thrown when a Device exception occurs.
            </exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.GetShortStatus(AutomatedSolutions.Win.Comm.GE.Device,System.Byte[])">
            <summary>
            GetShortStatus - returns controller status information
            </summary>
            <param name="device"></param>
            <param name="data"></param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Thrown when ... 
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when invalid parameter is specified
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a null reference is passed to a method that does not accept it as a valid argument.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when a socket exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.ChannelException">
            Thrown when a channel exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.DeviceException">
            Thrown when a Device exception occurs.
            </exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.SRTP.GETcpClientSocket.GetTime(AutomatedSolutions.Win.Comm.GE.Device,System.Byte[])">
            <summary>
            GetTime - Gets controller time
            </summary>
            <param name="device"></param>
            <param name="data"></param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Represents errors that occur during application execution.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when an invalid method parameter is supplied
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a null reference is passed to a method that does not accept it as a valid argument.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when a socket exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.ChannelException">
            Thrown when a channel exception occurs.
            </exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.DeviceException">
            Thrown when a Device exception occurs.
            </exception>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Group">
            <summary>
            GE Group Class
            
            The Group class is used to logically group items with common characteristics together.
            Characteristic currently include Active status and Update Rate.
            The Group class contains a Items collection which stores the group's Items.
            The Device class supports the ISserializable and IDisposable interfaces.
            </summary>
            <remarks>
            Because this class has a thread that needs to be started by the constructor,
            it was created with the ISerializable interface so the SerializationInfo constructor is called.
            This means that serialization of elements needs to be handled manually.
            The GetObjectData function gathers data from the fields to be serialized prior to disposal
            and then the data is passed back to the serialization constructor when the object is recreated.
            </remarks>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Group.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Group.#ctor(System.Boolean,System.Int32)">
            <summary>
            Assignment constructor
            </summary>
            <param name="active">
            Indicates whether Group is active (scanning data points on hardware device). Default = true.
            </param>
            <param name="updateRate">
            The rate in milliseconds at which data points on hardware device should be scanned. Default = 500 mSec.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            De-serialization Constructor 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Group.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Group.Items">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Group.Refresh">
            <summary>
            Performs a synchronous Read on all items in group. 
            To perform a SyncRead on selected items, use the Device's SyncRead method.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Group.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.ItemCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Items property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.ItemCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.ItemCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.ItemCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.TagType">
            <summary>
            User-supplied hardware tag datatypes for GE family of Devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.TagType.DATA_TABLE">
            <summary>
            Use DATA_TABLE for reading/writing data table registers and discretes
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.TagType.CONTROLLER_INFO">
            <summary>
            Use CONTROLLER_INFO for reading controller information, including
            Controller information includes: SNP ID, task name, CPU type, number of programs, 
            task name, number of program blocks, program length, and various checksums
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.TagType.CPU_STATUS">
            <summary>
            Use CPU_STATUS for reading CPU status information, including
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.TagType.TIME_OF_DAY">
            <summary>
            Use CPU_STATUS for reading CPU status information, including
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.TagType.SYMBOLIC">
            <summary>
            PACSystems Symbolic Variable
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.SystemType">
            <summary>
            Internally-used hardware tag types for GE family of Devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SystemType.REGISTER">
            <summary>
            Register: %R, %AI, %AQ 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.SystemType.DISCRETE">
            <summary>
            Discrete: %I, %Q, %T, %M, %SA, %SB, %SC, %S, %G 
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.DataType">
            <summary>
            Supported register data types 
            Only applies to registers, does not apply to discrete and other types.
            Since GE tag names do not include type information, AUTO is not supported.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.DataType.Int16">
            <summary>
            16-bit Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.DataType.UInt16">
            <summary>
            16-bit Unsigned Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.DataType.BCD16">
            <summary>
            16-bit BCD
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.DataType.Int32">
            <summary>
            32-bit Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.DataType.UInt32">
            <summary>
            32-bit Unsigned Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.DataType.BCD32">
            <summary>
            32-bit BCD
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.DataType.Single">
            <summary>
            32-Bit Float
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.DataType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Item">
            <summary>
            GE.Item class
            
            The Item class is used to represent data areas in hardware devices (PLCs, instrumentation, etc.).
            The Item class supports the ISserializable and IDisposable interfaces.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.#ctor(AutomatedSolutions.Win.Comm.GE.Item)">
            <summary>
            Copy constructor
            Use this constructor to create a new item and copy the contents from an existing item.
            </summary>
            <param name="item">Item to copy from.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.#ctor(System.String)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent a single tag on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the tag on the hardware device.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.#ctor(System.String,System.Int32)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent an array of contiguous tags on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the starting tag on the hardware device.</param>
            <param name="elements">Number of elements. Enter the number of array elements.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.#ctor(System.String,System.Int32,AutomatedSolutions.Win.Comm.GE.DataType)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent an array of contiguous tags on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the starting tag on the hardware device.</param>
            <param name="elements">Number of elements. Enter the number of array elements.</param>
            <param name="hwDataType">Hardware data type. Register data format on hardware device. Does not apply to discrete types.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.#ctor(System.String,System.Int32,AutomatedSolutions.Win.Comm.GE.DataType,System.Int32)">
            <summary>
            Assignment constructor
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            Use for items that represent strings only.
            </summary>
            <param name="hwTagName">
            Hardware tag name describes Modbus register number. 
            Format dependes on Device.AddressType property.
            </param>
            <param name="elements">
            Number of contiguous elements
            </param>
            <param name="hwDataType">
            Hardware data type indicates storage format for hardware registers.
            Current choices: DataType.Int16, DataType.UInt16, DataType.BCD16, DataType.Int32, DataType.UInt32, DataType.BCD32, DataType.Single, DataType.String
            </param>
            <param name="stringLength">
            String length.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Item.attribs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Item.hwDataType">
            <summary>
            internal storage for HWDataType property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Item.stringLength">
            <summary>
            Internal storage for StringLength property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Item.hwTagNameChanged">
            <summary>
            Flag indicates that HWTagName has changed since last time attributes were updated.
            Set by HWTagName property, reset by successful UpdateTagAttributes method call.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Item.StringLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Item.HWDataType">
            <summary>
            Gets or sets the hardware datatype property. 
            HWDataType represents the data type for this item on the hardware device. 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Item.HWTagName">
            <summary>
            Gets or sets the hardware tag name property, required. 
            Indicates the hardware tag name to associate with this Item instance. 
            This field should correspond to a valid tag/register in your hardware device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.UpdateTagAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Item.SystemType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Item.Attribs">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Item.WordSize">
            <summary>
            Returns number of 16-bit words based on data table and hardware data type
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.SetValues(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.ConfigureValuesArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.GetValueType">
            <summary>
            Returns the CLR system type that corresponds to the type represented in the Item's Values property.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.GetSystemType">
            <summary>
            For internal use only. Returns the CLR system type that corresponds to the hardware data type for this item.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.GetStructuredValues(System.Object@)">
            <summary>
            Populates a class reference with structured data from the controller.
            </summary>
            <param name="o">
            Reference to object. 
            NOTE: Pass-by-reference parameters must be the same as the parameter type, so you must assign an instance of your UDT/PDT class to a variable of type Object to pass in as a parameter.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Item.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Model">
            <summary>
            Models enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Model.SERIES_90">
            <summary>
            SERIES_90
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Model.PAC_SYSTEMS">
            <summary>
            PAC_SYSTEMS
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Device">
            <summary>
            GE.Device class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.#ctor(System.String)">
            <summary>
            RoutePath assignment constructor
            </summary>
            <param name="routePath">
            Gets or sets the communications route/path to a target GE device.
            The RoutePath property describes the routing from the PC to the GE device.
            For GE SRTP devices, the RoutePath property consists of one field: IP Address or host name of target device. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.#ctor(System.String,AutomatedSolutions.Win.Comm.GE.Model)">
            <summary>
            RoutePath and Model assignment constructor
            </summary>
            <param name="routePath">
            Gets or sets the communications route/path to a target GE device.
            The RoutePath property describes the routing from the PC to the GE device.
            For GE SRTP devices, the RoutePath property consists of one field: IP Address or host name of target device. 
            </param>
            <param name="model">
            Gets or sets the controller model.
            Current models include Series90 and PACSystems 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            RoutePath and Timeout Assignment Constructor
            </summary>
            <param name="routePath">
            Gets or sets the communications route/path to a target GE device.
            The RoutePath property describes the routing from the PC to the GE device.
            For GE SRTP devices, the RoutePath property consists of one field: IP Address or host name of target device. 
            </param>
            <param name="timeoutConnect">The connection timeout value in milliseconds.</param>
            <param name="timeoutTrans">The transaction timeout value in milliseconds. </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.#ctor(System.String,AutomatedSolutions.Win.Comm.GE.Model,System.Int32,System.Int32)">
            <summary>
            RoutePath, model and Timeout Assignment Constructor
            </summary>
            <param name="routePath">
            Gets or sets the communications route/path to a target GE device.
            The RoutePath property describes the routing from the PC to the GE device.
            For GE SRTP devices, the RoutePath property consists of one field: IP Address or host name of target device. 
            </param>
            <param name="model">
            Gets or sets the controller model.
            Current models include Series90 and PACSystems 
            </param>
            <param name="timeoutConnect">The connection timeout value in milliseconds.</param>
            <param name="timeoutTrans">The transaction timeout value in milliseconds. </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Device.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Device.model">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Device.programName">
            <summary>
            Controller's program name
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Device.rack">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Device.slot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Device.ProgramName">
            <summary>
            Gets or sets the controller's program.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Device.Model">
            <summary>
            Gets or sets the processor model represented by this device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Device.CpuSlot">
            <summary>
            Gets or sets the slot where the target CPU resides.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Device.CpuRack">
            <summary>
            Gets or sets the rack where the target CPU resides.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Device.RoutePath">
            <summary>
            Gets or sets the node address or routing path information that must be supplied to address the target device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Device.Groups">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.SimRead(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for read calls
            </summary>
            <param name="items"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.SimWrite(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for write calls
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Device.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.GroupCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Groups property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.GroupCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.GroupCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.GroupCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo">
            <summary>
            ControllerInfo Structure
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.op_Equality(AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo,AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo)">
            <summary>
            Value equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.op_Inequality(AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo,AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo)">
            <summary>
            Value inequality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.snpId">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.SnpId">
            <summary>
            CPU controller ID
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.CpuMajorType">
            <summary>
            Series 90-70 or 90-30
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.CpuMinorType">
            <summary>
            Which kind of 90-xx
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.NumCtlProgs">
            <summary>
            Number of controller programs
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.TaskName">
            <summary>
            Main control program name
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.NumProgBlocks">
            <summary>
            Number of program blocks
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.TotProgLen">
            <summary>
            Byte length of control program
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.ProgAddChk">
            <summary>
            Sum of prg blk additive chksums
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.ProgCrcChk">
            <summary>
            Sum of prg blk CRC checksums
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.TotCfgLen">
            <summary>
            Byte length of PLC config recs
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.CfgAddChk">
            <summary>
            Sum of config additive chksums
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.CfgCrcChk">
            <summary>
            Sum of config CRC checksums
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.#ctor(AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo)">
            <summary>
            
            </summary>
            <param name="ci"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.GetHashCode">
            <summary>
            Hash function for ControllerInfo structure, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.ControllerInfo.ToString">
            <summary>
            Converts the properites of this structure to the equivalent comma-delimited string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus">
            <summary>
            CpuStatus Structure
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.op_Equality(AutomatedSolutions.Win.Comm.GE.Data.CpuStatus,AutomatedSolutions.Win.Comm.GE.Data.CpuStatus)">
            <summary>
            Overloaded '==' operator, compares values of all properties within structure
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>true if all properties are equal, else false</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.op_Inequality(AutomatedSolutions.Win.Comm.GE.Data.CpuStatus,AutomatedSolutions.Win.Comm.GE.Data.CpuStatus)">
            <summary>
            Overloaded '!=' operator, compares values of all properties within structure
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>true if all properties are equal, else false</returns>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.programNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.ProgramNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.AccessLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.ScanTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.OversweepFlag">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.ConstSweepMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.PlcFaultSince">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.IoFaultSince">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.PlcFaultPresent">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.IoFaultPresent">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.ProgramAttached">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.OutputsEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.RunSwitchOn">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.OemProtectedBit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.ProgramChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.CurrentPlcMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.#ctor(AutomatedSolutions.Win.Comm.GE.Data.CpuStatus)">
            <summary>
            Copy constructor - initializes new instance with properties from parameter
            </summary>
            <param name="cs">instance to copy from</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.GetHashCode">
            <summary>
            Hash function for CpuStatus structure, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.CpuStatus.ToString">
            <summary>
            Converts the properites of this structure to the equivalent comma-delimited string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay">
            <summary>
            TimeOfDay Structure
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.op_Equality(AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay,AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay)">
            <summary>
            Overloaded '==' operator, compares values of all properties within structure
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>true if all properties are equal, else false</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.op_Inequality(AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay,AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay)">
            <summary>
            Overloaded '!=' operator, compares values of all properties within structure
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>true if all properties are equal, else false</returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.Second">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.Day">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.Month">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.Year">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.#ctor(AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay)">
            <summary>
            Copy constructor - initializes new instance with properties from parameter
            </summary>
            <param name="tod">instance to copy from</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.GetHashCode">
            <summary>
            Hash function for TimeOfDay structure, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Data.TimeOfDay.ToString">
            <summary>
            Converts the properites of this structure to the equivalent comma-delimited string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SYM_UNIT_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SEGMENT_SELECTOR_NAMES">
            <summary>
            See PACSystems Service Request Descriptions Version 0.01 - Appendix B
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec.segSel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec.extendedSegSel">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec.#ctor(AutomatedSolutions.Win.Comm.GE.Protocol.ExtendedSegmentSelector)">
            <summary>
            Assignment constructor
            </summary>
            <param name="extendedSegSel"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec.#ctor(System.Byte[],System.Int32)">
            <summary>
            Assignment constructor
            ONLY use this overload for symbol lookup.
            </summary>
            <param name="src"></param>
            <param name="srcOffset"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec.#ctor(AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec)">
            <summary>
            Copy constructor
            </summary>
            <param name="original"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec.SegSel">
            <summary>
            Segment Selector property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec.ExtendedSegSel">
            <summary>
            Extended Segment Selector property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.StructExtendedSegmentSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.StructSymbolHandleExtendedSegmentSelector.bit">
            <summary>
            Flag indicates the symbol is for discrete data
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.StructSymbolHandleExtendedSegmentSelector.handle">
            <summary>
            Handle provided via SYMBOL_LOOKUP request
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.StructSymbolHandleExtendedSegmentSelector.#ctor(System.Byte,System.UInt32)">
            <summary>
            
            </summary>
            <param name="bit"></param>
            <param name="handle"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.StructSymbolHandleExtendedSegmentSelector.Length">
            <summary>
            Number of bytes in this extended segment selector
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.StructSymbolHandleExtendedSegmentSelector.GetBytes">
            <summary>
            Returns bytes in this extended segment selector
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.StructSymbolHandleExtendedSegmentSelector.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.StructOffsetExtendedSegmentSelector.bit">
            <summary>
            Bit position to select bit within byte
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.StructOffsetExtendedSegmentSelector.offset">
            <summary>
            Byte offset
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.StructOffsetExtendedSegmentSelector.Bit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.StructOffsetExtendedSegmentSelector.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.StructOffsetExtendedSegmentSelector.Length">
            <summary>
            Number of bytes in this extended segment selector
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.StructOffsetExtendedSegmentSelector.GetBytes">
            <summary>
            Returns bytes in this extended segment selector
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.StructOffsetExtendedSegmentSelector.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.ExtendedSegmentSelector.code">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.ExtendedSegmentSelector.structure">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ExtendedSegmentSelector.#ctor(System.UInt16,AutomatedSolutions.Win.Comm.GE.Protocol.StructExtendedSegmentSelector)">
            <summary>
            
            </summary>
            <param name="xtndSegSel"></param>
            <param name="structXtndSegSel"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ExtendedSegmentSelector.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ExtendedSegmentSelector.Structure">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ExtendedSegmentSelector.Code">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ExtendedSegmentSelector.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes">
             <summary>
             Parses a GE tag down to it's individual components stores attributes in appropriate fields.
             
             Handles Symbolic, Register, and System tags.
             
             Register types require '%' prefix
             Symbolic types do not have a prefix.
             System types require '_' prefix.
            
             Supports the following register types/formats:
            		Types: 
            			%R,%AI,%AQ,%W,(%BM not available yet)
            		Formats:
            			R1, %R1 - Register type and starting number
            			R1.1, %R1.1 - Register type, starting number, and bit
             Supports the following discrete types/formats:
            		Types: 
            			%I,%Q,%M,%SA,%SB,%SC,%S,%T 
            		Formats:
            			I1, %I1 - Register type and starting number
            			
             </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.name">
            <summary>
            Unmodified tag name
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.sysType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.tagType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.elements">
            <summary>
            This is just here so a tag can be fully described by the TagAttributes structure
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.MemTypeStruct">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.MemTypeStruct.table">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.MemTypeStruct.segment">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.MemTypeStruct.sysType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.MemTypeStruct.#ctor(System.String,System.Byte,AutomatedSolutions.Win.Comm.GE.SystemType)">
            <summary>
            
            </summary>
            <param name="Table"></param>
            <param name="Segment"></param>
            <param name="SysType"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.MemTypeStruct.Table">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.MemTypeStruct.Segment">
            <summary>
            segment returns returns register type (between % and reference number)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.MemTypeStruct.SysType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="tagName"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.Elements">
            <summary>
            This is just a copy of Item.Elements that allows a tag to be fully specified by the TagAttributes structure
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.SysType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.TagType">
            <summary>
            Gets tag type 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.TagAttributes.TagName">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes">
            <summary>
            For symbolic tags Only
            Mostly attributes returned by SRP SYMBOL_LOOKUP command
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.coherencyCookie">
            <summary>
            Used in READ_ADDR_VAR and WRITE_ADDR_VAR service request for CoherencyCookie field
            Returned by SRP SYMBOL_LOOKUP service
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.plcXtndAddrRec">
            <summary>
            Returned by SRP SYMBOL_LOOKUP service
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.variableLength">
            <summary>
            Data Length in bytes
            Returned by SRP SYMBOL_LOOKUP service
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.unitType">
            <summary>
            Unit Type - describes atomic type
            Returned by SRP SYMBOL_LOOKUP service
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.unitDimension1">
            <summary>
            Array dimension 1
            Returned by SRP SYMBOL_LOOKUP service
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.unitDimension2">
            <summary>
            Array dimension 2
            Returned by SRP SYMBOL_LOOKUP service
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.tagNameNoIndex">
            <summary>
            Symbolic Tag Name
            Parsed from name. 
            Tag name only, does not include array indexes, bit specifiers, etc.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.tagNameNoBit">
            <summary>
            Parsed from name
            Tag name including array index, bit with bit specifier stripped.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.arrayIndex1D">
            <summary>
            Array Index for first array dimension
            Parsed from name. 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.arrayIndex2D">
            <summary>
            Array Index for second array dimension
            Parsed from name. 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.bitLevel">
            <summary>
            Flag is set if tag name ends in "x[0]" through "x[31]" 
            Parsed from name
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.bit">
            <summary>
            Bit specified in tag name ending in "x[0]" through "x[31]"
            Parsed from name
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.Parse(System.String)">
            <summary>
            Performs majority of device independent parsing. 
            Parsing specific to devices is handled in other methods from this class.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.CoherencyCookie">
            <summary>
            Cohernecy cookie returned by SYMBOL_LOOKUP
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.PlcXtndAddrRec">
            <summary>
            Returned by SYMBOL_LOOKUP command.
            Consists of bit flag indicator and handle.
            Bit flag indicator indicates the symbol is for discrete data
            handle is actually a pointer that is the starting address for the symbol
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.VariableLength">
            <summary>
            Returned by SYMBOL_LOOKUP command.
            Scalar tags: SymVariableLength = storage size.
            Array tags : SymVariableLength = storage size * SymUnitDimension1 [* SymUnitDimension2].
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.UnitType">
            <summary>
            Symbolic unit type.
            Returned by SYMBOL_LOOKUP command.
            This is the data type and corresponds to GE.Protocol.SYM_UNIT_TYPE enumeration.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.UnitDimension1">
            <summary>
            Array dimension 1 capacity.
            Returned by SYMBOL_LOOKUP command.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.UnitDimension2">
            <summary>
            Array dimension 2 capacity.
            Returned by SYMBOL_LOOKUP command.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.ArrayIndex1D">
            <summary>
            Array Dimension 1 specified in Item.HWTagName.
            Parsed from Item.HWTagName.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.ArrayIndex2D">
            <summary>
            Array Dimension 2 specified in Item.HWTagName.
            Parsed from Item.HWTagName.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.TagNameNoIndex">
            <summary>
            Tag name only, does not include array indexes, bit specifiers, etc.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.TagNameNoBit">
            <summary>
            Tag name including array index, bit with bit specifier stripped.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.IsArray">
            <summary>
            Computed based on array dimension capacities returned from SYMBOL_LOOKUP command.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.ElementSizeInBytes">
            <summary>
            Size in bytes for all atomic types
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.IsBitLevel">
            <summary>
            Flag indicates if tag is specified to bit level
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.Bit">
            <summary>
            Bit number if tag is specified to bit level
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SymbolicTagAttributes.IsBoolean">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTagAttributes">
            <summary>
            For reference tags only
            Mostly parsed from Item.HWTagName
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTagAttributes.segment">
            <summary>
            Segment ('%R', '%I', etc.)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTagAttributes.reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTagAttributes.Segment">
            <summary>
            segment returns returns register type (between % and reference number)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTagAttributes.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTagAttributes.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTagAttributes.#ctor(System.Byte,System.UInt32)">
            <summary>
            
            </summary>
            <param name="segment"></param>
            <param name="reference"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTagAttributes.Parse(System.String)">
            <summary>
            Performs majority of device independent parsing. 
            Parsing specific to devices is handled in other methods from this class.
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceType">
            <summary>
            Structure for storing reference type information
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceType.table">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceType.segment">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceType.sysType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceType.#ctor(System.String,System.Byte,AutomatedSolutions.Win.Comm.GE.SystemType)">
            <summary>
            
            </summary>
            <param name="Table"></param>
            <param name="Segment"></param>
            <param name="SysType"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceType.Table">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceType.Segment">
            <summary>
            segment returns returns register type (between % and reference number)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceType.SysType">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTypeLookup">
            <summary>
            Lookup table for reference types
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTypeLookup.dic">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTypeLookup.GetReferenceType(System.String,AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceType@)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="refType"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ReferenceTypeLookup.GetTableTypeCount">
            <summary>
            Returns the number of table types supported
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRTP_PDU_Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.REQUEST_MB_TRAFFIC_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.RESPONSE_MB_TRAFFIC_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRP_REQUEST_CODE">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailbox">
            <summary>
            RequestMailBox abstract base class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailbox.data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailbox.Seq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailbox.Typ">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailbox.SourceCPUSlot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailbox.DestCPUSlot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailbox.Pkt">
            <summary>
            Packet number 
            1-based of mailbox message within the packet sequence for a particular request.
            NOTE: This field is not used by the PLC for block transfers.
            (i.e. there is no limit on how many blocks can be transferred for a given request).
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailbox.Tot">
            <summary>
            Total packets comprising the request.
            NOTE: This field is not used by the PLC for block transfers.
            (i.e. there is no limit on how many blocks can be transferred for a given request).
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer.#ctor(System.Byte,AutomatedSolutions.Win.Comm.GE.Protocol.REQUEST_MB_TRAFFIC_TYPE,AutomatedSolutions.Win.Comm.GE.Protocol.SRP_REQUEST_CODE)">
            <summary>
            Assignment cobnstructor. 
            Use this overload for a single text buffer.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer.#ctor(System.Byte,AutomatedSolutions.Win.Comm.GE.Protocol.REQUEST_MB_TRAFFIC_TYPE,AutomatedSolutions.Win.Comm.GE.Protocol.SRP_REQUEST_CODE,System.Byte,System.Byte)">
            <summary>
            Assignment cobnstructor. 
            Use this overload for multiple text buffers.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer.Pkt">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer.Tot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer.Req">
            <summary>
            Request code
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer.Buflen">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer.Bufptr">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer.SetData(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailboxWithTextBuffer.GetData(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailbox.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailbox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailbox.#ctor(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailbox.Seq">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailbox.Typ">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailbox.SourceCPUSlot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailbox.DestCPUSlot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailbox.Pkt">
            <summary>
            Packet number 
            1-based of mailbox message within the packet sequence for a particular request.
            NOTE: This field is not used by the PLC for block transfers.
            (i.e. there is no limit on how many blocks can be transferred for a given request).
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailbox.Tot">
            <summary>
            Total packets comprising the request.
            NOTE: This field is not used by the PLC for block transfers.
            (i.e. there is no limit on how many blocks can be transferred for a given request).
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithoutTextBuffer.#ctor(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithoutTextBuffer.Pkt">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithoutTextBuffer.Tot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithoutTextBuffer.ErrorCode">
            <summary>
            Major Error Code
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithoutTextBuffer.MajorErrorCode">
            <summary>
            Major Error Code
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithoutTextBuffer.MinorErrorCode">
            <summary>
            Minor Error Code
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithoutTextBuffer.GetData(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithoutTextBuffer.GetData">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithTextBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithTextBuffer.#ctor(System.Byte[])">
            <summary>
            Assignment cobnstructor. 
            Use this overload for a single text buffer.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithTextBuffer.Pkt">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithTextBuffer.Tot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithTextBuffer.Buflen">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithTextBuffer.Bufptr">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.ResponseMailboxWithTextBuffer.GetPigStat">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPRequest">
            <summary>
            GE SRTP PDU Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPRequest.fixedData">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPRequest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPRequest.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="invokeID"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPRequest.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPRequest.PDUType">
            <summary>
            PDUType property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPRequest.Version">
            <summary>
            Version property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPRequest.InvokeID">
            <summary>
            InvokeID property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPRequest.DataLength">
            <summary>
            DataLength property
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPConnectRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPConnectRequest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPConnectRequest.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="invokeID"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPConnectRequest.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPSessionRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPSessionRequest.#ctor(System.UInt16,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="invokeID"></param>
            <param name="mbSeq"></param>
            <param name="cpuSlot"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPSessionRequest.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataRequest.mailbox">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataRequest.srp">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataRequest.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="invokeID"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataRequest.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataRequest.SetMailbox(AutomatedSolutions.Win.Comm.GE.Protocol.RequestMailbox)">
            <summary>
            
            </summary>
            <param name="mailbox"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataRequest.SetSRPRequest(AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest)">
            <summary>
            
            </summary>
            <param name="srpRequest"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse">
            <summary>
            GE SRTP Reply Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse.PDU_Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse.InvokeID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse.DataLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse.IsError">
            <summary>
            Returns True if response contains error
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse.MajorErrorCode">
            <summary>
            Major Error Number
            Valid only for traffic type 0xd1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse.MinorErrorCode">
            <summary>
            Minor Error Number
            Valid only for traffic type 0xd1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPResponse.ErrorCode">
            <summary>
            Complete error code packed into 16-bits.
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPConnectResponse">
            <summary>
            GE SRTP Reply Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPConnectResponse.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataResponse">
            <summary>
            GE SRTP  Register Session Reply Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataResponse.mb">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataResponse.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="reply"></param>	
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPDataResponse.Mailbox">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPSessionResponse">
            <summary>
            GE SRTP  Register Session Reply Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRTPSessionResponse.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="reply"></param>	
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest">
            <summary>
            GE SRP Request Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.fixedData">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.#ctor">
            <summary>
            Default contructor
            Required for abstract class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.#ctor(AutomatedSolutions.Win.Comm.GE.Protocol.SRP_REQUEST_CODE)">
            <summary>
            Assignment constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.HRev">
            <summary>
            HRev property
            Field #1 in SRP Header
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.RequestCode">
            <summary>
            RequestCode property
            Field #2 in SRP Header
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.LengthOfRequestData">
            <summary>
            LengthOfRequestData property
            In units of bytes, the length of ALL data associated with this request.
            The length does not include the bytes in this header.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.LengthOfThisBuffer">
            <summary>
            LengthOfThisBuffer property
            In units of bytes, the length of ALL data in this buffer.
            This includes the header and all data included in this buffer.
            It does not include data for this request that is sent to another buffer
            (e.g. another block in a block transfer)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.OffsetToNameField">
            <summary>
            OffsetToNameField property
            The number of bytes from the beginning of the text buffer/block to the nRev field.
            This offset will be 0 if no name is supplied with this request, 
            and therefore the nRev and name fields will not be present in the request.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.OffsetToDataField">
            <summary>
            OffsetToDataField property
            The number of bytes from the beginning of the text buffer/block to the dRev field.
            This offset will be 0 if no data is associated with this request, 
            and therefore the dRev and data fields will not be present in the request.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPRequest.Length">
            <summary>
            DataLength property
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse">
            <summary>
            GE SRP Response Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse.HRev">
            <summary>
            HRev property
            Field #1 in SRP Header
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse.RequestCode">
            <summary>
            RequestCode property
            Field #2 in SRP Header
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse.Checksum">
            <summary>
            Checksum property
            Field #3 in SRP Header
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse.LengthOfRequestData">
            <summary>
            LengthOfRequestData property
            In units of bytes, the length of ALL data associated with this request.
            The length does not include the bytes in this header.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse.LengthOfThisBuffer">
            <summary>
            LengthOfThisBuffer property
            In units of bytes, the length of ALL data in this buffer.
            This includes the header and all data included in this buffer.
            It does not include data for this request that is sent to another buffer
            (e.g. another block in a block transfer)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse.OffsetToNameField">
            <summary>
            OffsetToNameField property
            The number of bytes from the beginning of the text buffer/block to the nRev field.
            This offset will be 0 if no name is supplied with this request, 
            and therefore the nRev and name fields will not be present in the request.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse.OffsetToDataField">
            <summary>
            OffsetToDataField property
            The number of bytes from the beginning of the text buffer/block to the dRev field.
            This offset will be 0 if no data is associated with this request, 
            and therefore the dRev and data fields will not be present in the request.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPResponse.Length">
            <summary>
            DataLength property
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.GEFString">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.GEFString.s">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.GEFString.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.GEFString.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.GEFString.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.GEFString.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.GEFString.GetSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.recordSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.recordType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.dataType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.size">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.checksum">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.fileAttribMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.name">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.RecordSize">
            <summary>
            RecordSize property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.RecordType">
            <summary>
            RecordType property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.DataType">
            <summary>
            DataType property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.Size">
            <summary>
            DataType property
            </summary>    
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.Checksum">
            <summary>
            Checksum property
            </summary>    
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.FileAttribMask">
            <summary>
            FileAttribMask property
            </summary>    
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseDataRec.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseData">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseData.dRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseData.lengthOfData">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseData.numRecords">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseData.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseData.NumRecords">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponseData.GetDirResponseDataRec(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponse">
            <summary>
            GE SRP DIR Response Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponse.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponse.DirResponseData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirResponse.Length">
            <summary>
            Length property
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirRequest">
            <summary>
            GE SRP DIR Request Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirRequest.dirName">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirRequest.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirRequest.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirRequest.DirName">
            <summary>
            Starting directory name
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPDirRequest.Length">
            <summary>
            Length property
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequestData">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequestData.dRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequestData.symbolList">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequestData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequestData.DRev">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequestData.NumSymbols">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequestData.AddSymbol(System.String)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequestData.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequestData.GetSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequest">
            <summary>
            GE SRP SYMBOL_LOOKUP Request Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequest.programName">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequest.symbolLookupRequestData">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequest.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="programName"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequest.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequest.AddTag(System.String)">
            <summary>
            
            </summary>
            <param name="tagName"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupRequest.Length">
            <summary>
            Length property
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.addrRec">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.variableLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.unitType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.unitDimension1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.unitDimension2">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.AddrRec">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.VariableLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.UnitType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.UnitDimension1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseDataRec.UnitDimension2">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseData">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseData.dRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseData.coherencyCookie">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseData.numSymbols">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseData.symbolDataRecs">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseData.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseData.CoherencyCookie">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseData.NumSymbols">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponseData.GetSymbolLookupResponseDataRec(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponse">
            <summary>
            GE SRP Symbol Lookup Response Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponse.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponse.SymbolLookupResponseData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPSymbolLookupResponse.Length">
            <summary>
            Length property
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec.coherencyCookie">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec.dataType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec.readLength">
            <summary>
            Number of bytes to read
            Note 1: if bit offset field is non-zero, indicates the number of bits to read
            Note 2: for property pages, readLength may be 0, which indicates read all information associated with property page.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec.#ctor(System.UInt32,AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec,System.UInt32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec.CoherencyCookie">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec.DataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec.ReadLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrDataFmt2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrDataFmt2.dRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrDataFmt2.varList">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrDataFmt2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrDataFmt2.DRev">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrDataFmt2.NumVars">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrDataFmt2.AddVar(System.UInt32,AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec,System.UInt32)">
            <summary>
            
            </summary>
            <param name="coherencyCookie"></param>
            <param name="plcXtndAddrRec"></param>
            <param name="readLength"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrDataFmt2.AddVar(AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrDataFmt2.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.dRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.varList">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.dataList">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.DRev">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.NumVars">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.DataLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.AddVar(System.UInt32,AutomatedSolutions.Win.Comm.GE.Protocol.plc_xtnd_addr_rec,System.UInt32)">
            <summary>
            
            </summary>
            <param name="coherencyCookie"></param>
            <param name="plcXtndAddrRec"></param>
            <param name="writeLength"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.AddVar(AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.AddData(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrDataFmt2.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrVar2Request">
            <summary>
            GE SRP READ_ADDR_VAR_2 Request Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrVar2Request.readAddrVar2RequestData">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrVar2Request.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrVar2Request.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrVar2Request.AddVar(AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPReadAddrVar2Request.Length">
            <summary>
            Length property
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrVar2Request">
            <summary>
            GE SRP WRITE_ADDR_VAR_2 Request Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrVar2Request.writeAddrVar2RequestData">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrVar2Request.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrVar2Request.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrVar2Request.AddVar(AutomatedSolutions.Win.Comm.GE.Protocol.SRPVarAddrListRec)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrVar2Request.AddData(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.GE.Protocol.SRPWriteAddrVar2Request.Length">
            <summary>
            Length property
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Net.Driver">
            <summary>
            Driver enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Driver.TCP">
            <summary>
            Use for Modbus/TCP
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel">
            <summary>
            Use this channel for Modbus/TCP Master connectivity to Modbus/TCP Slave devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.WSAEWOULDBLOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.WSAETIMEDOUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.defaultPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.MAX_PACKET_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.int2float">
            <summary>
            
            </summary>	
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.driver">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.sequenceCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.waitHandles">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.connectDone">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.license">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.client">
            <summary>
            Reusable socket variable
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.#ctor(AutomatedSolutions.Win.Comm.MB.Master.Net.Driver)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="driver">
            Driver to use for this communications channel. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.Devices">
            <summary>
            Gets the DeviceCollection containing devices in the ASComm instance.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.Driver">
            <summary>
            Gets the driver type implemented by this channel
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.ItemSorter">
            <summary>
            Logic for sorting items by 1) HWTagType, 2) HWTagName
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.ReadExceptionStatus(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            Read Exception Status
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.ReportSlaveID(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            Report Slave ID
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.ReadFileRecord(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            Read File Record
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.GetCommEventCounter(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            Get Comm Event Counter
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.GetCommEventLog(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            Get Comm Event Log
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.ReadFIFOQueue(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            Read FIFO Queue
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.ReadRegisters(System.Collections.ArrayList,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            This function reads Holding (FC3) and Input (FC4) Registers.
            Function is optimized to minimize transactions across multiple items.
            </summary>
            <param name="itemList">ArrayList of Items</param>
            <param name="results">Array of Result</param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.ReadRegisterItems(System.Collections.ArrayList,System.Int32,System.Int16,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            This function handles items that can be optimized into a single packet.
            </summary>
            <param name="items">ArrayList of Items</param>
            <param name="register">Starting register</param>
            <param name="elements">Number of elements</param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.ReadRegisterItem(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            This function handles items that cannot be optimized into a single packet.
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.ReadDiscretes(System.Collections.ArrayList,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            This function reads Coils (FC1) and Discrete Inputs (FC2) Registers.
            Function is optimized to minimize transactions across multiple items.
            </summary>
            <param name="itemList"></param>
            <param name="results"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.Read(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.WriteRegisterItem(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.WriteDiscreteItem(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.WriteFileRecord(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.Write(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal write method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.Channel.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Net.DeviceCollectionEditor">
            <summary>
            Modbus/TCP Master Device Collection Editor Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.DeviceCollectionEditor.types">
            <summary>
            A Collection Editor for all public classes that inherit from Device
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.DeviceCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.DeviceCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.DeviceCollectionEditor.GetTypes">
            <summary>
            method to retrieve device types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket">
            <summary>
            Modbus Master Socket
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.defaultPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.transID">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.IncrementTransID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.GetCommEventCounter(System.String,System.Byte,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.GetCommEventLog(System.String,System.Byte,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.ReadExceptionStatus(System.String,System.Byte,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.ReadFIFOQueue(System.String,System.Byte,System.Int32,System.Int32,System.UInt16)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="fifoPointer"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.ReadCoils(System.String,System.Byte,System.Int32,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="addressType"></param>
            <param name="register"></param>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.ReadDiscreteInputs(System.String,System.Byte,System.Int32,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="addressType"></param>
            <param name="register"></param>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.ReadHoldingRegisters(System.String,System.Byte,System.Int32,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>Read Holding Registers - Modbus FC 3</summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="addressType"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="register"></param>
            <param name="elements"></param>
            <returns>Modbus RTU Reply PDU</returns>
            <exception cref="T:AutomatedSolutions.Win.Comm.ChannelException">Thrown when a channel exception occurs.</exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.DeviceException">Thrown when an exception code is returned from the hardware device.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown when a socket exception occurs.</exception>
            <exception cref="T:System.Exception">Thrown when no specialized exception is caught.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.ReadInputRegisters(System.String,System.Byte,System.Int32,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="addressType"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="register"></param>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.ReportSlaveID(System.String,System.Byte,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.WriteMultipleCoils(System.String,System.Byte,System.Int32,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="addressType"></param>
            <param name="register"></param>
            <param name="elements"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.WriteMultipleRegisters(System.String,System.Byte,System.Int32,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="addressType"></param>
            <param name="register"></param>
            <param name="elements"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.WriteSingleCoil(System.String,System.Byte,System.Int32,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="addressType"></param>
            <param name="register"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.WriteSingleRegister(System.String,System.Byte,System.Int32,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="addressType"></param>
            <param name="register"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.ReadFileRecord(System.String,System.Byte,System.Int32,System.Int32,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="fileNumber"></param>
            <param name="recordNumber"></param>
            <param name="recordLength"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.WriteFileRecord(System.String,System.Byte,System.Int32,System.Int32,System.UInt16,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="routePath"></param>
            <param name="unitID"></param>
            <param name="timeoutTransaction"></param>
            <param name="timeoutConnect"></param>
            <param name="fileNumber"></param>
            <param name="recordNumber"></param>
            <param name="recordLength"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.Message(System.String,AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command,System.Int32)">
            <summary>Performs the send and receive messaging</summary>
            <param name="routePath"></param>
            <param name="command"></param>
            <param name="timeoutTransaction"></param>
            <returns>Modbus RTU Reply</returns>
            <exception cref="T:AutomatedSolutions.Win.Comm.ChannelException">Thrown when a channel exception occurs.</exception>
            <exception cref="T:AutomatedSolutions.Win.Comm.DeviceException">Thrown when an exception code is returned from the hardware device.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown when a socket exception occurs.</exception>
            <exception cref="T:System.Exception">Thrown when no specialized exception is caught.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.WaitForMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown when buffer is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when an error occurrs when attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Socket has been closed.
            </exception>
            <param name="buffer"></param>
            <param name="totalBytesToReceive"></param>
            <param name="timeoutTransaction"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.DebugOutputPacketBytes(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="message"></param>
            <param name="data"></param>
            <param name="length"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Net.MbMasterSocket.DebugOutputPacketBytes(System.String,System.String,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="message"></param>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Serial.Driver">
            <summary>
            Driver enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Driver.Serial">
            <summary>
            Use serial communcations port
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Driver.TCP">
            <summary>
            Use TCP/IP encapsulation over Ethernet
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Driver.UDP">
            <summary>
            Use UDP/IP encapsulation over Ethernet
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel">
            <summary>
            Use this channel for Modbus/TCP Master connectivity to Modbus/TCP Slave devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.WSAEWOULDBLOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.WSAETIMEDOUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.PORT_NAME_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.PORT_SETTINGS_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.PORT_RTS_CONTROL_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.PORT_DTR_CONTROL_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.int2float">
            <summary>
            
            </summary>	
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.driver">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.serialPortSettingsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.serialPortNameChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.waitHandles">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.connectDone">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.license">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.driverChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.port">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.master">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.portName">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.portSettings">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.protocol">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.portRtsControl">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.portDtrControl">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.messageDelay">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.#ctor(AutomatedSolutions.Win.Comm.MB.Master.Serial.Driver)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="driver">
            Driver to use for this communications channel. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.#ctor(AutomatedSolutions.Win.Comm.MB.Master.ModbusProtocol)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="protocol">
            ModbusProtocol to use for this communications channel. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.#ctor(AutomatedSolutions.Win.Comm.MB.Master.ModbusProtocol,AutomatedSolutions.Win.Comm.MB.Master.Serial.Driver)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="protocol">
            ModbusProtocol to use for this communications channel. 
            </param>
            <param name="driver">
            Driver to use for this communications channel. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.#ctor(AutomatedSolutions.Win.Comm.MB.Master.ModbusProtocol,System.String,System.String)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="protocol">
            ModbusProtocol to use for this communications channel. 
            </param>
            <param name="portName">
            Serial port name (e.g. COM1, COM20, etc). 
            </param>
            <param name="portSettings">
            Serial port settings. Format [baud rate],[parity],[data bits],[stop bits]
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.#ctor(AutomatedSolutions.Win.Comm.MB.Master.ModbusProtocol,System.String,System.String,AutomatedSolutions.Win.Comm.SERIAL_PORT_RTS_CONTROL,AutomatedSolutions.Win.Comm.SERIAL_PORT_DTR_CONTROL)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="protocol">
            ModbusProtocol to use for this communications channel. 
            </param>
            <param name="portName">
            Serial port name (e.g. COM1, COM20, etc). 
            </param>
            <param name="portSettings">
            Serial port settings. Format [baud rate],[parity],[data bits],[stop bits]
            </param>
            <param name="portRtsControl">
            Serial port RTS control.
            </param>
            <param name="portDtrControl">
            Serial port DTR control.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.Devices">
            <summary>
            Gets the DeviceCollection containing devices in the ASComm instance.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.Driver">
            <summary>
            Gets the driver type implemented by this channel
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.PortName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.PortSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.Protocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.PortRtsControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.PortDtrControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.MessageDelay">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ListItemSorter">
            <summary>
            Logic for sorting items by 1) HWTagType, 2) HWTagName
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ItemSorter">
            <summary>
            Logic for sorting items by 1) HWTagType, 2) HWTagName
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.SetCommSettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ConvertPortToChannelException(AutomatedSolutions.Win.Comm.PortException.Exceptions)">
            <summary>
            
            </summary>
            <param name="portExceptionCode"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ConvertModbusToDeviceException(System.Int32)">
            <summary>
            
            </summary>
            <param name="modbusExceptionCode"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ReadExceptionStatus(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            FC 7 - Read Exception Status
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ReportSlaveID(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            FC 17 - Report Slave ID
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.GetCommEventCounter(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            FC 11 - Get Comm Event Counter
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.GetCommEventLog(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            FC 12 - Get Comm Event Log
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ReadFIFOQueue(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            FC 24 - Read FIFO Queue
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ReadRegisters(System.Collections.ArrayList,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            This function reads Holding (FC3) and Input (FC4) Registers.
            </summary>
            <param name="itemList">ArrayList of Items</param>
            <param name="results">Array of Result</param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.DoReadRegisters(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.MB.Master.Item},AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            This function handles items that can be optimized into a single packet.
            </summary>
            <param name="items">ArrayList of Items</param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ReadDiscretes(System.Collections.ArrayList,AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            This function reads Coils (FC1) and Discrete Inputs (FC2) Registers.
            Function is optimized to minimize transactions across multiple items.
            </summary>
            <param name="itemList"></param>
            <param name="results"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.DoReadDiscretes(System.Collections.Generic.List{AutomatedSolutions.Win.Comm.MB.Master.Item},AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            This function handles items that can be optimized into a single packet.
            </summary>
            <param name="items">ArrayList of Items</param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.ReadFileRecord(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.Result@,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            Read File Record
            </summary>
            <param name="item"></param>
            <param name="result"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.WriteFileRecord(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            Write File Record (FC21)
            </summary>
            <param name="item"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.Read(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal read method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.WriteRegisterItem(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.WriteDiscreteItem(AutomatedSolutions.Win.Comm.MB.Master.Item,AutomatedSolutions.Win.Comm.MB.Master.Device)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.Write(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@,AutomatedSolutions.Win.Comm.Device)">
            <summary>
            Internal write method, not available to external users
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
            <param name="device"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.Channel.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Serial.DeviceCollectionEditor">
            <summary>
            Siemens S7 Device Collection Editor Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Serial.DeviceCollectionEditor.types">
            <summary>
            A Collection Editor for all public classes that inherit from Device
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.DeviceCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.DeviceCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Serial.DeviceCollectionEditor.GetTypes">
            <summary>
            method to retrieve device types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Group">
            <summary>
            The Group class is used to logically group items with common characteristics together.
            Characteristic currently include Active status and Update Rate.
            The Group class contains a Items collection which stores the group's Items.
            The Device class supports the ISserializable and IDisposable interfaces.
            </summary>
            <remarks>
            Because this class has a thread that needs to be started by the constructor,
            it was created with the ISerializable interface so the SerializationInfo constructor is called.
            This means that serialization of elements needs to be handled manually.
            The GetObjectData function gathers data from the fields to be serialized prior to disposal
            and then the data is passed back to the serialization constructor when the object is recreated.
            </remarks>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Group.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Group.#ctor(System.Boolean,System.Int32)">
            <summary>
            Assignment constructor
            </summary>
            <param name="active">
            Indicates whether Group is active (scanning data points on hardware device). Default = true.
            </param>
            <param name="updateRate">
            The rate in milliseconds at which data points on hardware device should be scanned. Default = 500 mSec.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            De-serialization Constructor 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Group.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Group.Items">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Group.Refresh">
            <summary>
            Performs a synchronous Read on all items in group. 
            To perform a SyncRead on selected items, use the Device's SyncRead method.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Group.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.ItemCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Items property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ItemCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="ItemType"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ItemCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ItemCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Item">
            <summary>
            MB.Master.Item class
            
            The Item class is used to represent data areas in hardware devices (PLCs, instrumentation, etc.).
            The Item class supports the ISserializable and IDisposable interfaces.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.#ctor(AutomatedSolutions.Win.Comm.MB.Master.Item)">
            <summary>
            Copy constructor
            Use this constructor to create a new item and copy the contents from an existing item.
            </summary>
            <param name="item">Item to copy from.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.#ctor(System.String,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.TagType)">
            <summary>
            Assignment constructor
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            For Items that represent register data on hardware device, register data type defaults to 16-bit integer.
            To create an item that represents register data in a different format, use Item overload with HWDataType parameter.
            </summary>
            <param name="hwTagName">
            Hardware tag name describes Modbus register number. 
            Format dependes on Device.AddressType property.
            </param>
            <param name="elements">
            Number of contiguous elements.
            </param>
            <param name="hwTagType">
            Hardware tag type describes Modbus register type (holding register, input register, etc.).
            See TagType enumeration in Help for choices.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.#ctor(System.String,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.TagType,AutomatedSolutions.Win.Comm.MB.Master.DataType)">
            <summary>
            Assignment constructor
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            Use for Register types with data type other than 16-bit integer.
            </summary>
            <param name="hwTagName">
            Hardware tag name describes Modbus register number. 
            Format dependes on Device.AddressType property.
            </param>
            <param name="elements">
            Number of contiguous elements
            </param>
            <param name="hwTagType">
            Hardware tag type describes Modbus register type.
            Current choices: TagType.COIL, TagType.DISCRETE_INPUT, TagType.HOLDING_REGISTER, TagType.INPUT_REGISTER, TagType.EXCEPTION_STATUS, TagType.COMM_EVENT_COUNTER, TagType.COMM_EVENT_LOG, TagType.SLAVE_ID, TagType.FIFO_QUEUE
            </param>
            <param name="hwDataType">
            Hardware data type indicates storage format for hardware registers.
            Current choices: DataType.Int16, DataType.UInt16, DataType.BCD16, DataType.Int32, DataType.UInt32, DataType.BCD32, DataType.Single, DataType.String
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.#ctor(System.String,System.Int32,AutomatedSolutions.Win.Comm.MB.Master.TagType,AutomatedSolutions.Win.Comm.MB.Master.DataType,System.Int32)">
            <summary>
            Assignment constructor
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            Use for items that represent strings only.
            </summary>
            <param name="hwTagName">
            Hardware tag name describes Modbus register number. 
            Format dependes on Device.AddressType property.
            </param>
            <param name="elements">
            Number of contiguous elements
            </param>
            <param name="hwTagType">
            Hardware tag type describes Modbus register type.
            Current choices: TagType.COIL, TagType.DISCRETE_INPUT, TagType.HOLDING_REGISTER, TagType.INPUT_REGISTER, TagType.EXCEPTION_STATUS, TagType.COMM_EVENT_COUNTER, TagType.COMM_EVENT_LOG, TagType.SLAVE_ID, TagType.FIFO_QUEUE
            </param>
            <param name="hwDataType">
            Hardware data type indicates storage format for hardware registers.
            Current choices: DataType.Int16, DataType.UInt16, DataType.BCD16, DataType.Int32, DataType.UInt32, DataType.BCD32, DataType.Single, DataType.String
            </param>
            <param name="stringLength">
            String length.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Item.hwTagType">
            <summary>
            internal storage for HWTagType property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Item.hwDataType">
            <summary>
            internal storage for HWRegisterType property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Item.optimizeReads">
            <summary>
            Storage for OptimizeReads property.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Item.stringLength">
            <summary>
            Internal storage for StringLength property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Item.HWTagName">
            <summary>
            Gets or sets the hardware tag name property, required. Indicates the hardware tag name to associate with this Item instance. This field should correspond to a valid tag/register in your hardware device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Item.HWTagType">
            <summary>
            Gets or sets the hardware tag type property. 
            HWTagType represents the register type for this item on the hardware device. 
            AUTO is not supported for Modbus devices. 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Item.HWDataType">
            <summary>
            Gets or sets the hardware datatype property. 
            HWDataType represents the data type for this item on the hardware device. 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Item.OptimizeReads">
            <summary>
            Gets or sets flag indicating whether this item should be optimized along with other items into minimal number of Modbus transactions. 
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Item.StringLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Item.BytesPerElement">
            <summary>
            Returns number of bytes for each Values element
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Item.BytesTotal">
            <summary>
            Returns total number of bytes required for Values array
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.ModbusAddress(AutomatedSolutions.Win.Comm.MB.Master.AddressType)">
            <summary>
            Returns zero-based Modbus address based on device addressing.
            </summary>
            <param name="addressType"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.ConfigureValuesArray(System.Int32)">
            <summary>
            Configures the Values array for the specified hardware data type.
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.ConfigureValuesArray">
            <summary>
            Configures the Values array for the specified hardware data type.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.GetValueType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.GetSystemType">
            <summary>
            For internal use only. Returns the CLR system type that corresponds to the hardware data type for this item.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.GetStructuredValues(System.Object@)">
            <summary>
            Populates a class reference with structured data from the controller.
            </summary>
            <param name="o">
            Reference to object. 
            NOTE: Pass-by-reference parameters must be the same as the parameter type, so you must assign an instance of your UDT/PDT class to a variable of type Object to pass in as a parameter.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Item.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.ModbusProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.ModbusProtocol.RTU">
            <summary>
            Modbus RTU protocol
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.ModbusProtocol.ASCII">
            <summary>
            Modbus ASCII protocol
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster">
            <summary>
            Modbus RTU Serial Master class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.port">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.protocol">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.timeoutTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.timeoutConnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.#ctor(AutomatedSolutions.Win.Comm.MB.Master.ModbusProtocol)">
            <summary>
            
            </summary>
            <param name="mode"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.TimeoutTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.TimeoutConnect">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.Protocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.Port">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.MessageTcp(AutomatedSolutions.Win.Comm.MB.Master.Command,System.Int32,System.Int32)">
            <summary>
            Performs send and receive messaging over TCP port
            Serial/IP converter must be in packet mode (not break up packet) or comms errors will occur
            </summary>
            <param name="command"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <returns>Reply</returns>
            <exception cref="T:AutomatedSolutions.Win.Comm.PortException">Thrown when a communications exception occurs.</exception>.
            <exception cref="T:AutomatedSolutions.Win.Comm.MB.Master.ModbusException">Thrown when a Modbus exception code is received from slave device.</exception>.
            <exception cref="T:System.NotImplementedException">Thrown when Modbus function is not implemented</exception>
            <exception cref="T:System.ApplicationException">Thrown when no specialized exception is caught.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.MessageUdp(AutomatedSolutions.Win.Comm.MB.Master.Command,System.Int32,System.Int32)">
            <summary>
            Performs send and receive messaging over UDP port
            Serial/IP converter must be in packet mode (not break up packet) or comms errors will occur
            </summary>
            <param name="command"></param>
            <param name="timeoutTransaction">
            Transaction timeout value in mSec.
            </param>
            <param name="retries">
            If retries are used, each gets the full TimeoutTransaction time
            </param>
            <returns>Reply</returns>
            <exception cref="T:AutomatedSolutions.Win.Comm.PortException">Thrown when a communications exception occurs.</exception>.
            <exception cref="T:AutomatedSolutions.Win.Comm.MB.Master.ModbusException">Thrown when a Modbus exception code is received from slave device.</exception>.
            <exception cref="T:System.NotImplementedException">Thrown when Modbus function is not implemented</exception>
            <exception cref="T:System.ApplicationException">Thrown when no specialized exception is caught.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.MessageSerial(AutomatedSolutions.Win.Comm.MB.Master.Command,System.Int32,System.Int32)">
            <summary>
            Performs send and receive messaging over a serial port
            </summary>
            <param name="command">AutomatedSolutions.Win.Comm.MB.Master.Command</param>
            <param name="timeoutTransaction">Transaction timeout in milliseconds</param>
            <param name="retries">Number of retries before error is reported</param>
            <returns>AutomatedSolutions.Win.Comm.MB.Master.Reply</returns>
            <exception cref="T:AutomatedSolutions.Win.Comm.PortException">Thrown when a communications exception occurs.</exception>.
            <exception cref="T:AutomatedSolutions.Win.Comm.MB.Master.ModbusException">Thrown when a Modbus exception code is received from slave device.</exception>.
            <exception cref="T:System.NotImplementedException">Thrown when Modbus function is not implemented by library</exception>
            <exception cref="T:System.Exception">Thrown when no specialized exception is caught.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.Message(AutomatedSolutions.Win.Comm.MB.Master.Command,System.Int32,System.Int32,System.Int32)">
            <summary>Performs send and receive messaging</summary>
            <param name="command">AutomatedSolutions.Win.Comm.MB.Master.Command</param>
            <param name="timeoutTransaction">Transaction timeout in milliseconds</param>
            <param name="retries">Number of retries before error is reported</param>
            <param name="messageDelay">Delay in-between messages in milliseconds</param>
            <returns>AutomatedSolutions.Win.Comm.MB.Master.Reply</returns>
            <exception cref="T:AutomatedSolutions.Win.Comm.PortException">Thrown when a communications exception occurs.</exception>.
            <exception cref="T:AutomatedSolutions.Win.Comm.MB.Master.ModbusException">Thrown when a Modbus exception code is received from slave device.</exception>.
            <exception cref="T:System.NotImplementedException">Thrown when Modbus function is not implemented in library</exception>
            <exception cref="T:System.Exception">Thrown when no specialized exception is caught.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.ReadCoils(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Modbus FC 1
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.ReadDiscreteInputs(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Modbus FC 2
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.ReadHoldingRegisters(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Modbus FC 3
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.ReadInputRegisters(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Modbus FC 4
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.WriteSingleCoil(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Modbus FC 5
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <param name="data"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.WriteSingleRegister(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int16)">
            <summary>
            Modbus FC 6
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <param name="data"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.ReadExceptionStatus(System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            Modbus FC 7
            </summary>
            <param name="nodeAddress"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.GetCommEventCounter(System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            Modbus FC 11
            </summary>
            <param name="nodeAddress"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.GetCommEventLog(System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            Modbus FC 12
            </summary>
            <param name="nodeAddress"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.WriteMultipleCoils(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Int32,System.Int32,System.Int32,System.Boolean[])">
            <summary>
            Modbus FC 15
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <param name="data"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.WriteMultipleRegisters(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Modbus FC 16
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <param name="data"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.WriteMultipleRegisters(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Int32,System.Int32,System.Int32,System.Int16[])">
            <summary>
            Modbus FC 16
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <param name="data"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.WriteMultipleRegisters(System.Byte,AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Int32,System.Int32,System.Int32,System.UInt16[])">
            <summary>
            Modbus FC 16
            </summary>
            <param name="nodeAddress"></param>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <param name="data"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.ReportSlaveID(System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            Modbus FC 17
            </summary>
            <param name="nodeAddress"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.ReadFileRecord(System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Modbus FC 20</summary>
            <param name="nodeAddress">Modbus Node Address</param>
            <param name="fileNumber">File Number</param>
            <param name="recordNumber">Record Number</param>
            <param name="recordLength">Record Length in 16-bit integers</param>
            <param name="timeoutTransaction">Transaction Timeout in milliseconds</param>
            <param name="retries">Number of transaction retries before error is reported</param>
            <param name="messageDelay">Delay in-between messages in milliseconds</param>
            <returns>AutomatedSolutions.Win.Comm.MB.Master.Reply</returns>
            <exception cref="T:AutomatedSolutions.Win.Comm.PortException">Thrown when a communications exception occurs.</exception>.
            <exception cref="T:AutomatedSolutions.Win.Comm.MB.Master.ModbusException">Thrown when a Modbus exception code is received from slave device.</exception>.
            <exception cref="T:System.NotImplementedException">Thrown when Modbus function is not implemented in library</exception>
            <exception cref="T:System.Exception">Thrown when no specialized exception is caught.</exception>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.WriteFileRecord(System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Modbus FC 21
            </summary>
            <param name="nodeAddress"></param>
            <param name="fileNumber"></param>
            <param name="recordNumber"></param>
            <param name="recordLength"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.ReadFIFOQueue(System.Byte,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Modbus FC 24
            </summary>
            <param name="nodeAddress"></param>
            <param name="timeoutTransaction"></param>
            <param name="retries"></param>
            <param name="messageDelay"></param>
            <param name="fifoPointer"></param>
            <returns>Reply</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.SendTraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="eventType"></param>
            <param name="eventID"></param>
            <param name="message"></param>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.SendTraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="eventType"></param>
            <param name="eventID"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.ModbusMaster.SendTraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="eventType"></param>
            <param name="eventID"></param>
            <param name="message"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Helper">
            <summary>
            Modbus helper class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Helper.NormalizeAddress(AutomatedSolutions.Win.Comm.MB.Master.AddressType,AutomatedSolutions.Win.Comm.MB.Master.Function,System.Int32)">
            <summary>
            Accepts an address in any of the supported address types and returns the zero-based equivalent address for Modbus packet.
            </summary>
            <param name="addressType"></param>
            <param name="function"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Command">
            <summary>
            Modbus command abstract base class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Command.count">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Command.buffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Command.addressType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Command.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Command.Data">
            <summary>
            Returns reference to copy of data buffer
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Command.FunctionCode">
            <summary>
            Gets function code from Modbus command packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.Byte)">
            <summary>
            Adds byte to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.Byte[])">
            <summary>
            Adds array of bytes to message.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.UInt16)">
            <summary>
            Adds 16-bit unsigned int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.UInt16[])">
            <summary>
            Adds 16-bit unsigned int to message.
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.Int16)">
            <summary>
            Adds 16-bit int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.Int16[])">
            <summary>
            Adds 16-bit int to message.
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.UInt32)">
            <summary>
            Adds 32-bit unsigned int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.UInt32[])">
            <summary>
            Adds 32-bit unsigned int to message.
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.Int32)">
            <summary>
            Adds 32-bit int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.Int32[])">
            <summary>
            Adds 32-bit int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.Single)">
            <summary>
            Adds 32-bit float to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Add(System.Single[])">
            <summary>
            Adds 32-bit float to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.Finish">
            <summary>
            Virtual Finish Method
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.GetLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.ReadCoils(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32)">
            <summary>
            Modbus FNC 1
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.ReadDiscreteInputs(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.ReadHoldingRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32)">
            <summary>
            Modbus FNC 3
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.ReadInputRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32)">
            <summary>
            Modbus FNC 4
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.WriteSingleCoil(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Boolean)">
            <summary>
            Modbus FNC 5
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.WriteSingleRegister(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 6
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.ReadExceptionStatus">
            <summary>
            Modbus FNC 7
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.GetCommEventCounter">
            <summary>
            Modbus FNC 11
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.GetCommEventLog">
            <summary>
            Modbus FNC 12
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.ReportSlaveID">
            <summary>
            Modbus FNC 17
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.WriteMultipleCoils(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Boolean[])">
            <summary>
            Modbus FNC 15
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.WriteMultipleRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Modbus FNC 16
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.WriteMultipleRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Int16[])">
            <summary>
            Modbus FNC 16
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.ReadFileRecord(System.Int32,System.Int32,System.Int32)">
            <summary>
            Modbus FNC 20
            </summary>
            <param name="fileNumber"></param>
            <param name="recordNumber"></param>
            <param name="recordLength"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.WriteFileRecord(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Modbus FNC 21
            </summary>
            <param name="fileNumber"></param>
            <param name="recordNumber"></param>
            <param name="recordLength"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Command.ReadFIFOQueue(System.UInt16)">
            <summary>
            Modbus FNC 24
            </summary>
            <param name="fifoPointer"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand">
            <summary>
            Modbus RTU Command Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.Byte)">
            <summary>
            Add a byte to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.Byte[])">
            <summary>
            Adds array of bytes to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.Int16)">
            <summary>
            Add 16-bit integer to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.UInt16)">
            <summary>
            Add unsigned 16-bit integer to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.Int16[])">
            <summary>
            Add 16-bit integer array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.UInt16[])">
            <summary>
            Add 16-bit integer array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.UInt32)">
            <summary>
            Add 32-bit unsigned integer to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.Int32)">
            <summary>
            Add 32-bit integer to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.Int32[])">
            <summary>
            Add 32-bit integer array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.UInt32[])">
            <summary>
            Add 32-bit unsigned integer array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.Single)">
            <summary>
            Add 32-bit float to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Add(System.Single[])">
            <summary>
            Add 32-bit float array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.Finish">
            <summary>
            Fills in the Header count field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuCommand.CalcCRC(System.Byte[],System.Int32,System.Int32,System.Byte@,System.Byte@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="crcLo"></param>
            <param name="crcHi"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader">
            <summary>
            Modbus/TCP Header Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader.#ctor">
            <summary>
            Default Constructor, this is filled in by the reply packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor
            This overload accepts raw reply data and parses into Modbus/TCP header fields
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader.TransID">
            <summary>
            Transaction ID
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader.ProtocolID">
            <summary>
            Protocol ID
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader.Length">
            <summary>
            Length field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.TcpHeader.UnitID">
            <summary>
            Unit ID field
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand">
            <summary>
            Modbus/TCP Command Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.BUFFER_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.#ctor(System.Byte)">
            <summary>
            Assignment constructor
            </summary>
            <param name="unitID"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.transID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.FunctionCode">
            <summary>
            Gets function code from Modbus RTU command packet
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.TransID">
            <summary>
            Transaction ID
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.UnitID">
            <summary>
            Unit ID
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.ReadCoils(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32)">
            <summary>
            Modbus FNC 1
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.ReadDiscreteInputs(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.ReadHoldingRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32)">
            <summary>
            Modbus FNC 3
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.ReadInputRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int32)">
            <summary>
            Modbus FNC 4
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.WriteSingleCoil(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Boolean)">
            <summary>
            Modbus FNC 5
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.WriteSingleRegister(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 6
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.ReadExceptionStatus">
            <summary>
            Modbus FNC 7
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.ReportSlaveID">
            <summary>
            Modbus FNC 17
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.WriteMultipleCoils(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Boolean[])">
            <summary>
            Modbus FNC 15
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.TcpCommand.WriteMultipleRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Modbus FNC 16
            </summary>
            <param name="addressType"></param>
            <param name="startAddress"></param>
            <param name="quantity"></param>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.RtuSerialCommand">
            <summary>
            Modbus RTU Serial Master Command Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.RtuSerialCommand.BUFFER_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuSerialCommand.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuSerialCommand.#ctor(System.Byte)">
            <summary>
            Assignment constructor
            </summary>
            <param name="nodeAddress"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.RtuSerialCommand.NodeAddress">
            <summary>
            Modbus Node Address
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.RtuSerialCommand.FunctionCode">
            <summary>
            Gets function code from Modbus RTU command packet
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.RtuSerialCommand.Quantity">
            <summary>
            Gets quantity field from Modbus RTU command packet
            Only valid for Modbus functions 1, 2, 3, 4
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Reply">
            <summary>
            Modbus reply base class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Reply.buffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Reply.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Reply.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Reply.Data">
            <summary>
            Returns reference to copy of data buffer
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Reply.NodeAddress">
            <summary>
            Returns Function Code field of Modbus reply
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Reply.FunctionCode">
            <summary>
            Returns Function Code field of Modbus reply
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Reply.ByteCount">
            <summary>
            Returns Byte Count field of Modbus reply. 
            Byte Count is not a valid field for all Modbus reply packets, so use with discretion.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Reply.ExceptionCode">
            <summary>
            Returns Exception Code field of Modbus reply
            Only valid when an exception is reported by the reply packet (Function Code with MSB set)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Reply.IsException">
            <summary>
            Flag indicates if exception code returned
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.RtuReply">
            <summary>
            Modbus RTU Serial Reply Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.RtuReply.crcLo">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.RtuReply.crcHi">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.RtuReply.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.AsciiReply">
            <summary>
            Modbus ASCII Serial Reply Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.AsciiReply.lrc">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiReply.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.AsciiReply.ModbusAsciiEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiReply.ModbusAsciiEncoding.GetByte(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="srcOffset"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiReply.ModbusAsciiEncoding.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="srcOffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiReply.ModbusAsciiEncoding.GetBytes(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.BUFFER_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.lrc">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.#ctor(System.Byte)">
            <summary>
            
            </summary>
            <param name="nodeAddress"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.FunctionCode">
            <summary>
            Gets function code from Modbus ASCII command
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Quantity">
            <summary>
            Gets quantity field from Modbus ASCII command packet
            Only valid for Modbus functions 1, 2, 3, 4
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.BcdToDecimal(System.Byte)">
            <summary>
            Converts BCD8 or Hex to Byte
            </summary>
            <param name="bcd"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.Byte)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.Byte[])">
            <summary>
            
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.UInt16)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.UInt16[])">
            <summary>
            
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.Int16)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.Int16[])">
            <summary>
            
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.UInt32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.Int32[])">
            <summary>
            
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.Single)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Add(System.Single[])">
            <summary>
            
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.AsciiSerialCommand.Finish">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Model">
            <summary>
            Models enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Model.Modbus">
            <summary>
            Standard Modbus device
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.WriteCoilFunction">
            <summary>
            WriteCoilFunction enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.WriteCoilFunction.FC5">
            <summary>
            Write Single Coil - Modbus Function 5
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.WriteCoilFunction.FC15">
            <summary>
            Write Multiple Coils - Modbus Function 15
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.WriteRegisterFunction">
            <summary>
            WriteRegisterFunction enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.WriteRegisterFunction.FC6">
            <summary>
            Write Single Register - Modbus Function 6
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.WriteRegisterFunction.FC16">
            <summary>
            Write Multiple Registers - Modbus Function 16
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Device">
            <summary>
            Modbus Device Class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Device.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Device.#ctor(System.String)">
            <summary>
            RoutePath assignment constructor
            </summary>
            <param name="routePath">
            Communications route/path to a target hardware device.
            The RoutePath property describes the routing from the PC to the Modbus Slave device.
            The RoutePath property consists of three fields, one is required and two are optional.
            Format: IPAddress>[:IP Port][,Unit ID] (bracketed fields are optional).
            Where:
             IP Address is the IP Address of the Modbus/TCP device.
             IP Port is the IP Port that the slave device is listening on (Standard for Modbus TCP is 502).
             Unit ID is the Modbus or Modbus Plus node address of a bridged device.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Device.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            RoutePath and Timeout Assignment Constructor
            </summary>
            <param name="routePath">
            Communications route/path to a target hardware device.
            The RoutePath property describes the routing from the PC to the Modbus Slave device.
            The RoutePath property consists of three fields, one is required and two are optional.
            Format: IPAddress>[:IP Port][,Unit ID] (bracketed fields are optional).
            Where:
             IP Address is the IP Address of the Modbus/TCP device.
             IP Port is the IP Port that the slave device is listening on (Standard for Modbus TCP is 502).
             Unit ID is the Modbus or Modbus Plus node address of a bridged device.
            </param>
            <param name="timeoutConnect">The connection timeout value in milliseconds.</param>
            <param name="timeoutTrans">The transaction timeout value in milliseconds. </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Device.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.retries">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.maxDataBytesRead">
            <summary>
            Storage for MaxDataBytesRead property.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.maxDataBytesWrite">
            <summary>
            Storage for MaxDataBytesWrite property.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.wordSwapLong">
            <summary>
            Internal storage for WordSwapLong property.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.wordSwapFloat">
            <summary>
            Internal storage for WordSwapFloat property.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.addressType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.model">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.writeCoilFunction">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Device.writeRegisterFunction">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.Retries">
            <summary>
            Gets or sets the number of transaction retries before a failure is reported. 
            Default: 1.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.WordSwapLong">
            <summary>
            Indicates whether or not to swap words on long integers. 
            If true, words are swapped. 
            Default = false
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.WordSwapFloat">
            <summary>
            Indicates whether or not to swap words on floating points. 
            If true, words are swapped. 
            Default = false
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.WriteCoilFunction">
            <summary>
            Gets or sets the Modbus function used for writing coils on this device. 
            If your device supports Modbus function 15, use WriteCoilFunction.FC15. 
            Most devices support both functions for writing coils; some devices may only support one or the other. 
            Default: WriteCoilFunction.FC15.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.WriteRegisterFunction">
            <summary>
            Gets or sets the Modbus function used for writing registers on this device. 
            If your device supports Modbus function 16, use WriteRegisterFunction.FC16. 
            Most devices support both functions for writing registers; some devices may only support one or the other. 
            Default: WriteRegisterFunction.FC16.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.MaxDataBytesRead">
            <summary>
            Gets or sets the maximum number of data bytes for read transactions. 
            Default: 250.
            Modbus protocol supports 250 maximum. 
            Some slave devices do not support the Modbus maximum, consult your slave device's documentation to determine maximum supported read block size."
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.MaxDataBytesWrite">
            <summary>
            Gets or sets the maximum number of data bytes for write transactions. 
            Default: 246.
            Modbus protocol supports 246 maximum. 
            Some slave devices do not support the Modbus maximum, consult your slave device's documentation to determine maximum supported write block size."
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.AddressType">
            <summary>
            Gets or sets the node address or routing path information that must be supplied to address the target device.
            Refer to hardware device memeory map to determine addressing system. 
            Choices are MODICON_5_DIGIT (1, 1xxxx, 3xxxx, 4xxxx), MODICON_6_DIGIT (x, 1xxxxx, 3xxxxx, 4xxxxx), ZERO_BASED, or ONE_BASED.")]
            Default: AddressType.ONE_BASED
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.RoutePath">
            <summary>
            Gets or sets the node address or routing path information that must be supplied to address the target device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.Groups">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.Model">
            <summary>
            Gets or sets the processor model represented by this device.
            Default: Model.Modbus.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.UnitID">
            <summary>
            Returns unit ID number from route path.
            For IP protocols only.
            Default: 1
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Device.NodeAddress">
            <summary>
            Returns Modbus node address number from route path.
            For serial protocol's only.
            Default: 1
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Device.SimRead(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for read calls
            </summary>
            <param name="items"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Device.SimWrite(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for write calls
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Device.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Device.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.GroupCollectionEditor">
            <summary>
            This class provides type information for designtime and runtime collection editors
            An associated attribute is added to the enclosing class' Groups property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.GroupCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.GroupCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.GroupCollectionEditor.GetTypes">
            <summary>
            method to retrieve channel types
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.TagType">
            <summary>
            User-supplied hardware tag types for Modbus Devices
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.COIL">
            <summary>
            Coil (Discrete Output)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.DISCRETE_INPUT">
            <summary>
            Discrete Input (Read Only)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.HOLDING_REGISTER">
            <summary>
            Holding (Output) Register
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.INPUT_REGISTER">
            <summary>
            Input Register (Read Only)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.EXCEPTION_STATUS">
            <summary>
            Exception Status (Read Only)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.COMM_EVENT_COUNTER">
            <summary>
            Comm Event Counter (Read Only)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.COMM_EVENT_LOG">
            <summary>
            Comm Event Log (Read Only)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.SLAVE_ID">
            <summary>
            Slave ID (Read Only)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.FIFO_QUEUE">
            <summary>
            FIFO Queue (Read Only)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.TagType.FILE_RECORD">
            <summary>
            File Record (Read File Record and Write File Record)
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Function">
            <summary>
            Supported Modbus functions
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.AddressType">
            <summary>
            Supported address types 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.AddressType.MODICON_5_DIGIT">
            <summary>
            Modicon Five Digit Addressing (1, 1xxx1, 3xxx1,4xxx1)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.AddressType.MODICON_6_DIGIT">
            <summary>
            Modicon Six Digit Addressing (1, 1xxxx1, 3xxxx1,4xxxx1)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.AddressType.ZERO_BASED">
            <summary>
            Zero-based addressing (all register ranges start at 0)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.AddressType.ONE_BASED">
            <summary>
            One-based addressing (all register ranges start at 1)
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.DataType">
            <summary>
            Supported register data types 
            Only applies to registers, does not apply to discrete and other types.
            Since Modbus tag names do not include type information, AUTO is not supported.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.DataType.Int16">
            <summary>
            16-bit Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.DataType.UInt16">
            <summary>
            16-bit Unsigned Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.DataType.BCD16">
            <summary>
            16-bit BCD
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.DataType.Int32">
            <summary>
            32-bit Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.DataType.UInt32">
            <summary>
            32-bit Unsigned Integer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.DataType.BCD32">
            <summary>
            32-bit BCD
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.DataType.Single">
            <summary>
            32-Bit Float
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.DataType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command">
            <summary>
            Modbus command base class
            *** Most methods are virtual because this class will eventually handle RTU and ASCII ***
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.count">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.buffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.addressType">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Data">
            <summary>
            Returns reference to copy of data buffer
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.NormalizeMemStart(AutomatedSolutions.Win.Comm.MB.Master.AddressType,AutomatedSolutions.Win.Comm.MB.Master.Function,System.Int32)">
            <summary>
            Accepts an address in any of the supported address types and returns the zero-based equivalent address for Modbus packet.
            </summary>
            <param name="AddressType"></param>
            <param name="Function"></param>
            <param name="MemStart"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.Byte)">
            <summary>
            Adds byte to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.Byte[])">
            <summary>
            Adds array of bytes to message.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.UInt16)">
            <summary>
            Adds 16-bit unsigned int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.UInt16[])">
            <summary>
            Adds 16-bit unsigned int to message.
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.Int16)">
            <summary>
            Adds 16-bit int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.Int16[])">
            <summary>
            Adds 16-bit int to message.
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.UInt32)">
            <summary>
            Adds 32-bit unsigned int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.UInt32[])">
            <summary>
            Adds 32-bit unsigned int to message.
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.Int32)">
            <summary>
            Adds 32-bit int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.Int32[])">
            <summary>
            Adds 32-bit int to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.Single)">
            <summary>
            Adds 32-bit float to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Add(System.Single[])">
            <summary>
            Adds 32-bit float to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.Finish">
            <summary>
            Virtual Finish Method
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Command.GetLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply">
            <summary>
            Modbus reply base class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply.BUFFER_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply.count">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply.buffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply.FunctionCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply.ExceptionCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply.ByteCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply.Add(System.Byte[])">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.Reply.Add(System.Byte[],System.UInt16)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
            <param name="src"></param>
            <param name="length"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header">
            <summary>
            Modbus/TCP Header Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header.#ctor">
            <summary>
            Default Constructor, this is filled in by the reply packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header.#ctor(System.Byte[])">
            <summary>
            Assignment Constructor
            This overload accepts raw reply data and parses into Modbus/TCP header fields
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header.TransID">
            <summary>
            Transaction ID
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header.ProtocolID">
            <summary>
            Protocol ID
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header.Length">
            <summary>
            Length field
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Header.UnitID">
            <summary>
            Unit ID field
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command">
            <summary>
            Modbus/TCP Command Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.BUFFER_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.#ctor(System.Byte,System.Int16)">
            <summary>
            Assignment constructor
            </summary>
            <param name="unitID"></param>
            <param name="transID"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.transID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.FunctionCode">
            <summary>
            Gets function code from Modbus RTU command packet
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.TransID">
            <summary>
            Transaction ID
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.UnitID">
            <summary>
            Unit ID
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.ReadCoils(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 1
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.ReadDiscreteInputs(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.ReadHoldingRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 3
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.ReadInputRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 4
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.WriteSingleCoil(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Boolean)">
            <summary>
            Modbus FNC 5
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.WriteSingleRegister(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 6
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.ReadExceptionStatus">
            <summary>
            Modbus FNC 7
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.ReportSlaveID">
            <summary>
            Modbus FNC 17
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.WriteMultipleCoils(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Modbus FNC 15
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.WriteMultipleRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Modbus FNC 16
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.ReadFileRecord(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="fileNumber"></param>
            <param name="recordNumber"></param>
            <param name="recordLength"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.TCP.Command.WriteFileRecord(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="fileNumber"></param>
            <param name="recordNumber"></param>
            <param name="recordLength"></param>
            <param name="data"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command">
            <summary>
            Modbus RTU Command Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.BUFFER_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.FunctionCode">
            <summary>
            Gets function code from Modbus command packet
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.Byte[])">
            <summary>
            Adds array of bytes to message.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.Byte)">
            <summary>
            Add a byte to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.Int16)">
            <summary>
            Add 16-bit integer to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.UInt16)">
            <summary>
            Add unsigned 16-bit integer to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.Int16[])">
            <summary>
            Add 16-bit integer array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.UInt16[])">
            <summary>
            Add 16-bit integer array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.UInt32)">
            <summary>
            Add 32-bit unsigned integer to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.Int32)">
            <summary>
            Add 32-bit integer to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.Int32[])">
            <summary>
            Add 32-bit integer array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.UInt32[])">
            <summary>
            Add 32-bit unsigned integer array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.Single)">
            <summary>
            Add 32-bit float to message
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Add(System.Single[])">
            <summary>
            Add 32-bit float array to message
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.Finish">
            <summary>
            Fills in the Header count field
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.ReadCoils(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 1
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.ReadDiscreteInputs(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.ReadHoldingRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 3
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.ReadInputRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 4
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.WriteSingleCoil(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Boolean)">
            <summary>
            Modbus FNC 5
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.WriteSingleRegister(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16)">
            <summary>
            Modbus FNC 6
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.ReadExceptionStatus">
            <summary>
            Modbus FNC 7
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.GetCommEventCounter">
            <summary>
            Modbus FNC 11
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.GetCommEventLog">
            <summary>
            Modbus FNC 12
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.ReportSlaveID">
            <summary>
            Modbus FNC 17
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.WriteMultipleCoils(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Modbus FNC 15
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.WriteMultipleRegisters(AutomatedSolutions.Win.Comm.MB.Master.AddressType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Modbus FNC 16
            </summary>
            <param name="addressType"></param>
            <param name="memStart"></param>
            <param name="quantity"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.ReadFileRecord(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="fileNumber"></param>
            <param name="recordNumber"></param>
            <param name="recordLength"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.WriteFileRecord(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="fileNumber"></param>
            <param name="recordNumber"></param>
            <param name="recordLength"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Command.ReadFIFOQueue(System.UInt16)">
            <summary>
            Modbus FNC 24
            </summary>
            <param name="fifoPointer"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Reply">
            <summary>
            Modbus RTU Reply Class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Reply.LENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Reply.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="replyData"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Reply.FunctionCode">
            <summary>
            Returns Function Code field of Modbus reply
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Reply.ByteCount">
            <summary>
            Returns Byte Count field of Modbus reply. 
            Byte Count is not a valid field for all Modbus reply packets, so use with discretion.
            FC 20: Returns Response Data Length (bytes)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Reply.ExceptionCode">
            <summary>
            Returns Exception Code field of Modbus reply
            Only valid when an exception is reported by the reply packet (Function Code with MSB set)
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.MB.Master.Protocol.RTU.PDU.Reply.Data">
            <summary>
            Returns reference to copy of data buffer
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Port.portName">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Port.portNameChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Port.timeoutTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Port.PortName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Port.TimeoutTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Port.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Port.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Port.Send(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Port.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ComPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ComPort.port">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ComPort.baudRate">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ComPort.dataBits">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ComPort.parity">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ComPort.stopBits">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ComPort.rtsControl">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ComPort.dtrControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ComPort.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ComPort.BaudRate">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ComPort.DataBits">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ComPort.Parity">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ComPort.StopBits">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ComPort.RtsControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ComPort.DtrControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ComPort.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ComPort.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ComPort.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ComPort.Send(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ComPort.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ComPort.ReceiveTo(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ComPort.ReceiveLine(System.Int32)">
            <summary>
            This is used for ASCII over serial port.
            </summary>
            <returns></returns>
            <param name="timeout"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ComPort.SetCommTimeouts">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.TcpPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpPort.WSAEWOULDBLOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpPort.WSAETIMEDOUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpPort.defaultRemotePort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpPort.connectInProcess">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpPort.connectDone">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpPort.targetEndPoint">
            <summary>
            Temporary storage for endpoint when connected.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpPort.currentEndPoint">
            <summary>
            Temporary storage for endpoint when connected.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpPort.s">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpPort.timeoutConnect">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.TcpPort.TimeoutConnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.FlushInBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.SetEndPoint(System.String)">
            <summary>
            Parses routePath and stores IP address and port in an EndPoint;
            </summary>
            <param name="routePath"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.ConnectCallback(System.IAsyncResult)">
            <summary>
            Handles the completion of the prior asynchronous connect call.
            The socket is passed via the objectState paramater of BeginConnect().
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.IsValid(System.Net.Sockets.Socket)">
            <summary>
            Tests socket validity
            </summary>
            <returns>
            True if (socket != null) and (socket.Handle != -1), else false
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.IsConnected">
            <summary>
            Tests connection status
            </summary>
            <returns>
            True if socket is valid and writable, else false
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.IsNewEndPoint(System.String,System.Int32)">
            <summary>
            Test to see if Address, Port are new endpoint
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.IsNewEndPoint(System.Net.IPEndPoint)">
            <summary>
            Test to see if targetEndPoint == currentEndPoint
            </summary>
            <param name="targetEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.Send(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.WaitForMessage(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown when buffer is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Thrown when an error occurrs when attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Socket has been closed.
            </exception>
            <param name="buffer"></param>
            <param name="offset">Buffer offset index</param>
            <param name="totalBytesToReceive"></param>
            <param name="timeoutTransaction"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpPort.SetTransactionTimeout(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.UdpPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.UdpPort.defaultRemotePort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.UdpPort.defaultLocalPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.UdpPort.endPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.UdpPort.udp">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.UdpPort.SetEndPoint(System.String)">
            <summary>
            Parses routePath and stores IP address and port in an EndPoint;
            </summary>
            <param name="routePath"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.UdpPort.IsValid(System.Net.Sockets.Socket)">
            <summary>
            Tests socket validity
            </summary>
            <param name="udp"></param>
            <returns>
            True if (socket != null) and (socket.Handle != -1), else false
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.UdpPort.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.UdpPort.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.UdpPort.Send(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.UdpPort.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SerialPortEx">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SerialPortEx.CommTimeouts">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.CommTimeouts.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="readIntervalTimeout"></param>
            <param name="readTotalTimeoutMultiplier"></param>
            <param name="readTotalTimeoutConstant"></param>
            <param name="writeTotalTimeoutMultiplier"></param>
            <param name="writeTotalTimeoutConstant"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="portName"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.#ctor(System.ComponentModel.IContainer)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="portName"></param>
            <param name="baudRate"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.#ctor(System.String,System.Int32,System.IO.Ports.Parity)">
            <summary>
            
            </summary>
            <param name="portName"></param>
            <param name="baudRate"></param>
            <param name="parity"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)">
            <summary>
            
            </summary>
            <param name="portName"></param>
            <param name="baudRate"></param>
            <param name="parity"></param>
            <param name="dataBits"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            
            </summary>
            <param name="portName"></param>
            <param name="baudRate"></param>
            <param name="parity"></param>
            <param name="dataBits"></param>
            <param name="stopBits"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.SetRtsControl(AutomatedSolutions.Win.Comm.SERIAL_PORT_RTS_CONTROL)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.SetDtrControl(AutomatedSolutions.Win.Comm.SERIAL_PORT_DTR_CONTROL)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.SetCommTimeouts(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeoutTransaction"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.SerialPortEx.SetCommTimeouts(AutomatedSolutions.Win.Comm.SerialPortEx.CommTimeouts)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.PortException.Exceptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.PortException.exceptionCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.PortException.#ctor(AutomatedSolutions.Win.Comm.PortException.Exceptions)">
            <summary>
            
            </summary>
            <param name="exceptionCode"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.PortException.ExceptionCode">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Protocol.Command">
            <summary>
             Message base class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Protocol.Command.buffer">
            <summary>
            Internal storage for Data property, length is determined by value passed into constructor.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Protocol.Command.count">
            <summary>
            Internal storage for Count property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Protocol.Command.Count">
            <summary>
            Contains the number of bytes in the command 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Clear">
            <summary>
            Clears the command buffer and resets count
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.SetAt(System.Int32,System.Byte)">
            <summary>
            Sets the array element at the specified index
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Protocol.Command.Data">
            <summary>
            Read-only property
            Returns a reference to the internal buffer.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Finish">
            <summary>
            Finish performs any end of packet updates to data, 
            such as updating a count field in the middle of the packet based on total packet size,
            or, it might do nothing at all.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.#ctor(System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.Byte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.SByte)">
            <summary>
            Build a message by adding bytes sequentially
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.Byte[],System.Int32)">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.Byte[])">
            <summary>
            Build a message by adding an array of bytes
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.UInt16)">
            <summary>
            This overload accepts a ushort value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.Int16)">
            <summary>
            This overload accepts a short value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.Int32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.UInt32)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.Int64)">
            <summary>
            This overload accepts a uint value
            For little-endian only
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.UInt64)">
            <summary>
            This overload accepts a uint value
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Protocol.Command.Add(System.String)">
            <summary>
            This overload adds a string to buffer without manipulating byte order
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Device">
            <summary>
            Class from which all devices are derived
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.thisLock">
            <summary>
            Transaction synchronization object
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.parent">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.groupCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.tag">
            <summary>
            Internal storage for Tag property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.simulate">
            <summary>
            Internal storage for simulate property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.description">
            <summary>
            Internal storage for Description property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.label">
            <summary>
            Internal storage for Label property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.routePath">
            <summary>
            Internal storage for RoutePath property 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.timeoutConnect">
            <summary>
            Internal storage for TimeoutConnect property 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.timeoutTransaction">
            <summary>
            Internal storage for TimeoutTransaction property 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.disposed">
            <summary>
            Used in support of the IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.transactions">
            <summary>
            Internal storage for Transactions property 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.errors">
            <summary>
            Internal storage for Errors property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.counter">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.groups">
            <summary>
            Internal storage for groups collection 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.DefaultTimeoutConnect">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.DefaultTimeoutTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.IsDisposing">
            <summary>
            Tests channel to determine whether the Channel's disposed method was called
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.Parent">
            <summary>
            Gets parent object
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.Groups">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.Simulate">
            <summary>
            Simulate property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.Label">
            <summary>
            Gets or sets the label that is used to identify the component at runtime. This property cannot be blank and must be unique.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.Description">
            <summary>
            Gets or sets the (informational) description to store with this component. This property is optional and any alphanumeric value is allowed.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.RoutePath">
            <summary>
            Gets or sets the node address or routing path information that must be supplied to address the target device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.TimeoutConnect">
            <summary>
            Gets or sets the connection timeout value in milliseconds. Applies to TCP/IP and connected devices only.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.TimeoutTransaction">
            <summary>
            Gets or sets the transaction timeout value in milliseconds.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.Transactions">
            <summary>
            Gets the transaction counter value.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.Tag">
            <summary>
            Gets or sets user-defined data associated with the component.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.Errors">
            <summary>
            Gets the error counter value.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.BeginRead(AutomatedSolutions.Win.Comm.Item,AutomatedSolutions.Win.Comm.Result@,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous multi-item read using BeginInvoke
            </summary>
            <param name="item">
            The Item to read. 
            </param>
            <param name="result">
            A reference to an unassigned Result object. 
            </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the transaction is complete. 
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular asynchronous request from other requests. 
            </param>
            <returns>
            An IAsyncResult object that stores state information and any user defined data for this asynchronous operation. 
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.EndRead(AutomatedSolutions.Win.Comm.Result@,System.IAsyncResult)">
            <summary>
            Asynchronous multi-item read EndInvoke
            </summary>
            <param name="result">
            Transaction result.
            See Result struct in Help system.
            </param>
            <param name="asyncResult">
            An IAsyncResult object that stores state information and any user defined data for this asynchronous operation. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.Read(AutomatedSolutions.Win.Comm.Item,AutomatedSolutions.Win.Comm.Result@)">
            <summary>
            Performs a synchronous read operation on a single item.
            </summary>
            <param name="item">
            Item to read.
            </param>
            <param name="result">
            Transaction result.
            See Result struct in Help system.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.Read(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Performs a synchronous (blocking) read on an item array
            </summary>
            <remarks>
            The Read method can be used to read a block of items without adding the items to a group.
            </remarks>
            <returns>
            No return value.
            </returns>
            <param name="items">
            Array of Items to read.
            </param>
            <param name="results">
            Array of transaction results.
            See Result struct in Help system.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.BeginRead(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous multi-item read using BeginInvoke
            </summary>
            <param name="items">
            Array of Items to read.
            </param>
            <param name="results">
            Array of unassigned Results, one Result per Item. 
            </param>
            <param name="callback">
            The Device.AsyncReadDelegate Delegate
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular asynchronous request from other requests.
            </param>
            <returns>
            An IAsyncResult that stores state information and any user defined data for this asynchronous operation. 
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.EndRead(AutomatedSolutions.Win.Comm.Result[]@,System.IAsyncResult)">
            <summary>
            Asynchronous multi-item read EndInvoke
            </summary>
            <param name="results">
            Array of unassigned Results, one Result per Item.
            </param>
            <param name="asyncResult">
            An IAsyncResult that stores state information and any user defined data for this asynchronous operation. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.Write(AutomatedSolutions.Win.Comm.Item,System.Object,AutomatedSolutions.Win.Comm.Result@)">
            <summary>
            Performs a synchronous write operation on a single item.
            </summary>
            <param name="item">
            Item to write.
            </param>
            <param name="val">
            Value(s) to write. 
            Since an Item can represent one or more values, based on Elements property, val can represent a single value, or an array of values.
            </param>
            <param name="result">
            
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.BeginWrite(AutomatedSolutions.Win.Comm.Item,System.Object,AutomatedSolutions.Win.Comm.Result@,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous single-item Write BeginInvoke
            </summary>
            <param name="item">
            Item to write.
            </param>
            <param name="val">
            Value(s) to write. 
            Since an Item can represent one or more values, based on Elements property, val can represent a single value, or an array of values.
            </param>
            <param name="result">
            Transaction result.
            See Result struct in Help system.
            </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the transaction is complete. 
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular asynchronous request from other requests. 
            </param>
            <returns>
            An IAsyncResult that stores state information and any user defined data for this asynchronous operation. 
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.EndWrite(AutomatedSolutions.Win.Comm.Result@,System.IAsyncResult)">
            <summary>
            Asynchronous single-item Write EndInvoke
            </summary>
            <param name="result">
            Transaction result.
            See Result struct in Help system.
            </param>
            <param name="asyncResult">
            An IAsyncResult that stores state information and any user defined data for this asynchronous operation. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.Write(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Performs a synchronous write operation on the items supplied to the items parameter
            </summary>
            <param name="items">
            Array of items to write.
            </param>
            <param name="vals">
            Array of values to write.
            </param>
            <param name="results">
            Array of transaction results.
            See Result struct in Help system.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.BeginWrite(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous multi-item Write BeginInvoke
            </summary>
            <param name="items">
            Array of items to write.
            </param>
            <param name="vals">
            Array of values to write.
            </param>
            <param name="results">
            Array of transaction results.
            See Result struct in Help system.
            </param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.EndWrite(AutomatedSolutions.Win.Comm.Result[]@,System.IAsyncResult)">
            <summary>
            Asynchronous multi-item Write EndInvoke
            </summary>
            <param name="results"></param>
            <param name="asyncResult"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.SimRead(AutomatedSolutions.Win.Comm.Item[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for read calls
            </summary>
            <param name="items"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.SimWrite(AutomatedSolutions.Win.Comm.Item[],System.Object[],AutomatedSolutions.Win.Comm.Result[]@)">
            <summary>
            Simulation routine for write calls
            </summary>
            <param name="items"></param>
            <param name="values"></param>
            <param name="results"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.InvokeDelegate(System.Delegate,System.Object[])">
            <summary>
            This checks for GUI application
            If GUI application, invoke is used to avoid cross-threaded UI operations
            Else, handler delegate is called directly
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.FireError(AutomatedSolutions.Win.Comm.DeviceEventArgs)">
            <summary>
            Use this overload to fire events for Device exceptions
            </summary>
            <param name="evArgs"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.ClearCounters">
            <summary>
            Clears transaction and error counters
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.Device.errorEvent">
            <summary>
            Internal storage for Event to indicate that an error has occurred
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.Device.Error">
            <summary>
            Event to indicate that item data has changed
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Device.AsyncReadDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Device.AsyncReadDelegateSingle">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Device.AsyncWriteDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Device.AsyncWriteDelegateSingle">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Device.ErrorEventHandler">
            <summary>
            Delegate for error event
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
            <remarks>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly or indirectly by a user's code. 
            Managed and unmanaged resources can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </remarks>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Device.GroupCollection">
            <summary>
            Item Collection
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Device.GroupCollection.owner">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.#ctor(AutomatedSolutions.Win.Comm.Device)">
            <summary>
            The one and only construcot
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.GroupCollection.Item(System.Int32)">
            <summary>
            The CollectionEditor will determine the type of objects to be created by
            looking at the property type of the following method. CollectionEditor
            internally uses reflection to get the PropertyInfo for the "Item" property. 
            This method must be public.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.GroupCollection.InnerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.Add(AutomatedSolutions.Win.Comm.Group)">
            <summary>
            
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.AddRange(AutomatedSolutions.Win.Comm.Group[])">
            <summary>
            
            </summary>
            <param name="groups"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.Contains(AutomatedSolutions.Win.Comm.Group)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.IndexOf(AutomatedSolutions.Win.Comm.Group)">
            <summary>
            
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.Insert(System.Int32,AutomatedSolutions.Win.Comm.Group)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="group"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.Remove(AutomatedSolutions.Win.Comm.Group)">
            <summary>
            
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.GroupCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.GroupCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.GroupCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.GroupCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.GroupCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Device.GroupCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Device.GroupCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.DeviceEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.DeviceEventArgs.#ctor(AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories,System.Int32)">
            <summary>
            This constructor is used for Device errors (errors returned from device)
            </summary>
            <param name="category"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.DeviceEventArgs.#ctor(AutomatedSolutions.Win.Comm.DeviceEventArgs.ErrorCodes)">
            <summary>
            This constructor is used for General errors
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.DeviceEventArgs.#ctor(System.String)">
            <summary>
            This constructor is used for system exceptions (no error code)
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories.SYSTEM">
            <summary>
            System exception, message only, no corresponding error code
            These errors were generated by the system
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories.GENERAL">
            <summary>
            General exception, ASComm error code and message
            These errors were generated by the ASComm.NET to indicate a trappable error occurred
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories.AB_CIP">
            <summary>
            A-B CIP exception, CIP Exception code and message
            These errors were generated by the target hardware device to indicate that a CIP command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories.EIP">
            <summary>
            EthernetIP exception, EIP Exception code and message
            These errors were generated by the target hardware device to indicate that an EIP command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories.AB_PCCC">
            <summary>
            A-B PCCC exception, PCCC exception code and message
            These errors were generated by the target hardware device to indicate that a PCCC command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories.AB_CSP">
            <summary>
            A-B CSP exception, CSP Exception code and message
            These errors were generated by the target hardware device to indicate that a CSP command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories.MODBUS">
            <summary>
            Modbus exception
            These errors were generated by the target hardware device to indicate that a Modbus command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories.GE_SRTP">
            <summary>
            GE_SRTP exception
            These errors were generated by the target hardware device to indicate that a SRTP command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.Categories.SI_S7">
            <summary>
            Siemens S7 exception
            These errors were generated by the target hardware device to indicate that an S7 command received an exception response.
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.DeviceEventArgs.ErrorCodes">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.ErrorCodes.ERROR_READ_ONE_OR_MORE_ITEMS">
            <summary> 
            An error occurred while reading from one or more items 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.ErrorCodes.ERROR_WRITE_ONE_OR_MORE_ITEMS">
            <summary> 
            An error occurred while writing to one or more items 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.ErrorCodes.ERROR_DUPLICATE_LABEL">
            <summary> 
            Label property must be unique 
            </summary>			
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.ErrorCodes.ERROR_INVALID_ROUTEPATH_FORMAT">
            <summary>
            Invalid RoutePath format
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.category">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.errorCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.message">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceEventArgs.timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.DeviceEventArgs.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.DeviceEventArgs.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.DeviceEventArgs.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.DeviceEventArgs.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ChannelException">
            <summary>
            The exception that is thrown when a Channel error occurs
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ChannelException.#ctor(AutomatedSolutions.Win.Comm.ChannelEventArgs)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="evArgs"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelException.evArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelException.category">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelException.errorCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ChannelException.message">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ChannelException.EvArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ChannelException.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ChannelException.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ChannelException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.DeviceException">
            <summary>
            The exception that is thrown when a Device error occurs
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.DeviceException.#ctor(AutomatedSolutions.Win.Comm.DeviceEventArgs)">
            <summary>
            
            </summary>
            <param name="evArgs"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceException.evArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceException.category">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceException.errorCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.DeviceException.message">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.DeviceException.EvArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.DeviceException.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.DeviceException.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.DeviceException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ItemException">
            <summary>
            The exception that is thrown when an Item error occurs
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ItemException.#ctor(AutomatedSolutions.Win.Comm.ItemEventArgs)">
            <summary>
            
            </summary>
            <param name="evArgs"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemException.errorCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemException.category">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemException.message">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ItemException.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ItemException.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ItemException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Group">
            <summary>
            The Group class is used to logically group items with common characteristics together.
            Characteristic currently include Active status and Update Rate.
            The Group class contains a Items collection which stores the group's Items.
            The Device class supports the ISserializable and IDisposable interfaces.
            </summary>
            <remarks>
            Because this class has a thread that needs to be started by the constructor,
            it was created with the ISerializable interface so the SerializationInfo constructor is called.
            This means that serialization of elements needs to be handled manually.
            The GetObjectData function gathers data from the fields to be serialized prior to disposal
            and then the data is passed back to the serialization constructor when the object is recreated.
            </remarks>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.#ctor(System.Boolean,System.Int32)">
            <summary>
            Assignment Constructor
            </summary>
            <param name="active">
            Indicates whether Group is active (scanning data points on hardware device). Default = true.
            </param>
            <param name="updateRate">
            The rate in milliseconds at which data points on hardware device should be scanned. Default = 500 mSec.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            De-serialization Constructor
            This constructor is called by the ISerializable Interface
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.DefaultUpdateRate">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.DefaultActiveState">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.refreshLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.items">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.description">
            <summary>
            Internal storage for Description property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.parent">
            <summary>
             Reference to Device that contains group
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.active">
            <summary>
            Internal storage for Active property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.itemCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.label">
            <summary>
            Internal storage for Name property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.updateRate">
            <summary>
            Internal storage for UpdateRate property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.tag">
            <summary>
            Internal storage for Tag property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.disposed">
            <summary>
            Used in support of IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.workerThread">
            <summary>
            This code is taken from 'Programming .NET Components' (O'Reilly)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.thread">
            <summary>
            The one and only thread for this group
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.counter">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.scanTime">
            <summary>
            stores measured update rate, reported by thread
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.Items">
            <summary>
            Gets the group collection for this device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.IsDesignMode">
            <summary>
            Exposes protected DesignMode property to thread.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.Parent">
            <summary>
            Gets parent Device
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.Description">
            <summary>
            Use to enter a description for this channel.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.Active">
            <summary>
            Active property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.Label">
            <summary>
            Label property
            </summary>
            <value>
            Any valid string, cannot be null
            </value>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.UpdateRate">
            <summary>
            Group update rate property
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.Tag">
            <summary>
            Gets or sets user-defined data associated with the component.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.GetScanTime">
            <returns>
            Returns measured time in milliseconds to scan all items in group, reported by group thread
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.Refresh">
            <summary>
            Performs a synchronous Read on all items in group. To perform a SyncRead on selected items, use the Device.Read method.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.StartThread">
            <summary>Start the communications thread</summary>
            <remarks>Private function, for use only by Group class.</remarks>
            <exception cref="T:System.Exception">Thrown when... .</exception>
            <example>This example shows how to call the StartThread method.
            <code>
              class MyApp
              {
            		...
              }
            </code>
            </example>
            <returns>No return value.</returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.SetItemsQuality(AutomatedSolutions.Win.Comm.Quality)">
            <summary>
            
            </summary>
            <param name="quality"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.DisposeItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Group.ItemCollection">
            <summary>
            Item Collection
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Group.ItemCollection.owner">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.#ctor(AutomatedSolutions.Win.Comm.Group)">
            <summary>
            The one and only constructor
            </summary>
            <param name="Owner"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.ItemCollection.Item(System.Int32)">
            <summary>
            The CollectionEditor will determine the type of objects to be created by
            looking at the property type of the following method. CollectionEditor
            internally uses reflection to get the PropertyInfo for the "Item" property. 
            This method must be public.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.ItemCollection.InnerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.Add(AutomatedSolutions.Win.Comm.Item)">
            <summary>
            This method is called at runtime when item is added via code
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.AddRange(AutomatedSolutions.Win.Comm.Item[])">
            <summary>
            This method is called at runtime when items are added via code
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.Clear">
            <summary>
            This method is called at runtime when Clear method is called from code
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.Contains(AutomatedSolutions.Win.Comm.Item)">
            <summary>
            This method is called at runtime when Contains method is called from code
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.IndexOf(AutomatedSolutions.Win.Comm.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.Insert(System.Int32,AutomatedSolutions.Win.Comm.Item)">
            <summary>
            This method is called at runtime when item is inserted via code
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.Remove(AutomatedSolutions.Win.Comm.Item)">
            <summary>
            This method is called at runtime when item is removed via code
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.RemoveAt(System.Int32)">
            <summary>
            This method is called at runtime when item is removed via code
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.ItemCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the IList has a fixed size.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.ItemCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.ItemCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            In C#, this property is the indexer for the IList class.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the IList.
            This method is called at design-time when item is visually designed
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.ItemCollection.Count">
            <summary>
            gets the number of elements contained in the ICollection
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.ItemCollection.IsSynchronized">
            <summary>
            gets a value indicating whether access to the ICollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Group.ItemCollection.SyncRoot">
            <summary>
            gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.ItemCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Group.Dispose(System.Boolean)">
            <summary>
            Internal Dispose method
            </summary>
            <param name="disposing"></param>
            <remarks>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly or indirectly by a user's code. 
            Managed and unmanaged resources can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </remarks>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.WorkerThread">
            <summary>
            This code is taken from 'Programming .NET Components' (O'Reilly)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.WorkerThread.thread">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.WorkerThread.endLoop">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.WorkerThread.endLoopMutex">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.WorkerThread.group">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.WorkerThread.active">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.WorkerThread.exitEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.WorkerThread.#ctor(AutomatedSolutions.Win.Comm.Group)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.WorkerThread.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.WorkerThread.Active">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.WorkerThread.EndLoop">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.WorkerThread.Kill">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.WorkerThread.UpdateTags">
            <summary>
            This is the thread procedure.
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Quality">
            <summary>
            Quality enumeration
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Quality.GOOD">
            <summary>
            Good quality
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Quality.INACTIVE">
            <summary>
            Group or Item is inactive
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Quality.UNCERTAIN">
            <summary>
            Uncertain quality
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Quality.BAD">
            <summary>
            Bad quality
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.SimulationType">
            <summary>
            Simulation Types
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SimulationType.USER">
            <summary>
            User simulation type - values are not manipulated, okay for writing
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SimulationType.SINE">
            <summary>
            Sine simulation type - values are generated using sine algorithm, written values ignored
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SimulationType.RAMP">
            <summary>
            Ramp simulation type - values are generated using sawtooth algorithm, written values ignored
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.SimulationType.RANDOM">
            <summary>
            Random simulation type - values are generated using random algorithm, written values ignored
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Item">
            <summary>
            Item class
            
            The Item class is used to represent data areas in hardware devices (PLCs, instrumentation, etc.).
            The Item class supports the ISserializable and IDisposable interfaces.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.valuesArrayModified">
            <summary>
            Indicates whether the Values array needs to be redimensioned
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.active">
            <summary>
            Internal storage for Active property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.parent">
            <summary>
            Internal storage for Parent property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.tag">
            <summary>
            Internal storage for Tag property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.label">
            <summary>
            internal storage for Label property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.description">
            <summary>
            internal storage for Description property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.hwTagName">
            <summary>
            internal storage for HWTagName property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.simType">
            <summary>
             Internal storage for SimType property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.elements">
            <summary>
            internal storage for elements property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.itemIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.disposed">
            <summary>
            Used in support of IDisposable interface
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.quality">
            <summary>
             Internal storage for quality property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.values">
            <summary>
             Internal storage for Value property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.timestamp">
            <summary>
             Internal storage for Timestamp property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.values2write">
            <summary>
             Internal storage for Value property
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.counter">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Item.simDataChanged">
            <summary>
            Flag to indicate simulation data values have changed. 
            Only valid for SimType == SimType.USER and is set when a unique value is written using SimWrite.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.#ctor(AutomatedSolutions.Win.Comm.Item)">
            <summary>
            Copy constructor
            Use this constructor to create a new item and copy the contents from an existing item.
            </summary>
            <param name="item">Item to copy from.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.#ctor(System.String)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent a single tag on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the tag on the hardware device.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.#ctor(System.String,System.Int32)">
            <summary>
            Assignment constructor
            Use this constructor for items that represent an array of contiguous tags on the hardware device.
            This overload can be used to quickly create an item for direct use with the Device Read and Write calls.
            </summary>
            <param name="hwTagName">Hardware tag name. Enter the name of the starting tag on the hardware device.</param>
            <param name="elements">Number of elements. Enter the number of array elements.</param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.Finalize">
            <summary>
            Destructor
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.Parent">
            <summary>
            Gets the parent group, read-only. Parent property can only be set by adding the Item to the parent object's ItemCollection.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.Active">
            <summary>
            Gets or sets the active state. Indicates whether the Item is active or inactive. If False, item will not be included in group updates; if True, item is updated at group update interval.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.Label">
            <summary>
            Gets or sets the Label property, required. Indicates the user-supplied label to associate with this Item instance. This property is used for visual purposes and is different than the item component's programmatic name. Any unique alphanumeric string is valid.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.Description">
            <summary>
            Gets or sets the Description property, optional. Indicates the user-supplied text description to associate with this Item instance. Any alphanumeric string is valid.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.HWTagName">
            <summary>
            Gets or sets the hardware tag name property, required. Indicates the hardware tag name to associate with this Item instance. This field should correspond to a valid tag/register in your hardware device.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.Elements">
            <summary>
            Gets or sets the elements property, required. Indicates the number of hardware tag elements represented by this item instance.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.SimType">
            <summary>
            Gets or sets the SimType property, required. Indicates the simulation type to use if this Item belongs to a device set to Simulation mode.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.Quality">
            <summary>
            Gets the Quality property, read-only. Quality associated with this item's values
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.Values">
            <summary>
            Gets the Values property. Object array of values held by this item.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.Tag">
            <summary>
            Gets or sets user-defined data associated with the component.
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Item.Timestamp">
            <summary>
            Gets the Timestamp property, read-only. Time this item last changed value or quality
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.ConfigureValuesArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.SetQuality(AutomatedSolutions.Win.Comm.Quality,System.Boolean)">
            <summary>
            Sets item quality and fires DataChange event if quality changes
            For Quality != Good, use this overload.
            For Quality = Good, use other overload that accepts DataChanged flag.
            </summary>
            <param name="quality"></param>
            <param name="disposed"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.SetQuality(AutomatedSolutions.Win.Comm.Quality,System.Boolean,System.Boolean)">
            <summary>
            Sets item quality and fires DataChange event if quality changes or DataChanged flag is set.
            </summary>
            <param name="quality"></param>
            <param name="disposed"></param>
            <param name="dataChanged"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.Read">
            <summary>
            Performs a synchronous hardware read of the data point(s) represented by this item. 
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.BeginRead(System.AsyncCallback,System.Object)">
            <summary>
            Starts an synchronous hardware read of the data point(s) represented by this item. 
            </summary>
            <param name="callback">
            An optional asynchronous callback, to be called when the transaction is complete. 
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular asynchronous request from other requests. 
            </param>
            <returns>
            An IAsyncResult object that stores state information and any user defined data for this asynchronous operation. 
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.EndRead(System.IAsyncResult)">
            <summary>
            Ends an asynchronous hardware read 
            </summary>
            <param name="asyncResult">
            An IAsyncResult object that stores state information and any user defined data for this asynchronous operation. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.Write(System.Object)">
            <summary>
            Performs a synchronous hardware write to the data point(s) represented by this item. 
            </summary>
            <param name="val">
            Value(s) to write. 
            Since an Item can represent one or more values, based on Elements property, val can represent a single value, or an array of values.
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.BeginWrite(System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Starts an asynchronous hardware write to the data point(s) represented by this item. 
            </summary>
            <param name="val">
            Value(s) to write. 
            Since an Item can represent one or more values, based on Elements property, val can represent a single value, or an array of values.
            </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the transaction is complete. 
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular asynchronous request from other requests. 
            </param>
            <returns>
            An IAsyncResult object that stores state information and any user defined data for this asynchronous operation. 
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous hardware write. 
            </summary>
            <param name="asyncResult">
            An IAsyncResult object that stores state information and any user defined data for this asynchronous operation. 
            </param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.InvokeDelegate(System.Delegate,System.Object[])">
            <summary>
            This checks for GUI application
            If GUI application, invoke is used to avoid cross-threaded UI operations
            Else, handler delegate is called directly
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.DelegateBeginInvoke(System.Delegate,System.Object[])">
            <summary>
            This checks for GUI application
            If GUI application, invoke is used to avoid cross-threaded UI operations
            Else, handler delegate is called directly
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.FireDataChange(System.Boolean)">
            <summary>
            Instructs item to call its DataChange event
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.FireError(AutomatedSolutions.Win.Comm.ItemEventArgs,System.Boolean)">
            <summary>
            Instructs item to call its Error event
            </summary>
            <param name="evArgs"></param>
            <param name="disposing"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.GetValueType">
            <summary>
            Returns the value type represented by the Values property
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.GetSystemType">
            <summary>
            For internal use only. Returns the CLR system type that corresponds to the hardware data type for this item.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.GetStructuredValues(System.Object@)">
            <summary>
            Populates a class reference with structured data from the controller.
            </summary>
            <param name="o">
            Reference to object. 
            NOTE: Pass-by-reference parameters must be the same as the parameter type, so you must assign an instance of your UDT/PDT class to a variable of type Object to pass in as a parameter.
            </param>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.Item.dataChangedEvent">
            <summary>
            Internal storage for Event to indicate that item data has changed
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.Item.DataChanged">
            <summary>
            Event to indicate that item data has changed
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.Item.errorEvent">
            <summary>
            Internal storage for Event to indicate that an error has occurred
            </summary>
        </member>
        <member name="E:AutomatedSolutions.Win.Comm.Item.Error">
            <summary>
            Event to indicate that item data has changed
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Item.DataChangedEventHandler">
            <summary>
            Delegate for DataChanged event
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Item.ErrorEventHandler">
            <summary>
            Delegate for Error event
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Item.AsyncReadDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Item.AsyncWriteDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Item.Dispose(System.Boolean)">
            <summary>
            Internal Dispose method
            </summary>
            <param name="disposing"></param>
            <remarks>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly or indirectly by a user's code. 
            Managed and unmanaged resources can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </remarks>		
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ItemEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ItemEventArgs.Categories">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.Categories.SYSTEM">
            <summary>
            System exception, message only, no corresponding error code
            These errors were generated by the system
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.Categories.GENERAL">
            <summary>
            General exception, consists of error code and message
            These errors were generated by the ASComm.NET to indicate a trappable error occurred
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.Categories.WARNING">
            <summary>
            General warning, operation will succeed but user is notified
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.Categories.AB_CIP">
            <summary>
            A-B CIP exception, CIP Exception code and message
            These errors were generated by the target hardware device to indicate that a CIP command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.Categories.AB_PCCC">
            <summary>
            Embedded PCCC exception, PCCC exception code and message
            These errors were generated by the target hardware device to indicate that a PCCC command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.Categories.MODBUS">
            <summary>
            Modbus exception
            These errors were generated by the target hardware device to indicate that a Modbus command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.Categories.GE_SRTP">
            <summary>
            GE_SRTP exception
            These errors were generated by the target hardware device to indicate that a SRTP command received an exception response.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.Categories.SI_S7">
            <summary>
            Siemens S7 exception
            These errors were generated by the target hardware device to indicate that an S7 command received an exception response.
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes">
            <summary>
            Enumerated values for ItemEventArgs.Categories.GENERAL error events only
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.NULL_PARENT">
            <summary>
            A read or write operation was requested on an item that has not been added to a Group
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.UNSUPPORTED_DATATYPE">
            <summary>
            The requested datatype is not currently supported
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.DATA_CONVERSION_ERROR">
            <summary>
            Invalid values supplied for a write operation 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.VALUES_TRUNCATED">
            <summary>
            The number of elements in the value array supplied to the Write method 
            exceeds the value of the Elements property.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.STRING_LENGTH_EXCEEDED">
            <summary>
            The string value supplied to the Write routine exceeded the hardware tag's string capacity.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.INSUFFICIENT_WRITE_DATA">
            <summary>
            Array of values supplied to write method was dimensioned smaller than the number of elements represented by this item
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.BIT_NOT_SUPPORTED">
            <summary>
            Bit operations not supported on specified hardware data type
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.ARRAY_NOT_SUPPORTED">
            <summary>
            Array of complex data type (timer, counter, etc.) subelements not supported.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.NULL_REFERENCE">
            <summary>
            An Item with a null reference was supplied to a device read or write method.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.NULL_VALUE">
            <summary>
            A value with a null reference was supplied to a device write method.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.HW_TAG_NAME_NOT_RECOGNIZABLE">
            <summary>
            The item's hardware tag name is not recognizable.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.HW_TAG_TYPE_AUTO">
            <summary>
            The item's HWTagType property is set to AUTO, but communications with the target device has not been established. 
            AUTO is not supported for simulation mode, because the tag type must be obtained from the target hardware device.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.HW_TAG_NAME_INVALID_VALUE">
            <summary>
            The item's hardware tag name contains an invalid value.			
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.DATA_BOUNDRY_EXCEEDED">
            <summary>
            The number of elements specified exceeds the item's data boundry
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.INVALID_STRING_LENGTH">
            <summary>
            A string value supplied to the write method exceeds the device's string size limit.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.ELEMENTS_INVALID_VALUE">
            <summary>
            The number of elements specified in the Item.Elements property is not valid for the tag specified in the Item.HWTagName property.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.DISPOSING">
            <summary>
            The requested operation could not be completed because the Device's Dispose method was called.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.HW_TAG_TYPE_AUTO_NOT_VALID_FOR_STRINGS">
            <summary>
            The item's HWTagType property is set to AUTO, but the returned data type is not an atomic or supported structure type. 
            AUTO is supported for atomic and most structure types, but not for string types.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.WRITE_SIMTYPE_NOT_SUPPORTED">
            <summary>
            Write is only supported for simulation type = USER
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.HW_TAG_NAME_INVALID_FOR_TAG_TYPE">
            <summary>
            The item's hardware tag name is not valid for specified hardware tag type.			
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.HW_TAG_NAME_INVALID_FOR_DATA_TYPE">
            <summary>
            The item's hardware tag name is not valid for the specified hardware data type.			
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.READ_ONLY_TAG">
            <summary>
            This item represents a read-only tag on the hardware device.	
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.UNSUPPORTED_REGISTER_DATATYPE">
            <summary>
            The specified register datatype is not supported.	Refer to HWDataType property.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.STRUCTURE_LENGTH_PROPERTY_NOT_SET">
            <summary>
            The Item.StructureLength property has not been set to a valid value
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.PACKED_ASCII_ODD_LENGTH">
            <summary>
            Packed Ascii data must be even number of bytes.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.DATA_SIZE_MISMATCH">
            <summary>
            The returned data does not match the computed size for the specified variable.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.SYMBOLIC_LOOKUP_FAILED">
            <summary>
            The target device was unable to find the symbolic tag name specified in Item.HWTagName property 
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.HW_TAG_NAME_INVALID_BIT_SPECIFIER">
            <summary>
            The specified bit is not valid for associated data type, or type does not support bit operations.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.HWDATATYPE_NOT_SUPPORTED_FOR_SPECIFIED_CONTROLLER">
            <summary>
            The specified HWDATATYPE property value is not supported for the specified controller.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes.CONTROLLER_DATA_DOES_NOT_MATCH_PDT_DEFINITION">
            <summary>
            Controller data structure does not match ASComm.NET pre-defined type structure. Contact Automated Solutions Technical Support.
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ItemEventArgs.#ctor(AutomatedSolutions.Win.Comm.ItemEventArgs.Categories,System.Int32)">
            <summary>
            This constructor is used for protocol specific item errors returned from device
            </summary>
            <param name="category"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ItemEventArgs.#ctor(AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCodes)">
            <summary>
            This constructor is used for General errors
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.ItemEventArgs.#ctor(System.String)">
            <summary>
            This constructor is used for system exceptions (no error code)
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.category">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.errorCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.message">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.ItemEventArgs.timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ItemEventArgs.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ItemEventArgs.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ItemEventArgs.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.ItemEventArgs.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.Result">
            <summary>
            This class is used to hold result codes from IO operations (read, write, etc.).
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Result.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.Result.evArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Result.EvArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.Result.IsOK">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Result.SetOK">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Result.Set(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.Result.Set(AutomatedSolutions.Win.Comm.ItemEventArgs)">
            <summary>
            
            </summary>
            <param name="evArgs"></param>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.TcpClientSocket">
            <summary>
            Base socket class
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpClientSocket.WSAEWOULDBLOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpClientSocket.WSAETIMEDOUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpClientSocket.connectInProcess">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpClientSocket.currentEndPoint">
            <summary>
            Temporary storage for endpoint when connected.
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpClientSocket.s">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpClientSocket.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpClientSocket.IsValid(System.Net.Sockets.Socket)">
            <summary>
            Tests socket validity
            </summary>
            <returns>
            True if (socket != null) and (socket.Handle != -1), else false
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpClientSocket.IsConnected">
            <summary>
            Tests connection status
            </summary>
            <returns>
            True if socket is valid and writable, else false
            </returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpClientSocket.IsNewEndPoint(System.String,System.Int32)">
            <summary>
            Test to see if Address, Port are new endpoint
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpClientSocket.IsNewEndPoint(System.Net.IPEndPoint)">
            <summary>
            Test to see if targetEndPoint == currentEndPoint
            </summary>
            <param name="targetEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpClientSocket.Connect(System.String,System.Int32,System.Int32)">
            <summary>
            Connect - Performs a TCP/IP connect sequence. 
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="timeoutConnect"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpClientSocket.Disconnect">
            <summary>
            Performs a shutdown and closes socket.
            After call to close, Socket.Handle = -1 
            </summary>		
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpClientSocket.SetTransactionTimeout(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpClientSocket.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Comm.TcpServerConnection">
            <summary>
            TCP Server connection class
            (from CodeProject)
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpServerConnection.exitFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpServerConnection.exitFlagLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpServerConnection.exited">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpServerConnection.exitedLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpServerConnection.m_socket">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpServerConnection.m_thread">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpServerConnection.m_lastVerifyTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpServerConnection.m_encoding">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Comm.TcpServerConnection.evExit">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpServerConnection.#ctor(System.Net.Sockets.TcpClient,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="sock"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpServerConnection.connected">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpServerConnection.forceDisconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Comm.TcpServerConnection.canStartNewThread">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.TcpServerConnection.ExitFlag">
            <summary>
            MM Added
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.TcpServerConnection.Exited">
            <summary>
            MM Added
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.TcpServerConnection.Socket">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.TcpServerConnection.CallbackThread">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.TcpServerConnection.LastVerifyTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutomatedSolutions.Win.Comm.TcpServerConnection.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Win.Licensing.ASLicenseProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Licensing.ASLicenseProvider.OpenLicenseFile(AutomatedSolutions.Win.Comm.ASWritableLicense@,System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="lf"></param>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="M:AutomatedSolutions.Win.Licensing.ASLicenseProvider.IsKeyValid(System.String,System.Type,System.Object)">
            <summary>
            This section needs to use the type parameter to determine product type
            For development and testing purposes, type is not used
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Licensing.ASLicenseProvider.Platform">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Licensing.ASLicenseProvider.RunningPlatform">
            <summary>
            Use to determine operating system
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Win.Licensing.ASLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="allowExceptions"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Win.Licensing.ASLicense">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Licensing.ASLicense.owner">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Win.Licensing.ASLicense.key">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Licensing.ASLicense.#ctor(AutomatedSolutions.Win.Licensing.ASLicenseProvider,System.String)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="key"></param>
        </member>
        <member name="P:AutomatedSolutions.Win.Licensing.ASLicense.LicenseKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Win.Licensing.ASLicense.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomatedSolutions.Util.SocketHelper">
            <summary>
            Socket helper class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Util.SocketHelper.IsValidIPAddress(System.String)">
            <summary>
            
            </summary>
            <param name="ipAddr"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Util.DataHelper">
            <summary>
            Data Conversion Helper class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.OctalToDecimal(System.String)">
            <summary>
            Coverts octal string to decimal string
            </summary>
            <param name="octalNumber"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.DecimalToBcd(System.Byte)">
            <summary>
            Converts Byte to BCD8
            </summary>
            <param name="dec"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.BcdToDecimal(System.Byte)">
            <summary>
            Converts BCD8 to Byte
            </summary>
            <param name="bcd"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.DecimalToBcd(System.UInt16)">
            <summary>
            Converts UInt16 to BCD16
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.BcdToDecimal(System.UInt16)">
            <summary>
            Converts BCD16 to UInt16
            </summary>
            <param name="bcd"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.DecimalToBcd(System.UInt32)">
            <summary>
            Converts UInt32 to BCD32
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.BcdToDecimal(System.UInt32)">
            <summary>
            Converts BCD32 to UInt32
            </summary>
            <param name="bcd"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.LOBYTE(System.Int16)">
            <summary>
            Extracts low byte from 16 bit word
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.LOBYTE(System.UInt16)">
            <summary>
            Extracts low byte from unsigned 16 bit word
            </summary>
            <param name="val"></param>
            <returns></returns>	
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.LOWORD(System.Int32)">
            <summary>
            Extracts low word from 32 bit word
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.LOWORD(System.UInt32)">
            <summary>
            Extracts low word from unsigned 32 bit word
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.HIBYTE(System.Int16)">
            <summary>
            Extracts high byte from 16 bit word
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.HIBYTE(System.UInt16)">
            <summary>
            Extracts high byte from unsigned 16 bit word
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.HIWORD(System.Int32)">
            <summary>
            Extracts high word from 32 bit word
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.HIWORD(System.UInt32)">
            <summary>
            Extracts high word from unsigned 32 bit word
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.DataHelper.BitsToBytes(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="startBit"></param>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Util.int2float">
            <summary>
            Integer to floating point coercion structure
            </summary>	
        </member>
        <member name="T:AutomatedSolutions.Util.BitConverterBE">
            <summary>
            BitConverter Big-endian class
            Equivalent to BitConverter only operates on big-endian formatting
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.ToInt16(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.ToInt32(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.ToInt64(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.ToSingle(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.GetBytes(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.GetBytes(System.UInt16)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.GetBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.GetBytes(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.GetBytes(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.GetBytes(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutomatedSolutions.Util.BitConverterBE.GetBytes(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Util.Compare">
            <summary>
            Byte comparison class
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Util.Compare.ByteArraysEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays for equal size and values
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="T:AutomatedSolutions.Util.SequentialNumber">
            <summary>
            Sequential number generator
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Util.SequentialNumber.thisLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutomatedSolutions.Util.SequentialNumber.lastIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutomatedSolutions.Util.SequentialNumber.GetNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
